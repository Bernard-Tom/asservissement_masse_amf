
PWM2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800d260  0800d260  0001d260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d318  0800d318  000204c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d318  0800d318  0001d318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d320  0800d320  000204c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d320  0800d320  0001d320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d324  0800d324  0001d324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004c0  20000000  0800d328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200004c0  0800d7e8  000204c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c0  0800d7e8  000207c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3d5  00000000  00000000  000204f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f1d  00000000  00000000  0003e8c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  000417e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  00042d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d71  00000000  00000000  00044208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190ee  00000000  00000000  0005df79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3ab3  00000000  00000000  00077067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ab1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006658  00000000  00000000  0011ab70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004c0 	.word	0x200004c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d244 	.word	0x0800d244

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004c4 	.word	0x200004c4
 80001dc:	0800d244 	.word	0x0800d244

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <PID_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PID_init(){
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
	Kp = 0.6;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <PID_init+0x24>)
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <PID_init+0x28>)
 8000f98:	601a      	str	r2, [r3, #0]
	Ki = 0;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <PID_init+0x2c>)
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
	Kd = 0.15;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <PID_init+0x30>)
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <PID_init+0x34>)
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000674 	.word	0x20000674
 8000fb8:	3f19999a 	.word	0x3f19999a
 8000fbc:	20000564 	.word	0x20000564
 8000fc0:	20000624 	.word	0x20000624
 8000fc4:	3e19999a 	.word	0x3e19999a

08000fc8 <ADC_Select_CH0>:
float Value_relle;
uint16_t Vr;
int32_t CH1_DC;

void ADC_Select_CH0(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]

	sConfig.Channel=ADC_CHANNEL_0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
	sConfig.Rank=1;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime=ADC_SAMPLETIME_28CYCLES;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	60bb      	str	r3, [r7, #8]
	if(HAL_ADC_ConfigChannel(&hadc1,&sConfig)!= HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <ADC_Select_CH0+0x3c>)
 8000fec:	f006 fa9e 	bl	800752c <HAL_ADC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <ADC_Select_CH0+0x32>
	{
		Error_Handler();
 8000ff6:	f000 fc07 	bl	8001808 <Error_Handler>
	}
}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200005c8 	.word	0x200005c8

08001008 <ADC_Select_CH1>:
void ADC_Select_CH1(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]

	sConfig.Channel=ADC_CHANNEL_1;
 800101a:	2301      	movs	r3, #1
 800101c:	603b      	str	r3, [r7, #0]
	sConfig.Rank=2;
 800101e:	2302      	movs	r3, #2
 8001020:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime=ADC_SAMPLETIME_84CYCLES;
 8001022:	2304      	movs	r3, #4
 8001024:	60bb      	str	r3, [r7, #8]
	if(HAL_ADC_ConfigChannel(&hadc1,&sConfig)!= HAL_OK)
 8001026:	463b      	mov	r3, r7
 8001028:	4619      	mov	r1, r3
 800102a:	4806      	ldr	r0, [pc, #24]	; (8001044 <ADC_Select_CH1+0x3c>)
 800102c:	f006 fa7e 	bl	800752c <HAL_ADC_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <ADC_Select_CH1+0x32>
	{
		Error_Handler();
 8001036:	f000 fbe7 	bl	8001808 <Error_Handler>
	}
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200005c8 	.word	0x200005c8

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	RangingConfig_e RangingConfig = LONG_RANGE;
 800104e:	2300      	movs	r3, #0
 8001050:	75fb      	strb	r3, [r7, #23]

	float Rshunt=0.005;
 8001052:	4b81      	ldr	r3, [pc, #516]	; (8001258 <main+0x210>)
 8001054:	613b      	str	r3, [r7, #16]
	float G2=37.2;
 8001056:	4b81      	ldr	r3, [pc, #516]	; (800125c <main+0x214>)
 8001058:	60fb      	str	r3, [r7, #12]

	float G1=1.66;
 800105a:	4b81      	ldr	r3, [pc, #516]	; (8001260 <main+0x218>)
 800105c:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105e:	f006 f80b 	bl	8007078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001062:	f000 f9e9 	bl	8001438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001066:	f000 fb5f 	bl	8001728 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800106a:	f000 fb33 	bl	80016d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800106e:	f000 fabb 	bl	80015e8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001072:	f000 fa8b 	bl	800158c <MX_I2C1_Init>
  MX_ADC1_Init();
 8001076:	f000 fa47 	bl	8001508 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT (&huart2, UART1_rxBuffer, 3);


  XNUCLEO53L0A1_hi2c = hi2c1;
 800107a:	4a7a      	ldr	r2, [pc, #488]	; (8001264 <main+0x21c>)
 800107c:	4b7a      	ldr	r3, [pc, #488]	; (8001268 <main+0x220>)
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	2354      	movs	r3, #84	; 0x54
 8001084:	461a      	mov	r2, r3
 8001086:	f00a f9d9 	bl	800b43c <memcpy>
    	  ResetAndDetectSensor(0);
 800108a:	2000      	movs	r0, #0
 800108c:	f005 ffd6 	bl	800703c <ResetAndDetectSensor>
    /* Reset and Detect all sensors */
    	  	  ResetAndDetectSensor(0);
 8001090:	2000      	movs	r0, #0
 8001092:	f005 ffd3 	bl	800703c <ResetAndDetectSensor>
    	  SetupSingleShot(RangingConfig);//DISTANCE
 8001096:	7dfb      	ldrb	r3, [r7, #23]
 8001098:	4618      	mov	r0, r3
 800109a:	f005 feb3 	bl	8006e04 <SetupSingleShot>




  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1); //PWM
 800109e:	2100      	movs	r1, #0
 80010a0:	4872      	ldr	r0, [pc, #456]	; (800126c <main+0x224>)
 80010a2:	f008 fc65 	bl	8009970 <HAL_TIM_PWM_Start>

  PID_init();
 80010a6:	f7ff ff73 	bl	8000f90 <PID_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  	  //test: set GPIO  pin high
  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 80010aa:	2201      	movs	r2, #1
 80010ac:	2101      	movs	r1, #1
 80010ae:	4870      	ldr	r0, [pc, #448]	; (8001270 <main+0x228>)
 80010b0:	f006 ff92 	bl	8007fd8 <HAL_GPIO_WritePin>

  	  //GET ADC VALUE d'un pin PA0 pour le calcul de Im
  	  ADC_Select_CH0();
 80010b4:	f7ff ff88 	bl	8000fc8 <ADC_Select_CH0>
  	  HAL_ADC_Start(&hadc1);
 80010b8:	486e      	ldr	r0, [pc, #440]	; (8001274 <main+0x22c>)
 80010ba:	f006 f8b7 	bl	800722c <HAL_ADC_Start>
  	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80010be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010c2:	486c      	ldr	r0, [pc, #432]	; (8001274 <main+0x22c>)
 80010c4:	f006 f999 	bl	80073fa <HAL_ADC_PollForConversion>
  	  ADC_VAL[0] = HAL_ADC_GetValue(&hadc1); //0volt = 0 et 3.3volt = 4095
 80010c8:	486a      	ldr	r0, [pc, #424]	; (8001274 <main+0x22c>)
 80010ca:	f006 fa21 	bl	8007510 <HAL_ADC_GetValue>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	4b69      	ldr	r3, [pc, #420]	; (8001278 <main+0x230>)
 80010d4:	801a      	strh	r2, [r3, #0]
  	  //calcul de la valeur de Im
  	  VS2= 0.0008*ADC_VAL[0];
 80010d6:	4b68      	ldr	r3, [pc, #416]	; (8001278 <main+0x230>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa2a 	bl	8000534 <__aeabi_i2d>
 80010e0:	a35b      	add	r3, pc, #364	; (adr r3, 8001250 <main+0x208>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff fa8f 	bl	8000608 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff fd81 	bl	8000bf8 <__aeabi_d2f>
 80010f6:	4603      	mov	r3, r0
 80010f8:	607b      	str	r3, [r7, #4]
  	  Im=(VS2/(Rshunt*G2*10))*1000;
 80010fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80010fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001106:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800110a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800110e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001116:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800127c <main+0x234>
 800111a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001122:	ee17 3a90 	vmov	r3, s15
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b55      	ldr	r3, [pc, #340]	; (8001280 <main+0x238>)
 800112a:	801a      	strh	r2, [r3, #0]
  	  HAL_ADC_Stop(&hadc1);
 800112c:	4851      	ldr	r0, [pc, #324]	; (8001274 <main+0x22c>)
 800112e:	f006 f931 	bl	8007394 <HAL_ADC_Stop>

  	  //GET ADC VALUE d'un pin PA1 pour le calcul de Vr
  	  ADC_Select_CH1();
 8001132:	f7ff ff69 	bl	8001008 <ADC_Select_CH1>
  	  HAL_ADC_Start(&hadc1);
 8001136:	484f      	ldr	r0, [pc, #316]	; (8001274 <main+0x22c>)
 8001138:	f006 f878 	bl	800722c <HAL_ADC_Start>
  	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800113c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001140:	484c      	ldr	r0, [pc, #304]	; (8001274 <main+0x22c>)
 8001142:	f006 f95a 	bl	80073fa <HAL_ADC_PollForConversion>
  	  ADC_VAL[1] = HAL_ADC_GetValue(&hadc1); //0volt = 0 et 3.3volt = 4095
 8001146:	484b      	ldr	r0, [pc, #300]	; (8001274 <main+0x22c>)
 8001148:	f006 f9e2 	bl	8007510 <HAL_ADC_GetValue>
 800114c:	4603      	mov	r3, r0
 800114e:	b29a      	uxth	r2, r3
 8001150:	4b49      	ldr	r3, [pc, #292]	; (8001278 <main+0x230>)
 8001152:	805a      	strh	r2, [r3, #2]
  	  //calcul de la valeur de Vr
  	  VS1= 0.0008*ADC_VAL[1];
 8001154:	4b48      	ldr	r3, [pc, #288]	; (8001278 <main+0x230>)
 8001156:	885b      	ldrh	r3, [r3, #2]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9eb 	bl	8000534 <__aeabi_i2d>
 800115e:	a33c      	add	r3, pc, #240	; (adr r3, 8001250 <main+0x208>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fa50 	bl	8000608 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f7ff fd42 	bl	8000bf8 <__aeabi_d2f>
 8001174:	4603      	mov	r3, r0
 8001176:	603b      	str	r3, [r7, #0]
  	  Vr=(VS1/G1)*1000;
 8001178:	edd7 6a00 	vldr	s13, [r7]
 800117c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001184:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800127c <main+0x234>
 8001188:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001190:	ee17 3a90 	vmov	r3, s15
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <main+0x23c>)
 8001198:	801a      	strh	r2, [r3, #0]
  	  HAL_ADC_Stop(&hadc1);
 800119a:	4836      	ldr	r0, [pc, #216]	; (8001274 <main+0x22c>)
 800119c:	f006 f8fa 	bl	8007394 <HAL_ADC_Stop>


  	//  HAL_Delay(1000);

  	  //test: set GPIO  pin high
  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2101      	movs	r1, #1
 80011a4:	4832      	ldr	r0, [pc, #200]	; (8001270 <main+0x228>)
 80011a6:	f006 ff17 	bl	8007fd8 <HAL_GPIO_WritePin>

	  status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[0],// DISTANCE
 80011aa:	4937      	ldr	r1, [pc, #220]	; (8001288 <main+0x240>)
 80011ac:	4837      	ldr	r0, [pc, #220]	; (800128c <main+0x244>)
 80011ae:	f001 fff7 	bl	80031a0 <VL53L0X_PerformSingleRangingMeasurement>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b36      	ldr	r3, [pc, #216]	; (8001290 <main+0x248>)
 80011b8:	601a      	str	r2, [r3, #0]
	 			 	         	  			  	  	  	  	  	  	  	  &RangingMeasurementData);
	 		  position_courante=RangingMeasurementData.RangeMilliMeter;
 80011ba:	4b33      	ldr	r3, [pc, #204]	; (8001288 <main+0x240>)
 80011bc:	891a      	ldrh	r2, [r3, #8]
 80011be:	4b35      	ldr	r3, [pc, #212]	; (8001294 <main+0x24c>)
 80011c0:	801a      	strh	r2, [r3, #0]
	 		  //conevrtion en string de PC,Vr,Im et incrémentation de msg3 pour envoie
	       	   sprintf(msg3, "H%huV%huI%hu\n",position_courante,Vr,Im);
 80011c2:	4b34      	ldr	r3, [pc, #208]	; (8001294 <main+0x24c>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <main+0x23c>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <main+0x238>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	460b      	mov	r3, r1
 80011d6:	4930      	ldr	r1, [pc, #192]	; (8001298 <main+0x250>)
 80011d8:	4830      	ldr	r0, [pc, #192]	; (800129c <main+0x254>)
 80011da:	f00a f945 	bl	800b468 <siprintf>
	 			  if( status ==0 )
 80011de:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <main+0x248>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d109      	bne.n	80011fa <main+0x1b2>
	 			  {
	 				  //transmition des variables via l'uart
	 			  	 HAL_UART_Transmit(&huart2,(uint8_t*)msg3,sizeof(msg3),1000);// Sending in normal mode
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	2264      	movs	r2, #100	; 0x64
 80011ec:	492b      	ldr	r1, [pc, #172]	; (800129c <main+0x254>)
 80011ee:	482c      	ldr	r0, [pc, #176]	; (80012a0 <main+0x258>)
 80011f0:	f009 f97f 	bl	800a4f2 <HAL_UART_Transmit>
	 				 F411_SetDisplayString(msg3);
 80011f4:	4829      	ldr	r0, [pc, #164]	; (800129c <main+0x254>)
 80011f6:	f005 fd49 	bl	8006c8c <F411_SetDisplayString>
	 				 	         	  // Sensor_SetNewRange(&VL53L0XDevs[0],&RangingMeasurementData)
	 		      }
	 HAL_UART_Receive_IT (&huart2, UART1_rxBuffer, 3);
 80011fa:	2203      	movs	r2, #3
 80011fc:	4929      	ldr	r1, [pc, #164]	; (80012a4 <main+0x25c>)
 80011fe:	4828      	ldr	r0, [pc, #160]	; (80012a0 <main+0x258>)
 8001200:	f009 fa09 	bl	800a616 <HAL_UART_Receive_IT>
    /* USER CODE BEGIN 3 */

	 //asservissement TOR:

     if((uint32_t)position_courante < ConsigneMesure)
 8001204:	4b23      	ldr	r3, [pc, #140]	; (8001294 <main+0x24c>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <main+0x260>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d208      	bcs.n	8001224 <main+0x1dc>
      {

          TIM2->CCR1 = CH1_DC;
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <main+0x264>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800121a:	635a      	str	r2, [r3, #52]	; 0x34
          CH1_DC=65535*1;
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <main+0x264>)
 800121e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001222:	601a      	str	r2, [r3, #0]
      }
     if ((uint32_t)position_courante > ConsigneMesure)
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <main+0x24c>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <main+0x260>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d907      	bls.n	8001242 <main+0x1fa>
     {

         TIM2->CCR1 = CH1_DC;
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <main+0x264>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
         CH1_DC=0;
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <main+0x264>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]

	 	 	              //TIM2->CCR1 = CH1_DC;
	 	 	              //CH1_DC += 70;


	 	 	          HAL_Delay(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f005 ff8a 	bl	800715c <HAL_Delay>
  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8001248:	e72f      	b.n	80010aa <main+0x62>
 800124a:	bf00      	nop
 800124c:	f3af 8000 	nop.w
 8001250:	eb1c432d 	.word	0xeb1c432d
 8001254:	3f4a36e2 	.word	0x3f4a36e2
 8001258:	3ba3d70a 	.word	0x3ba3d70a
 800125c:	4214cccd 	.word	0x4214cccd
 8001260:	3fd47ae1 	.word	0x3fd47ae1
 8001264:	2000073c 	.word	0x2000073c
 8001268:	20000568 	.word	0x20000568
 800126c:	2000062c 	.word	0x2000062c
 8001270:	40020000 	.word	0x40020000
 8001274:	200005c8 	.word	0x200005c8
 8001278:	20000618 	.word	0x20000618
 800127c:	447a0000 	.word	0x447a0000
 8001280:	200006c8 	.word	0x200006c8
 8001284:	200006f4 	.word	0x200006f4
 8001288:	20000790 	.word	0x20000790
 800128c:	200002c0 	.word	0x200002c0
 8001290:	200004dc 	.word	0x200004dc
 8001294:	200004e0 	.word	0x200004e0
 8001298:	0800d260 	.word	0x0800d260
 800129c:	200004f4 	.word	0x200004f4
 80012a0:	2000067c 	.word	0x2000067c
 80012a4:	20000610 	.word	0x20000610
 80012a8:	20000678 	.word	0x20000678
 80012ac:	200005bc 	.word	0x200005bc

080012b0 <HAL_UART_RxCpltCallback>:
	 	           }
  /* USER CODE END 3 */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]

    	 atoi3=UART1_rxBuffer[0]-'0';
 80012ba:	4b59      	ldr	r3, [pc, #356]	; (8001420 <HAL_UART_RxCpltCallback+0x170>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	3b30      	subs	r3, #48	; 0x30
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b58      	ldr	r3, [pc, #352]	; (8001424 <HAL_UART_RxCpltCallback+0x174>)
 80012c4:	701a      	strb	r2, [r3, #0]
    	 atoi4=UART1_rxBuffer[1]-'0';
 80012c6:	4b56      	ldr	r3, [pc, #344]	; (8001420 <HAL_UART_RxCpltCallback+0x170>)
 80012c8:	785b      	ldrb	r3, [r3, #1]
 80012ca:	3b30      	subs	r3, #48	; 0x30
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b56      	ldr	r3, [pc, #344]	; (8001428 <HAL_UART_RxCpltCallback+0x178>)
 80012d0:	701a      	strb	r2, [r3, #0]
    	uint8_t atoi5=UART1_rxBuffer[2]-'0';
 80012d2:	4b53      	ldr	r3, [pc, #332]	; (8001420 <HAL_UART_RxCpltCallback+0x170>)
 80012d4:	789b      	ldrb	r3, [r3, #2]
 80012d6:	3b30      	subs	r3, #48	; 0x30
 80012d8:	75fb      	strb	r3, [r7, #23]

    	 int n=floor(log10(atoi3)+1);
 80012da:	4b52      	ldr	r3, [pc, #328]	; (8001424 <HAL_UART_RxCpltCallback+0x174>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f918 	bl	8000514 <__aeabi_ui2d>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	ec43 2b10 	vmov	d0, r2, r3
 80012ec:	f00a fd64 	bl	800bdb8 <log10>
 80012f0:	ec51 0b10 	vmov	r0, r1, d0
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	4b4c      	ldr	r3, [pc, #304]	; (800142c <HAL_UART_RxCpltCallback+0x17c>)
 80012fa:	f7fe ffcf 	bl	800029c <__adddf3>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	ec43 2b17 	vmov	d7, r2, r3
 8001306:	eeb0 0a47 	vmov.f32	s0, s14
 800130a:	eef0 0a67 	vmov.f32	s1, s15
 800130e:	f00a fcd3 	bl	800bcb8 <floor>
 8001312:	ec53 2b10 	vmov	r2, r3, d0
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fc25 	bl	8000b68 <__aeabi_d2iz>
 800131e:	4603      	mov	r3, r0
 8001320:	613b      	str	r3, [r7, #16]
    	 int n2=floor(log10(atoi4));
 8001322:	4b41      	ldr	r3, [pc, #260]	; (8001428 <HAL_UART_RxCpltCallback+0x178>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f8f4 	bl	8000514 <__aeabi_ui2d>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	ec43 2b10 	vmov	d0, r2, r3
 8001334:	f00a fd40 	bl	800bdb8 <log10>
 8001338:	eeb0 7a40 	vmov.f32	s14, s0
 800133c:	eef0 7a60 	vmov.f32	s15, s1
 8001340:	eeb0 0a47 	vmov.f32	s0, s14
 8001344:	eef0 0a67 	vmov.f32	s1, s15
 8001348:	f00a fcb6 	bl	800bcb8 <floor>
 800134c:	ec53 2b10 	vmov	r2, r3, d0
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fc08 	bl	8000b68 <__aeabi_d2iz>
 8001358:	4603      	mov	r3, r0
 800135a:	60fb      	str	r3, [r7, #12]

    	 UART1_rxBuffer2=(atoi3*pow(10,n+1)+atoi4*pow(10,n2+1)+atoi5);
 800135c:	4b31      	ldr	r3, [pc, #196]	; (8001424 <HAL_UART_RxCpltCallback+0x174>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f8e7 	bl	8000534 <__aeabi_i2d>
 8001366:	4604      	mov	r4, r0
 8001368:	460d      	mov	r5, r1
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	3301      	adds	r3, #1
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f8e0 	bl	8000534 <__aeabi_i2d>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	ec43 2b11 	vmov	d1, r2, r3
 800137c:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8001418 <HAL_UART_RxCpltCallback+0x168>
 8001380:	f00a fd62 	bl	800be48 <pow>
 8001384:	ec53 2b10 	vmov	r2, r3, d0
 8001388:	4620      	mov	r0, r4
 800138a:	4629      	mov	r1, r5
 800138c:	f7ff f93c 	bl	8000608 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4690      	mov	r8, r2
 8001396:	4699      	mov	r9, r3
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <HAL_UART_RxCpltCallback+0x178>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f8c9 	bl	8000534 <__aeabi_i2d>
 80013a2:	4604      	mov	r4, r0
 80013a4:	460d      	mov	r5, r1
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3301      	adds	r3, #1
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f8c2 	bl	8000534 <__aeabi_i2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	ec43 2b11 	vmov	d1, r2, r3
 80013b8:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001418 <HAL_UART_RxCpltCallback+0x168>
 80013bc:	f00a fd44 	bl	800be48 <pow>
 80013c0:	ec53 2b10 	vmov	r2, r3, d0
 80013c4:	4620      	mov	r0, r4
 80013c6:	4629      	mov	r1, r5
 80013c8:	f7ff f91e 	bl	8000608 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4640      	mov	r0, r8
 80013d2:	4649      	mov	r1, r9
 80013d4:	f7fe ff62 	bl	800029c <__adddf3>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4614      	mov	r4, r2
 80013de:	461d      	mov	r5, r3
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f8a6 	bl	8000534 <__aeabi_i2d>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4620      	mov	r0, r4
 80013ee:	4629      	mov	r1, r5
 80013f0:	f7fe ff54 	bl	800029c <__adddf3>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fbdc 	bl	8000bb8 <__aeabi_d2uiz>
 8001400:	4603      	mov	r3, r0
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <HAL_UART_RxCpltCallback+0x180>)
 8001404:	6013      	str	r3, [r2, #0]
		 ConsigneMesure=UART1_rxBuffer2;
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_UART_RxCpltCallback+0x180>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_UART_RxCpltCallback+0x184>)
 800140c:	6013      	str	r3, [r2, #0]

}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001418:	00000000 	.word	0x00000000
 800141c:	40240000 	.word	0x40240000
 8001420:	20000610 	.word	0x20000610
 8001424:	200005c6 	.word	0x200005c6
 8001428:	20000628 	.word	0x20000628
 800142c:	3ff00000 	.word	0x3ff00000
 8001430:	20000614 	.word	0x20000614
 8001434:	20000678 	.word	0x20000678

08001438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b094      	sub	sp, #80	; 0x50
 800143c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143e:	f107 0320 	add.w	r3, r7, #32
 8001442:	2230      	movs	r2, #48	; 0x30
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f00a f806 	bl	800b458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <SystemClock_Config+0xc8>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	4a26      	ldr	r2, [pc, #152]	; (8001500 <SystemClock_Config+0xc8>)
 8001466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146a:	6413      	str	r3, [r2, #64]	; 0x40
 800146c:	4b24      	ldr	r3, [pc, #144]	; (8001500 <SystemClock_Config+0xc8>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <SystemClock_Config+0xcc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a20      	ldr	r2, [pc, #128]	; (8001504 <SystemClock_Config+0xcc>)
 8001482:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <SystemClock_Config+0xcc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001494:	2302      	movs	r3, #2
 8001496:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001498:	2301      	movs	r3, #1
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800149c:	2310      	movs	r3, #16
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a0:	2302      	movs	r3, #2
 80014a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014a4:	2300      	movs	r3, #0
 80014a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014a8:	2308      	movs	r3, #8
 80014aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014ac:	2348      	movs	r3, #72	; 0x48
 80014ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b0:	2302      	movs	r3, #2
 80014b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014b4:	2304      	movs	r3, #4
 80014b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b8:	f107 0320 	add.w	r3, r7, #32
 80014bc:	4618      	mov	r0, r3
 80014be:	f007 fd3b 	bl	8008f38 <HAL_RCC_OscConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014c8:	f000 f99e 	bl	8001808 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014cc:	230f      	movs	r3, #15
 80014ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d0:	2302      	movs	r3, #2
 80014d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	2102      	movs	r1, #2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f007 ff9d 	bl	8009428 <HAL_RCC_ClockConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014f4:	f000 f988 	bl	8001808 <Error_Handler>
  }
}
 80014f8:	bf00      	nop
 80014fa:	3750      	adds	r7, #80	; 0x50
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40023800 	.word	0x40023800
 8001504:	40007000 	.word	0x40007000

08001508 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800150e:	463b      	mov	r3, r7
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <MX_ADC1_Init+0x78>)
 800151c:	4a19      	ldr	r2, [pc, #100]	; (8001584 <MX_ADC1_Init+0x7c>)
 800151e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MX_ADC1_Init+0x78>)
 8001522:	2200      	movs	r2, #0
 8001524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_ADC1_Init+0x78>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_ADC1_Init+0x78>)
 800152e:	2201      	movs	r2, #1
 8001530:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <MX_ADC1_Init+0x78>)
 8001534:	2201      	movs	r2, #1
 8001536:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_ADC1_Init+0x78>)
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_ADC1_Init+0x78>)
 8001542:	2200      	movs	r2, #0
 8001544:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_ADC1_Init+0x78>)
 8001548:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <MX_ADC1_Init+0x80>)
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_ADC1_Init+0x78>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_ADC1_Init+0x78>)
 8001554:	2201      	movs	r2, #1
 8001556:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_ADC1_Init+0x78>)
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_ADC1_Init+0x78>)
 8001562:	2201      	movs	r2, #1
 8001564:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001566:	4806      	ldr	r0, [pc, #24]	; (8001580 <MX_ADC1_Init+0x78>)
 8001568:	f005 fe1c 	bl	80071a4 <HAL_ADC_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001572:	f000 f949 	bl	8001808 <Error_Handler>
  }*/
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200005c8 	.word	0x200005c8
 8001584:	40012000 	.word	0x40012000
 8001588:	0f000001 	.word	0x0f000001

0800158c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_I2C1_Init+0x50>)
 8001592:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <MX_I2C1_Init+0x54>)
 8001594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_I2C1_Init+0x50>)
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_I2C1_Init+0x58>)
 800159a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_I2C1_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_I2C1_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_I2C1_Init+0x50>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <MX_I2C1_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_I2C1_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <MX_I2C1_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_I2C1_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_I2C1_Init+0x50>)
 80015ca:	f006 fd1f 	bl	800800c <HAL_I2C_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015d4:	f000 f918 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000568 	.word	0x20000568
 80015e0:	40005400 	.word	0x40005400
 80015e4:	000186a0 	.word	0x000186a0

080015e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08e      	sub	sp, #56	; 0x38
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	f107 0320 	add.w	r3, r7, #32
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	615a      	str	r2, [r3, #20]
 8001616:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <MX_TIM2_Init+0xe8>)
 800161a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800161e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001620:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <MX_TIM2_Init+0xe8>)
 8001622:	2200      	movs	r2, #0
 8001624:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <MX_TIM2_Init+0xe8>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800162c:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <MX_TIM2_Init+0xe8>)
 800162e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001632:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <MX_TIM2_Init+0xe8>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800163a:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <MX_TIM2_Init+0xe8>)
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001640:	4823      	ldr	r0, [pc, #140]	; (80016d0 <MX_TIM2_Init+0xe8>)
 8001642:	f008 f8ed 	bl	8009820 <HAL_TIM_Base_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800164c:	f000 f8dc 	bl	8001808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800165a:	4619      	mov	r1, r3
 800165c:	481c      	ldr	r0, [pc, #112]	; (80016d0 <MX_TIM2_Init+0xe8>)
 800165e:	f008 faf9 	bl	8009c54 <HAL_TIM_ConfigClockSource>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001668:	f000 f8ce 	bl	8001808 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800166c:	4818      	ldr	r0, [pc, #96]	; (80016d0 <MX_TIM2_Init+0xe8>)
 800166e:	f008 f926 	bl	80098be <HAL_TIM_PWM_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001678:	f000 f8c6 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001684:	f107 0320 	add.w	r3, r7, #32
 8001688:	4619      	mov	r1, r3
 800168a:	4811      	ldr	r0, [pc, #68]	; (80016d0 <MX_TIM2_Init+0xe8>)
 800168c:	f008 fe76 	bl	800a37c <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001696:	f000 f8b7 	bl	8001808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800169a:	2360      	movs	r3, #96	; 0x60
 800169c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2200      	movs	r2, #0
 80016ae:	4619      	mov	r1, r3
 80016b0:	4807      	ldr	r0, [pc, #28]	; (80016d0 <MX_TIM2_Init+0xe8>)
 80016b2:	f008 fa0d 	bl	8009ad0 <HAL_TIM_PWM_ConfigChannel>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80016bc:	f000 f8a4 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <MX_TIM2_Init+0xe8>)
 80016c2:	f000 f97b 	bl	80019bc <HAL_TIM_MspPostInit>

}
 80016c6:	bf00      	nop
 80016c8:	3738      	adds	r7, #56	; 0x38
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000062c 	.word	0x2000062c

080016d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <MX_USART2_UART_Init+0x50>)
 80016dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 800170c:	f008 fea4 	bl	800a458 <HAL_UART_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001716:	f000 f877 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000067c 	.word	0x2000067c
 8001724:	40004400 	.word	0x40004400

08001728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <MX_GPIO_Init+0xd4>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a2d      	ldr	r2, [pc, #180]	; (80017fc <MX_GPIO_Init+0xd4>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <MX_GPIO_Init+0xd4>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b27      	ldr	r3, [pc, #156]	; (80017fc <MX_GPIO_Init+0xd4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a26      	ldr	r2, [pc, #152]	; (80017fc <MX_GPIO_Init+0xd4>)
 8001764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b24      	ldr	r3, [pc, #144]	; (80017fc <MX_GPIO_Init+0xd4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	4b20      	ldr	r3, [pc, #128]	; (80017fc <MX_GPIO_Init+0xd4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a1f      	ldr	r2, [pc, #124]	; (80017fc <MX_GPIO_Init+0xd4>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <MX_GPIO_Init+0xd4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <MX_GPIO_Init+0xd4>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a18      	ldr	r2, [pc, #96]	; (80017fc <MX_GPIO_Init+0xd4>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <MX_GPIO_Init+0xd4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|RESET_VL53_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80017b4:	4812      	ldr	r0, [pc, #72]	; (8001800 <MX_GPIO_Init+0xd8>)
 80017b6:	f006 fc0f 	bl	8007fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	480c      	ldr	r0, [pc, #48]	; (8001804 <MX_GPIO_Init+0xdc>)
 80017d2:	f006 fa7d 	bl	8007cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 RESET_VL53_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|RESET_VL53_Pin;
 80017d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4804      	ldr	r0, [pc, #16]	; (8001800 <MX_GPIO_Init+0xd8>)
 80017f0:	f006 fa6e 	bl	8007cd0 <HAL_GPIO_Init>

}
 80017f4:	bf00      	nop
 80017f6:	3728      	adds	r7, #40	; 0x28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020000 	.word	0x40020000
 8001804:	40020800 	.word	0x40020800

08001808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
}
 800180e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001810:	e7fe      	b.n	8001810 <Error_Handler+0x8>
	...

08001814 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_MspInit+0x4c>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <HAL_MspInit+0x4c>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_MspInit+0x4c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_MspInit+0x4c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_MspInit+0x4c>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_MspInit+0x4c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001852:	2007      	movs	r0, #7
 8001854:	f006 f968 	bl	8007b28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800

08001864 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <HAL_ADC_MspInit+0x7c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d127      	bne.n	80018d6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <HAL_ADC_MspInit+0x80>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	4a15      	ldr	r2, [pc, #84]	; (80018e4 <HAL_ADC_MspInit+0x80>)
 8001890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001894:	6453      	str	r3, [r2, #68]	; 0x44
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <HAL_ADC_MspInit+0x80>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_ADC_MspInit+0x80>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <HAL_ADC_MspInit+0x80>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_ADC_MspInit+0x80>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80018be:	2313      	movs	r3, #19
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c2:	2303      	movs	r3, #3
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <HAL_ADC_MspInit+0x84>)
 80018d2:	f006 f9fd 	bl	8007cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	; 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40012000 	.word	0x40012000
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020000 	.word	0x40020000

080018ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a19      	ldr	r2, [pc, #100]	; (8001970 <HAL_I2C_MspInit+0x84>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d12c      	bne.n	8001968 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <HAL_I2C_MspInit+0x88>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a17      	ldr	r2, [pc, #92]	; (8001974 <HAL_I2C_MspInit+0x88>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_I2C_MspInit+0x88>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800192a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800192e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001930:	2312      	movs	r3, #18
 8001932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800193c:	2304      	movs	r3, #4
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4619      	mov	r1, r3
 8001946:	480c      	ldr	r0, [pc, #48]	; (8001978 <HAL_I2C_MspInit+0x8c>)
 8001948:	f006 f9c2 	bl	8007cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <HAL_I2C_MspInit+0x88>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <HAL_I2C_MspInit+0x88>)
 8001956:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800195a:	6413      	str	r3, [r2, #64]	; 0x40
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_I2C_MspInit+0x88>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001968:	bf00      	nop
 800196a:	3728      	adds	r7, #40	; 0x28
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40005400 	.word	0x40005400
 8001974:	40023800 	.word	0x40023800
 8001978:	40020400 	.word	0x40020400

0800197c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800198c:	d10d      	bne.n	80019aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_TIM_Base_MspInit+0x3c>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <HAL_TIM_Base_MspInit+0x3c>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_TIM_Base_MspInit+0x3c>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800

080019bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019dc:	d11d      	bne.n	8001a1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_TIM_MspPostInit+0x68>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_TIM_MspPostInit+0x68>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_TIM_MspPostInit+0x68>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019fa:	2320      	movs	r3, #32
 80019fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4619      	mov	r1, r3
 8001a14:	4804      	ldr	r0, [pc, #16]	; (8001a28 <HAL_TIM_MspPostInit+0x6c>)
 8001a16:	f006 f95b 	bl	8007cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020000 	.word	0x40020000

08001a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <HAL_UART_MspInit+0x94>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d133      	bne.n	8001ab6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <HAL_UART_MspInit+0x98>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a1b      	ldr	r2, [pc, #108]	; (8001ac4 <HAL_UART_MspInit+0x98>)
 8001a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_UART_MspInit+0x98>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_UART_MspInit+0x98>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <HAL_UART_MspInit+0x98>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_UART_MspInit+0x98>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a86:	230c      	movs	r3, #12
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a96:	2307      	movs	r3, #7
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4809      	ldr	r0, [pc, #36]	; (8001ac8 <HAL_UART_MspInit+0x9c>)
 8001aa2:	f006 f915 	bl	8007cd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2026      	movs	r0, #38	; 0x26
 8001aac:	f006 f847 	bl	8007b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ab0:	2026      	movs	r0, #38	; 0x26
 8001ab2:	f006 f860 	bl	8007b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	; 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40004400 	.word	0x40004400
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020000 	.word	0x40020000

08001acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <NMI_Handler+0x4>

08001ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <MemManage_Handler+0x4>

08001ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <BusFault_Handler+0x4>

08001ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <UsageFault_Handler+0x4>

08001aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b18:	f005 fb00 	bl	800711c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <USART2_IRQHandler+0x10>)
 8001b26:	f008 fda7 	bl	800a678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000067c 	.word	0x2000067c

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b64:	f009 fc40 	bl	800b3e8 <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20020000 	.word	0x20020000
 8001b94:	00000400 	.word	0x00000400
 8001b98:	200004e4 	.word	0x200004e4
 8001b9c:	200007c0 	.word	0x200007c0

08001ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <SystemInit+0x20>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001baa:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <SystemInit+0x20>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc8:	480d      	ldr	r0, [pc, #52]	; (8001c00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bca:	490e      	ldr	r1, [pc, #56]	; (8001c04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bcc:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001be0:	4c0b      	ldr	r4, [pc, #44]	; (8001c10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bee:	f7ff ffd7 	bl	8001ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f009 fbff 	bl	800b3f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf6:	f7ff fa27 	bl	8001048 <main>
  bx  lr    
 8001bfa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	200004c0 	.word	0x200004c0
  ldr r2, =_sidata
 8001c08:	0800d328 	.word	0x0800d328
  ldr r2, =_sbss
 8001c0c:	200004c0 	.word	0x200004c0
  ldr r4, =_ebss
 8001c10:	200007c0 	.word	0x200007c0

08001c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC_IRQHandler>

08001c16 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8001c24:	6839      	ldr	r1, [r7, #0]
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f001 fcbb 	bl	80035a2 <VL53L0X_get_offset_calibration_data_micro_meter>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8001c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	218a      	movs	r1, #138	; 0x8a
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f004 feb4 	bl	80069c4 <VL53L0X_WrByte>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8001c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8001c6c:	b5b0      	push	{r4, r5, r7, lr}
 8001c6e:	b096      	sub	sp, #88	; 0x58
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8001c7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d107      	bne.n	8001c92 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2188      	movs	r1, #136	; 0x88
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f004 fe9c 	bl	80069c4 <VL53L0X_WrByte>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ca0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001caa:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a9e      	ldr	r2, [pc, #632]	; (8001f2c <VL53L0X_DataInit+0x2c0>)
 8001cb2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a9d      	ldr	r2, [pc, #628]	; (8001f30 <VL53L0X_DataInit+0x2c4>)
 8001cba:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001cc4:	f107 0310 	add.w	r3, r7, #16
 8001cc8:	4619      	mov	r1, r3
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fab4 	bl	8002238 <VL53L0X_GetDeviceParameters>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8001cd6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d112      	bne.n	8001d04 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f103 0410 	add.w	r4, r3, #16
 8001cec:	f107 0510 	add.w	r5, r7, #16
 8001cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cfc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2264      	movs	r2, #100	; 0x64
 8001d08:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001d12:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d1c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001d26:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001d32:	2201      	movs	r2, #1
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f004 fe44 	bl	80069c4 <VL53L0X_WrByte>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001d44:	4313      	orrs	r3, r2
 8001d46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	21ff      	movs	r1, #255	; 0xff
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f004 fe38 	bl	80069c4 <VL53L0X_WrByte>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f004 fe2c 	bl	80069c4 <VL53L0X_WrByte>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001d74:	4313      	orrs	r3, r2
 8001d76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8001d7a:	f107 030f 	add.w	r3, r7, #15
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2191      	movs	r1, #145	; 0x91
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f004 fea0 	bl	8006ac8 <VL53L0X_RdByte>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001d90:	4313      	orrs	r3, r2
 8001d92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	2100      	movs	r1, #0
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f004 fe0e 	bl	80069c4 <VL53L0X_WrByte>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
 8001dac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001db0:	4313      	orrs	r3, r2
 8001db2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001db6:	2200      	movs	r2, #0
 8001db8:	21ff      	movs	r1, #255	; 0xff
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f004 fe02 	bl	80069c4 <VL53L0X_WrByte>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2180      	movs	r1, #128	; 0x80
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f004 fdf6 	bl	80069c4 <VL53L0X_WrByte>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001de0:	4313      	orrs	r3, r2
 8001de2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	653b      	str	r3, [r7, #80]	; 0x50
 8001dea:	e014      	b.n	8001e16 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8001dec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d114      	bne.n	8001e1e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8001df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 fd27 	bl	8002850 <VL53L0X_SetLimitCheckEnable>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e12:	3301      	adds	r3, #1
 8001e14:	653b      	str	r3, [r7, #80]	; 0x50
 8001e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	dde7      	ble.n	8001dec <VL53L0X_DataInit+0x180>
 8001e1c:	e000      	b.n	8001e20 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8001e1e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8001e20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fd0f 	bl	8002850 <VL53L0X_SetLimitCheckEnable>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001e38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d107      	bne.n	8001e50 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001e40:	2200      	movs	r2, #0
 8001e42:	2103      	movs	r1, #3
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fd03 	bl	8002850 <VL53L0X_SetLimitCheckEnable>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001e50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d107      	bne.n	8001e68 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 fcf7 	bl	8002850 <VL53L0X_SetLimitCheckEnable>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001e68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d107      	bne.n	8001e80 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001e70:	2200      	movs	r2, #0
 8001e72:	2105      	movs	r1, #5
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fceb 	bl	8002850 <VL53L0X_SetLimitCheckEnable>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8001e80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d108      	bne.n	8001e9a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001e88:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fd8e 	bl	80029b0 <VL53L0X_SetLimitCheckValue>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001e9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d108      	bne.n	8001eb4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001ea2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fd81 	bl	80029b0 <VL53L0X_SetLimitCheckValue>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001eb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d108      	bne.n	8001ece <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001ebc:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fd74 	bl	80029b0 <VL53L0X_SetLimitCheckValue>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001ece:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d107      	bne.n	8001ee6 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2103      	movs	r1, #3
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fd68 	bl	80029b0 <VL53L0X_SetLimitCheckValue>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001ee6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10f      	bne.n	8001f0e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	22ff      	movs	r2, #255	; 0xff
 8001ef2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001ef6:	22ff      	movs	r2, #255	; 0xff
 8001ef8:	2101      	movs	r1, #1
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f004 fd62 	bl	80069c4 <VL53L0X_WrByte>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8001f0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d103      	bne.n	8001f1e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8001f1e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3758      	adds	r7, #88	; 0x58
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bdb0      	pop	{r4, r5, r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	00016b85 	.word	0x00016b85
 8001f30:	000970a4 	.word	0x000970a4

08001f34 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8001f34:	b5b0      	push	{r4, r5, r7, lr}
 8001f36:	b09e      	sub	sp, #120	; 0x78
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	2240      	movs	r2, #64	; 0x40
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f009 fa84 	bl	800b458 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8001f70:	2101      	movs	r1, #1
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f002 fa6b 	bl	800444e <VL53L0X_get_info_from_device>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8001f84:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001f8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8001f90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d80d      	bhi.n	8001fb4 <VL53L0X_StaticInit+0x80>
 8001f98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d102      	bne.n	8001fa6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8001fa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	d806      	bhi.n	8001fb4 <VL53L0X_StaticInit+0x80>
 8001fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10e      	bne.n	8001fcc <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8001fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	d90b      	bls.n	8001fcc <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8001fb4:	f107 0218 	add.w	r2, r7, #24
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f001 fcea 	bl	8003998 <VL53L0X_perform_ref_spad_management>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001fca:	e009      	b.n	8001fe0 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8001fcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f001 feeb 	bl	8003db0 <VL53L0X_set_reference_spads>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8001fe0:	4b94      	ldr	r3, [pc, #592]	; (8002234 <VL53L0X_StaticInit+0x300>)
 8001fe2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8001fe4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10f      	bne.n	800200c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8001ff2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8001ff6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d104      	bne.n	8002008 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002004:	66bb      	str	r3, [r7, #104]	; 0x68
 8002006:	e001      	b.n	800200c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8002008:	4b8a      	ldr	r3, [pc, #552]	; (8002234 <VL53L0X_StaticInit+0x300>)
 800200a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800200c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002010:	2b00      	cmp	r3, #0
 8002012:	d106      	bne.n	8002022 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8002014:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f003 fdbe 	bl	8005b98 <VL53L0X_load_tuning_settings>
 800201c:	4603      	mov	r3, r0
 800201e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8002022:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10a      	bne.n	8002040 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800202a:	2300      	movs	r3, #0
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2304      	movs	r3, #4
 8002030:	2200      	movs	r2, #0
 8002032:	2100      	movs	r1, #0
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f001 f8e3 	bl	8003200 <VL53L0X_SetGpioConfig>
 800203a:	4603      	mov	r3, r0
 800203c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002040:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002044:	2b00      	cmp	r3, #0
 8002046:	d121      	bne.n	800208c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002048:	2201      	movs	r2, #1
 800204a:	21ff      	movs	r1, #255	; 0xff
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f004 fcb9 	bl	80069c4 <VL53L0X_WrByte>
 8002052:	4603      	mov	r3, r0
 8002054:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8002058:	f107 031a 	add.w	r3, r7, #26
 800205c:	461a      	mov	r2, r3
 800205e:	2184      	movs	r1, #132	; 0x84
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f004 fd5b 	bl	8006b1c <VL53L0X_RdWord>
 8002066:	4603      	mov	r3, r0
 8002068:	461a      	mov	r2, r3
 800206a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800206e:	4313      	orrs	r3, r2
 8002070:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002074:	2200      	movs	r2, #0
 8002076:	21ff      	movs	r1, #255	; 0xff
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f004 fca3 	bl	80069c4 <VL53L0X_WrByte>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002086:	4313      	orrs	r3, r2
 8002088:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800208c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002090:	2b00      	cmp	r3, #0
 8002092:	d105      	bne.n	80020a0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8002094:	8b7b      	ldrh	r3, [r7, #26]
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	461a      	mov	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80020a0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d108      	bne.n	80020ba <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80020a8:	f107 031c 	add.w	r3, r7, #28
 80020ac:	4619      	mov	r1, r3
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f8c2 	bl	8002238 <VL53L0X_GetDeviceParameters>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80020ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d110      	bne.n	80020e4 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80020c2:	f107 0319 	add.w	r3, r7, #25
 80020c6:	4619      	mov	r1, r3
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f984 	bl	80023d6 <VL53L0X_GetFractionEnable>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80020d4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d103      	bne.n	80020e4 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80020dc:	7e7a      	ldrb	r2, [r7, #25]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80020e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10e      	bne.n	800210a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f103 0410 	add.w	r4, r3, #16
 80020f2:	f107 051c 	add.w	r5, r7, #28
 80020f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002102:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002106:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800210a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800210e:	2b00      	cmp	r3, #0
 8002110:	d111      	bne.n	8002136 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8002112:	f107 0319 	add.w	r3, r7, #25
 8002116:	461a      	mov	r2, r3
 8002118:	2101      	movs	r1, #1
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f004 fcd4 	bl	8006ac8 <VL53L0X_RdByte>
 8002120:	4603      	mov	r3, r0
 8002122:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8002126:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800212a:	2b00      	cmp	r3, #0
 800212c:	d103      	bne.n	8002136 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800212e:	7e7a      	ldrb	r2, [r7, #25]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8002136:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800213a:	2b00      	cmp	r3, #0
 800213c:	d107      	bne.n	800214e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f9bc 	bl	80024c0 <VL53L0X_SetSequenceStepEnable>
 8002148:	4603      	mov	r3, r0
 800214a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800214e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002152:	2b00      	cmp	r3, #0
 8002154:	d107      	bne.n	8002166 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002156:	2200      	movs	r2, #0
 8002158:	2102      	movs	r1, #2
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f9b0 	bl	80024c0 <VL53L0X_SetSequenceStepEnable>
 8002160:	4603      	mov	r3, r0
 8002162:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8002166:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800216a:	2b00      	cmp	r3, #0
 800216c:	d103      	bne.n	8002176 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2203      	movs	r2, #3
 8002172:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002176:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800217e:	f107 0313 	add.w	r3, r7, #19
 8002182:	461a      	mov	r2, r3
 8002184:	2100      	movs	r1, #0
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f982 	bl	8002490 <VL53L0X_GetVcselPulsePeriod>
 800218c:	4603      	mov	r3, r0
 800218e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002192:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002196:	2b00      	cmp	r3, #0
 8002198:	d103      	bne.n	80021a2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800219a:	7cfa      	ldrb	r2, [r7, #19]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80021a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80021aa:	f107 0313 	add.w	r3, r7, #19
 80021ae:	461a      	mov	r2, r3
 80021b0:	2101      	movs	r1, #1
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f96c 	bl	8002490 <VL53L0X_GetVcselPulsePeriod>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80021be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d103      	bne.n	80021ce <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80021c6:	7cfa      	ldrb	r2, [r7, #19]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80021ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	461a      	mov	r2, r3
 80021dc:	2103      	movs	r1, #3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f002 feb6 	bl	8004f50 <get_sequence_step_timeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80021ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d103      	bne.n	80021fa <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80021fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d109      	bne.n	8002216 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	461a      	mov	r2, r3
 8002208:	2104      	movs	r1, #4
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f002 fea0 	bl	8004f50 <get_sequence_step_timeout>
 8002210:	4603      	mov	r3, r0
 8002212:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002216:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800221a:	2b00      	cmp	r3, #0
 800221c:	d103      	bne.n	8002226 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002226:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800222a:	4618      	mov	r0, r3
 800222c:	3770      	adds	r7, #112	; 0x70
 800222e:	46bd      	mov	sp, r7
 8002230:	bdb0      	pop	{r4, r5, r7, pc}
 8002232:	bf00      	nop
 8002234:	20000004 	.word	0x20000004

08002238 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8b0 	bl	80023b0 <VL53L0X_GetDeviceMode>
 8002250:	4603      	mov	r3, r0
 8002252:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d107      	bne.n	800226c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	3308      	adds	r3, #8
 8002260:	4619      	mov	r1, r3
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fa78 	bl	8002758 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8002268:	4603      	mov	r3, r0
 800226a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800226c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2200      	movs	r2, #0
 8002278:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800227a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d107      	bne.n	8002292 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	3310      	adds	r3, #16
 8002286:	4619      	mov	r1, r3
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 faae 	bl	80027ea <VL53L0X_GetXTalkCompensationRateMegaCps>
 800228e:	4603      	mov	r3, r0
 8002290:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d107      	bne.n	80022aa <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	3314      	adds	r3, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff fcb8 	bl	8001c16 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80022a6:	4603      	mov	r3, r0
 80022a8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d134      	bne.n	800231c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	e02a      	b.n	800230e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80022b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d12a      	bne.n	8002316 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	b299      	uxth	r1, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	3308      	adds	r3, #8
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	3304      	adds	r3, #4
 80022d0:	461a      	mov	r2, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fbce 	bl	8002a74 <VL53L0X_GetLimitCheckValue>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	4313      	orrs	r3, r2
 80022e0:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80022e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d117      	bne.n	800231a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	b299      	uxth	r1, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	3318      	adds	r3, #24
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	4413      	add	r3, r2
 80022f6:	461a      	mov	r2, r3
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fb35 	bl	8002968 <VL53L0X_GetLimitCheckEnable>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	4313      	orrs	r3, r2
 8002306:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	3301      	adds	r3, #1
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b05      	cmp	r3, #5
 8002312:	ddd1      	ble.n	80022b8 <VL53L0X_GetDeviceParameters+0x80>
 8002314:	e002      	b.n	800231c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8002316:	bf00      	nop
 8002318:	e000      	b.n	800231c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800231a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800231c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d107      	bne.n	8002334 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	333c      	adds	r3, #60	; 0x3c
 8002328:	4619      	mov	r1, r3
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fc30 	bl	8002b90 <VL53L0X_GetWrapAroundCheckEnable>
 8002330:	4603      	mov	r3, r0
 8002332:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8002334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	3304      	adds	r3, #4
 8002340:	4619      	mov	r1, r3
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f879 	bl	800243a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8002348:	4603      	mov	r3, r0
 800234a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800234c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002364:	2300      	movs	r3, #0
 8002366:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b15      	cmp	r3, #21
 800236c:	bf8c      	ite	hi
 800236e:	2201      	movhi	r2, #1
 8002370:	2200      	movls	r2, #0
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	2a00      	cmp	r2, #0
 8002376:	d10e      	bne.n	8002396 <VL53L0X_SetDeviceMode+0x3e>
 8002378:	2201      	movs	r2, #1
 800237a:	409a      	lsls	r2, r3
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <VL53L0X_SetDeviceMode+0x54>)
 800237e:	4013      	ands	r3, r2
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf14      	ite	ne
 8002384:	2301      	movne	r3, #1
 8002386:	2300      	moveq	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	741a      	strb	r2, [r3, #16]
		break;
 8002394:	e001      	b.n	800239a <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002396:	23f8      	movs	r3, #248	; 0xf8
 8002398:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800239a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	0030000b 	.word	0x0030000b

080023b0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	7c1a      	ldrb	r2, [r3, #16]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	2109      	movs	r1, #9
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f004 fb6d 	bl	8006ac8 <VL53L0X_RdByte>
 80023ee:	4603      	mov	r3, r0
 80023f0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80023f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	b2da      	uxtb	r2, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002408:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8002422:	6839      	ldr	r1, [r7, #0]
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f003 fa26 	bl	8005876 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800242a:	4603      	mov	r3, r0
 800242c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800242e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8002448:	6839      	ldr	r1, [r7, #0]
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f003 faf3 	bl	8005a36 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8002450:	4603      	mov	r3, r0
 8002452:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8002454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	70fb      	strb	r3, [r7, #3]
 800246c:	4613      	mov	r3, r2
 800246e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002470:	2300      	movs	r3, #0
 8002472:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8002474:	78ba      	ldrb	r2, [r7, #2]
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f002 ff3b 	bl	80052f6 <VL53L0X_set_vcsel_pulse_period>
 8002480:	4603      	mov	r3, r0
 8002482:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8002484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	460b      	mov	r3, r1
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800249e:	2300      	movs	r3, #0
 80024a0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80024a2:	7afb      	ldrb	r3, [r7, #11]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4619      	mov	r1, r3
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f003 f9ad 	bl	8005808 <VL53L0X_get_vcsel_pulse_period>
 80024ae:	4603      	mov	r3, r0
 80024b0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80024b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70fb      	strb	r3, [r7, #3]
 80024cc:	4613      	mov	r3, r2
 80024ce:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80024dc:	f107 030f 	add.w	r3, r7, #15
 80024e0:	461a      	mov	r2, r3
 80024e2:	2101      	movs	r1, #1
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f004 faef 	bl	8006ac8 <VL53L0X_RdByte>
 80024ea:	4603      	mov	r3, r0
 80024ec:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80024f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d15a      	bne.n	80025b0 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80024fa:	78bb      	ldrb	r3, [r7, #2]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d12b      	bne.n	8002558 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	2b04      	cmp	r3, #4
 8002504:	d825      	bhi.n	8002552 <VL53L0X_SetSequenceStepEnable+0x92>
 8002506:	a201      	add	r2, pc, #4	; (adr r2, 800250c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8002508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250c:	08002521 	.word	0x08002521
 8002510:	0800252b 	.word	0x0800252b
 8002514:	08002535 	.word	0x08002535
 8002518:	0800253f 	.word	0x0800253f
 800251c:	08002549 	.word	0x08002549
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8002520:	7dbb      	ldrb	r3, [r7, #22]
 8002522:	f043 0310 	orr.w	r3, r3, #16
 8002526:	75bb      	strb	r3, [r7, #22]
				break;
 8002528:	e043      	b.n	80025b2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800252a:	7dbb      	ldrb	r3, [r7, #22]
 800252c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002530:	75bb      	strb	r3, [r7, #22]
				break;
 8002532:	e03e      	b.n	80025b2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8002534:	7dbb      	ldrb	r3, [r7, #22]
 8002536:	f043 0304 	orr.w	r3, r3, #4
 800253a:	75bb      	strb	r3, [r7, #22]
				break;
 800253c:	e039      	b.n	80025b2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800253e:	7dbb      	ldrb	r3, [r7, #22]
 8002540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002544:	75bb      	strb	r3, [r7, #22]
				break;
 8002546:	e034      	b.n	80025b2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8002548:	7dbb      	ldrb	r3, [r7, #22]
 800254a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800254e:	75bb      	strb	r3, [r7, #22]
				break;
 8002550:	e02f      	b.n	80025b2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002552:	23fc      	movs	r3, #252	; 0xfc
 8002554:	75fb      	strb	r3, [r7, #23]
 8002556:	e02c      	b.n	80025b2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	2b04      	cmp	r3, #4
 800255c:	d825      	bhi.n	80025aa <VL53L0X_SetSequenceStepEnable+0xea>
 800255e:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8002560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002564:	08002579 	.word	0x08002579
 8002568:	08002583 	.word	0x08002583
 800256c:	0800258d 	.word	0x0800258d
 8002570:	08002597 	.word	0x08002597
 8002574:	080025a1 	.word	0x080025a1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8002578:	7dbb      	ldrb	r3, [r7, #22]
 800257a:	f023 0310 	bic.w	r3, r3, #16
 800257e:	75bb      	strb	r3, [r7, #22]
				break;
 8002580:	e017      	b.n	80025b2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8002582:	7dbb      	ldrb	r3, [r7, #22]
 8002584:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002588:	75bb      	strb	r3, [r7, #22]
				break;
 800258a:	e012      	b.n	80025b2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800258c:	7dbb      	ldrb	r3, [r7, #22]
 800258e:	f023 0304 	bic.w	r3, r3, #4
 8002592:	75bb      	strb	r3, [r7, #22]
				break;
 8002594:	e00d      	b.n	80025b2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8002596:	7dbb      	ldrb	r3, [r7, #22]
 8002598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800259c:	75bb      	strb	r3, [r7, #22]
				break;
 800259e:	e008      	b.n	80025b2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80025a0:	7dbb      	ldrb	r3, [r7, #22]
 80025a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025a6:	75bb      	strb	r3, [r7, #22]
				break;
 80025a8:	e003      	b.n	80025b2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80025aa:	23fc      	movs	r3, #252	; 0xfc
 80025ac:	75fb      	strb	r3, [r7, #23]
 80025ae:	e000      	b.n	80025b2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80025b0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	7dba      	ldrb	r2, [r7, #22]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d01e      	beq.n	80025f8 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80025ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d107      	bne.n	80025d2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80025c2:	7dbb      	ldrb	r3, [r7, #22]
 80025c4:	461a      	mov	r2, r3
 80025c6:	2101      	movs	r1, #1
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f004 f9fb 	bl	80069c4 <VL53L0X_WrByte>
 80025ce:	4603      	mov	r3, r0
 80025d0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80025d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d103      	bne.n	80025e2 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	7dba      	ldrb	r2, [r7, #22]
 80025de:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80025e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80025f0:	6939      	ldr	r1, [r7, #16]
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff ff0e 	bl	8002414 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80025f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	460b      	mov	r3, r1
 8002610:	72fb      	strb	r3, [r7, #11]
 8002612:	4613      	mov	r3, r2
 8002614:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002616:	2300      	movs	r3, #0
 8002618:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8002620:	7afb      	ldrb	r3, [r7, #11]
 8002622:	2b04      	cmp	r3, #4
 8002624:	d836      	bhi.n	8002694 <sequence_step_enabled+0x90>
 8002626:	a201      	add	r2, pc, #4	; (adr r2, 800262c <sequence_step_enabled+0x28>)
 8002628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262c:	08002641 	.word	0x08002641
 8002630:	08002653 	.word	0x08002653
 8002634:	08002665 	.word	0x08002665
 8002638:	08002677 	.word	0x08002677
 800263c:	08002689 	.word	0x08002689
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8002640:	7abb      	ldrb	r3, [r7, #10]
 8002642:	111b      	asrs	r3, r3, #4
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	b2da      	uxtb	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	701a      	strb	r2, [r3, #0]
		break;
 8002650:	e022      	b.n	8002698 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8002652:	7abb      	ldrb	r3, [r7, #10]
 8002654:	10db      	asrs	r3, r3, #3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	b2da      	uxtb	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	701a      	strb	r2, [r3, #0]
		break;
 8002662:	e019      	b.n	8002698 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8002664:	7abb      	ldrb	r3, [r7, #10]
 8002666:	109b      	asrs	r3, r3, #2
 8002668:	b2db      	uxtb	r3, r3
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	b2da      	uxtb	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	701a      	strb	r2, [r3, #0]
		break;
 8002674:	e010      	b.n	8002698 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8002676:	7abb      	ldrb	r3, [r7, #10]
 8002678:	119b      	asrs	r3, r3, #6
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	b2da      	uxtb	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	701a      	strb	r2, [r3, #0]
		break;
 8002686:	e007      	b.n	8002698 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8002688:	7abb      	ldrb	r3, [r7, #10]
 800268a:	09db      	lsrs	r3, r3, #7
 800268c:	b2da      	uxtb	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	701a      	strb	r2, [r3, #0]
		break;
 8002692:	e001      	b.n	8002698 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002694:	23fc      	movs	r3, #252	; 0xfc
 8002696:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002698:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800269c:	4618      	mov	r0, r3
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80026ba:	f107 030e 	add.w	r3, r7, #14
 80026be:	461a      	mov	r2, r3
 80026c0:	2101      	movs	r1, #1
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f004 fa00 	bl	8006ac8 <VL53L0X_RdByte>
 80026c8:	4603      	mov	r3, r0
 80026ca:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80026cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d107      	bne.n	80026e4 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80026d4:	7bba      	ldrb	r2, [r7, #14]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2100      	movs	r1, #0
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ff92 	bl	8002604 <sequence_step_enabled>
 80026e0:	4603      	mov	r3, r0
 80026e2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80026e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d108      	bne.n	80026fe <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80026ec:	7bba      	ldrb	r2, [r7, #14]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	3302      	adds	r3, #2
 80026f2:	2101      	movs	r1, #1
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ff85 	bl	8002604 <sequence_step_enabled>
 80026fa:	4603      	mov	r3, r0
 80026fc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80026fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d108      	bne.n	8002718 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8002706:	7bba      	ldrb	r2, [r7, #14]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	2102      	movs	r1, #2
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff ff78 	bl	8002604 <sequence_step_enabled>
 8002714:	4603      	mov	r3, r0
 8002716:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d108      	bne.n	8002732 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8002720:	7bba      	ldrb	r2, [r7, #14]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	3303      	adds	r3, #3
 8002726:	2103      	movs	r1, #3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ff6b 	bl	8002604 <sequence_step_enabled>
 800272e:	4603      	mov	r3, r0
 8002730:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d108      	bne.n	800274c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800273a:	7bba      	ldrb	r2, [r7, #14]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	3304      	adds	r3, #4
 8002740:	2104      	movs	r1, #4
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ff5e 	bl	8002604 <sequence_step_enabled>
 8002748:	4603      	mov	r3, r0
 800274a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800274c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8002766:	f107 030c 	add.w	r3, r7, #12
 800276a:	461a      	mov	r2, r3
 800276c:	21f8      	movs	r1, #248	; 0xf8
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f004 f9d4 	bl	8006b1c <VL53L0X_RdWord>
 8002774:	4603      	mov	r3, r0
 8002776:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8002778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d108      	bne.n	8002792 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8002780:	f107 0308 	add.w	r3, r7, #8
 8002784:	461a      	mov	r2, r3
 8002786:	2104      	movs	r1, #4
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f004 f9ff 	bl	8006b8c <VL53L0X_RdDWord>
 800278e:	4603      	mov	r3, r0
 8002790:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10c      	bne.n	80027b4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800279a:	89bb      	ldrh	r3, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	89ba      	ldrh	r2, [r7, #12]
 80027a4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80027b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	7f1b      	ldrb	r3, [r3, #28]
 80027d2:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	7bba      	ldrb	r2, [r7, #14]
 80027d8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80027da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80027f8:	f107 030e 	add.w	r3, r7, #14
 80027fc:	461a      	mov	r2, r3
 80027fe:	2120      	movs	r1, #32
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f004 f98b 	bl	8006b1c <VL53L0X_RdWord>
 8002806:	4603      	mov	r3, r0
 8002808:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800280a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d118      	bne.n	8002844 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8002812:	89fb      	ldrh	r3, [r7, #14]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d109      	bne.n	800282c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	771a      	strb	r2, [r3, #28]
 800282a:	e00b      	b.n	8002844 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800282c:	89fb      	ldrh	r3, [r7, #14]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002844:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
 800285c:	4613      	mov	r3, r2
 800285e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002860:	2300      	movs	r3, #0
 8002862:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002870:	887b      	ldrh	r3, [r7, #2]
 8002872:	2b05      	cmp	r3, #5
 8002874:	d902      	bls.n	800287c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002876:	23fc      	movs	r3, #252	; 0xfc
 8002878:	75fb      	strb	r3, [r7, #23]
 800287a:	e05b      	b.n	8002934 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800287c:	787b      	ldrb	r3, [r7, #1]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800288a:	2301      	movs	r3, #1
 800288c:	73bb      	strb	r3, [r7, #14]
 800288e:	e00a      	b.n	80028a6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002890:	887b      	ldrh	r3, [r7, #2]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	330c      	adds	r3, #12
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80028a6:	887b      	ldrh	r3, [r7, #2]
 80028a8:	2b05      	cmp	r3, #5
 80028aa:	d841      	bhi.n	8002930 <VL53L0X_SetLimitCheckEnable+0xe0>
 80028ac:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <VL53L0X_SetLimitCheckEnable+0x64>)
 80028ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b2:	bf00      	nop
 80028b4:	080028cd 	.word	0x080028cd
 80028b8:	080028d7 	.word	0x080028d7
 80028bc:	080028ed 	.word	0x080028ed
 80028c0:	080028f7 	.word	0x080028f7
 80028c4:	08002901 	.word	0x08002901
 80028c8:	08002919 	.word	0x08002919

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80028d4:	e02e      	b.n	8002934 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80028da:	b29b      	uxth	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	2144      	movs	r1, #68	; 0x44
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f004 f893 	bl	8006a0c <VL53L0X_WrWord>
 80028e6:	4603      	mov	r3, r0
 80028e8:	75fb      	strb	r3, [r7, #23]

			break;
 80028ea:	e023      	b.n	8002934 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80028f4:	e01e      	b.n	8002934 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80028fe:	e019      	b.n	8002934 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8002900:	7bbb      	ldrb	r3, [r7, #14]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8002906:	7b7b      	ldrb	r3, [r7, #13]
 8002908:	22fe      	movs	r2, #254	; 0xfe
 800290a:	2160      	movs	r1, #96	; 0x60
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f004 f8a7 	bl	8006a60 <VL53L0X_UpdateByte>
 8002912:	4603      	mov	r3, r0
 8002914:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8002916:	e00d      	b.n	8002934 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8002918:	7bbb      	ldrb	r3, [r7, #14]
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800291e:	7b7b      	ldrb	r3, [r7, #13]
 8002920:	22ef      	movs	r2, #239	; 0xef
 8002922:	2160      	movs	r1, #96	; 0x60
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f004 f89b 	bl	8006a60 <VL53L0X_UpdateByte>
 800292a:	4603      	mov	r3, r0
 800292c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800292e:	e001      	b.n	8002934 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002930:	23fc      	movs	r3, #252	; 0xfc
 8002932:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002934:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10f      	bne.n	800295c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800293c:	787b      	ldrb	r3, [r7, #1]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002942:	887b      	ldrh	r3, [r7, #2]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	4413      	add	r3, r2
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800294e:	e005      	b.n	800295c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002950:	887b      	ldrh	r3, [r7, #2]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800295c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	460b      	mov	r3, r1
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800297a:	897b      	ldrh	r3, [r7, #10]
 800297c:	2b05      	cmp	r3, #5
 800297e:	d905      	bls.n	800298c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002980:	23fc      	movs	r3, #252	; 0xfc
 8002982:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e008      	b.n	800299e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800298c:	897b      	ldrh	r3, [r7, #10]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4413      	add	r3, r2
 8002992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002996:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7dba      	ldrb	r2, [r7, #22]
 800299c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800299e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	460b      	mov	r3, r1
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80029be:	2300      	movs	r3, #0
 80029c0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80029c2:	897b      	ldrh	r3, [r7, #10]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4413      	add	r3, r2
 80029c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029cc:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80029ce:	7dbb      	ldrb	r3, [r7, #22]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d107      	bne.n	80029e4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80029d4:	897b      	ldrh	r3, [r7, #10]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	330c      	adds	r3, #12
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	e040      	b.n	8002a66 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80029e4:	897b      	ldrh	r3, [r7, #10]
 80029e6:	2b05      	cmp	r3, #5
 80029e8:	d830      	bhi.n	8002a4c <VL53L0X_SetLimitCheckValue+0x9c>
 80029ea:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <VL53L0X_SetLimitCheckValue+0x40>)
 80029ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f0:	08002a09 	.word	0x08002a09
 80029f4:	08002a11 	.word	0x08002a11
 80029f8:	08002a27 	.word	0x08002a27
 80029fc:	08002a2f 	.word	0x08002a2f
 8002a00:	08002a37 	.word	0x08002a37
 8002a04:	08002a37 	.word	0x08002a37

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8002a0e:	e01f      	b.n	8002a50 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	2144      	movs	r1, #68	; 0x44
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f003 fff6 	bl	8006a0c <VL53L0X_WrWord>
 8002a20:	4603      	mov	r3, r0
 8002a22:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8002a24:	e014      	b.n	8002a50 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8002a2c:	e010      	b.n	8002a50 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8002a34:	e00c      	b.n	8002a50 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2164      	movs	r1, #100	; 0x64
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f003 ffe3 	bl	8006a0c <VL53L0X_WrWord>
 8002a46:	4603      	mov	r3, r0
 8002a48:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8002a4a:	e001      	b.n	8002a50 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002a4c:	23fc      	movs	r3, #252	; 0xfc
 8002a4e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8002a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d106      	bne.n	8002a66 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002a58:	897b      	ldrh	r3, [r7, #10]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	330c      	adds	r3, #12
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002a66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop

08002a74 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8002a8a:	897b      	ldrh	r3, [r7, #10]
 8002a8c:	2b05      	cmp	r3, #5
 8002a8e:	d847      	bhi.n	8002b20 <VL53L0X_GetLimitCheckValue+0xac>
 8002a90:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <VL53L0X_GetLimitCheckValue+0x24>)
 8002a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a96:	bf00      	nop
 8002a98:	08002ab1 	.word	0x08002ab1
 8002a9c:	08002abd 	.word	0x08002abd
 8002aa0:	08002ae3 	.word	0x08002ae3
 8002aa4:	08002aef 	.word	0x08002aef
 8002aa8:	08002afb 	.word	0x08002afb
 8002aac:	08002afb 	.word	0x08002afb

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	77bb      	strb	r3, [r7, #30]
		break;
 8002aba:	e033      	b.n	8002b24 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8002abc:	f107 0316 	add.w	r3, r7, #22
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2144      	movs	r1, #68	; 0x44
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f004 f829 	bl	8006b1c <VL53L0X_RdWord>
 8002aca:	4603      	mov	r3, r0
 8002acc:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8002ace:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d102      	bne.n	8002adc <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002ad6:	8afb      	ldrh	r3, [r7, #22]
 8002ad8:	025b      	lsls	r3, r3, #9
 8002ada:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8002adc:	2301      	movs	r3, #1
 8002ade:	77bb      	strb	r3, [r7, #30]
		break;
 8002ae0:	e020      	b.n	8002b24 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	77bb      	strb	r3, [r7, #30]
		break;
 8002aec:	e01a      	b.n	8002b24 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	77bb      	strb	r3, [r7, #30]
		break;
 8002af8:	e014      	b.n	8002b24 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8002afa:	f107 0316 	add.w	r3, r7, #22
 8002afe:	461a      	mov	r2, r3
 8002b00:	2164      	movs	r1, #100	; 0x64
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f004 f80a 	bl	8006b1c <VL53L0X_RdWord>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8002b0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002b14:	8afb      	ldrh	r3, [r7, #22]
 8002b16:	025b      	lsls	r3, r3, #9
 8002b18:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	77bb      	strb	r3, [r7, #30]
		break;
 8002b1e:	e001      	b.n	8002b24 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002b20:	23fc      	movs	r3, #252	; 0xfc
 8002b22:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002b24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d12a      	bne.n	8002b82 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8002b2c:	7fbb      	ldrb	r3, [r7, #30]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d124      	bne.n	8002b7c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d110      	bne.n	8002b5a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8002b38:	897b      	ldrh	r3, [r7, #10]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002b4c:	897b      	ldrh	r3, [r7, #10]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4413      	add	r3, r2
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002b58:	e013      	b.n	8002b82 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002b60:	897b      	ldrh	r3, [r7, #10]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	330c      	adds	r3, #12
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002b6e:	897b      	ldrh	r3, [r7, #10]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002b7a:	e002      	b.n	8002b82 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002b82:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop

08002b90 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8002b9e:	f107 030e 	add.w	r3, r7, #14
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f003 ff8e 	bl	8006ac8 <VL53L0X_RdByte>
 8002bac:	4603      	mov	r3, r0
 8002bae:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8002bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10e      	bne.n	8002bd6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8002bb8:	7bba      	ldrb	r2, [r7, #14]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8002bc0:	7bbb      	ldrb	r3, [r7, #14]
 8002bc2:	b25b      	sxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	da03      	bge.n	8002bd0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	e002      	b.n	8002bd6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d104      	bne.n	8002be8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8002c00:	f107 030e 	add.w	r3, r7, #14
 8002c04:	4619      	mov	r1, r3
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff fbd2 	bl	80023b0 <VL53L0X_GetDeviceMode>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8002c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002c18:	7bbb      	ldrb	r3, [r7, #14]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d104      	bne.n	8002c28 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f898 	bl	8002d54 <VL53L0X_StartMeasurement>
 8002c24:	4603      	mov	r3, r0
 8002c26:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8002c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d104      	bne.n	8002c3a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f001 fb3f 	bl	80042b4 <VL53L0X_measurement_poll_for_completion>
 8002c36:	4603      	mov	r3, r0
 8002c38:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8002c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002c42:	7bbb      	ldrb	r3, [r7, #14]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d103      	bne.n	8002c50 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8002c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f001 fae1 	bl	800423a <VL53L0X_perform_ref_calibration>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8002c7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c94:	2300      	movs	r3, #0
 8002c96:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8002c9e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8002ca0:	7dbb      	ldrb	r3, [r7, #22]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d005      	beq.n	8002cb2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8002ca6:	7dbb      	ldrb	r3, [r7, #22]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d002      	beq.n	8002cb2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8002cac:	7dbb      	ldrb	r3, [r7, #22]
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d147      	bne.n	8002d42 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002cb2:	f107 030c 	add.w	r3, r7, #12
 8002cb6:	f107 0210 	add.w	r2, r7, #16
 8002cba:	2101      	movs	r1, #1
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fbc3 	bl	8003448 <VL53L0X_GetInterruptThresholds>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002ccc:	d803      	bhi.n	8002cd6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8002cce:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8002cd0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002cd4:	d935      	bls.n	8002d42 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8002cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d131      	bne.n	8002d42 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d006      	beq.n	8002cf2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8002ce4:	491a      	ldr	r1, [pc, #104]	; (8002d50 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f002 ff56 	bl	8005b98 <VL53L0X_load_tuning_settings>
 8002cec:	4603      	mov	r3, r0
 8002cee:	75fb      	strb	r3, [r7, #23]
 8002cf0:	e027      	b.n	8002d42 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	21ff      	movs	r1, #255	; 0xff
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f003 fe64 	bl	80069c4 <VL53L0X_WrByte>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	461a      	mov	r2, r3
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2170      	movs	r1, #112	; 0x70
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f003 fe5a 	bl	80069c4 <VL53L0X_WrByte>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	21ff      	movs	r1, #255	; 0xff
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f003 fe50 	bl	80069c4 <VL53L0X_WrByte>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461a      	mov	r2, r3
 8002d28:	7dfb      	ldrb	r3, [r7, #23]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2180      	movs	r1, #128	; 0x80
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f003 fe46 	bl	80069c4 <VL53L0X_WrByte>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8002d42:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	200000f8 	.word	0x200000f8

08002d54 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8002d64:	f107 030e 	add.w	r3, r7, #14
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff fb20 	bl	80023b0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002d70:	2201      	movs	r2, #1
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f003 fe25 	bl	80069c4 <VL53L0X_WrByte>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002d7e:	2201      	movs	r2, #1
 8002d80:	21ff      	movs	r1, #255	; 0xff
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f003 fe1e 	bl	80069c4 <VL53L0X_WrByte>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2100      	movs	r1, #0
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f003 fe17 	bl	80069c4 <VL53L0X_WrByte>
 8002d96:	4603      	mov	r3, r0
 8002d98:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8002da0:	461a      	mov	r2, r3
 8002da2:	2191      	movs	r1, #145	; 0x91
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f003 fe0d 	bl	80069c4 <VL53L0X_WrByte>
 8002daa:	4603      	mov	r3, r0
 8002dac:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002dae:	2201      	movs	r2, #1
 8002db0:	2100      	movs	r1, #0
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f003 fe06 	bl	80069c4 <VL53L0X_WrByte>
 8002db8:	4603      	mov	r3, r0
 8002dba:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	21ff      	movs	r1, #255	; 0xff
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f003 fdff 	bl	80069c4 <VL53L0X_WrByte>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2180      	movs	r1, #128	; 0x80
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f003 fdf8 	bl	80069c4 <VL53L0X_WrByte>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8002dd8:	7bbb      	ldrb	r3, [r7, #14]
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d054      	beq.n	8002e88 <VL53L0X_StartMeasurement+0x134>
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	dc6c      	bgt.n	8002ebc <VL53L0X_StartMeasurement+0x168>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <VL53L0X_StartMeasurement+0x98>
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d034      	beq.n	8002e54 <VL53L0X_StartMeasurement+0x100>
 8002dea:	e067      	b.n	8002ebc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8002dec:	2201      	movs	r2, #1
 8002dee:	2100      	movs	r1, #0
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f003 fde7 	bl	80069c4 <VL53L0X_WrByte>
 8002df6:	4603      	mov	r3, r0
 8002df8:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8002dfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d15d      	bne.n	8002ec2 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8002e10:	f107 030d 	add.w	r3, r7, #13
 8002e14:	461a      	mov	r2, r3
 8002e16:	2100      	movs	r1, #0
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f003 fe55 	bl	8006ac8 <VL53L0X_RdByte>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	3301      	adds	r3, #1
 8002e26:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8002e28:	7b7a      	ldrb	r2, [r7, #13]
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d107      	bne.n	8002e46 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8002e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002e44:	d3e1      	bcc.n	8002e0a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002e4c:	d339      	bcc.n	8002ec2 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8002e4e:	23f9      	movs	r3, #249	; 0xf9
 8002e50:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8002e52:	e036      	b.n	8002ec2 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8002e54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ff12 	bl	8002c88 <VL53L0X_CheckAndLoadInterruptSettings>
 8002e64:	4603      	mov	r3, r0
 8002e66:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002e68:	2202      	movs	r2, #2
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f003 fda9 	bl	80069c4 <VL53L0X_WrByte>
 8002e72:	4603      	mov	r3, r0
 8002e74:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8002e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d123      	bne.n	8002ec6 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2204      	movs	r2, #4
 8002e82:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8002e86:	e01e      	b.n	8002ec6 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8002e88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d105      	bne.n	8002e9c <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002e90:	2101      	movs	r1, #1
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff fef8 	bl	8002c88 <VL53L0X_CheckAndLoadInterruptSettings>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f003 fd8f 	bl	80069c4 <VL53L0X_WrByte>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8002eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10b      	bne.n	8002eca <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8002eba:	e006      	b.n	8002eca <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002ebc:	23f8      	movs	r3, #248	; 0xf8
 8002ebe:	75fb      	strb	r3, [r7, #23]
 8002ec0:	e004      	b.n	8002ecc <VL53L0X_StartMeasurement+0x178>
		break;
 8002ec2:	bf00      	nop
 8002ec4:	e002      	b.n	8002ecc <VL53L0X_StartMeasurement+0x178>
		break;
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <VL53L0X_StartMeasurement+0x178>
		break;
 8002eca:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8002ecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8002eec:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8002eee:	7bbb      	ldrb	r3, [r7, #14]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d112      	bne.n	8002f1a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8002ef4:	f107 0308 	add.w	r3, r7, #8
 8002ef8:	4619      	mov	r1, r3
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fb1a 	bl	8003534 <VL53L0X_GetInterruptMaskStatus>
 8002f00:	4603      	mov	r3, r0
 8002f02:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d103      	bne.n	8002f12 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e01c      	b.n	8002f4c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
 8002f18:	e018      	b.n	8002f4c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8002f1a:	f107 030d 	add.w	r3, r7, #13
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2114      	movs	r1, #20
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f003 fdd0 	bl	8006ac8 <VL53L0X_RdByte>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8002f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10b      	bne.n	8002f4c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8002f34:	7b7b      	ldrb	r3, [r7, #13]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
 8002f44:	e002      	b.n	8002f4c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8002f58:	b5b0      	push	{r4, r5, r7, lr}
 8002f5a:	b096      	sub	sp, #88	; 0x58
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8002f68:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f6c:	230c      	movs	r3, #12
 8002f6e:	2114      	movs	r1, #20
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f003 fcfb 	bl	800696c <VL53L0X_ReadMulti>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8002f7c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f040 80d1 	bne.w	8003128 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8002f92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	021b      	lsls	r3, r3, #8
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2200      	movs	r2, #0
 8002fac:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8002fae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	025b      	lsls	r3, r3, #9
 8002fc4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fca:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8002fcc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8002fe2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002fe6:	025b      	lsls	r3, r3, #9
 8002fe8:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8002fee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800300a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800300c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003010:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800301a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8003022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8003026:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800302c:	d046      	beq.n	80030bc <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800302e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003030:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003034:	fb02 f303 	mul.w	r3, r2, r3
 8003038:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800303c:	4a57      	ldr	r2, [pc, #348]	; (800319c <VL53L0X_GetRangingMeasurementData+0x244>)
 800303e:	fb82 1203 	smull	r1, r2, r2, r3
 8003042:	1192      	asrs	r2, r2, #6
 8003044:	17db      	asrs	r3, r3, #31
 8003046:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8003048:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	7f1b      	ldrb	r3, [r3, #28]
 8003056:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800305a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800305e:	2b00      	cmp	r3, #0
 8003060:	d02c      	beq.n	80030bc <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8003062:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003064:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003068:	fb02 f303 	mul.w	r3, r2, r3
 800306c:	121a      	asrs	r2, r3, #8
					<= 0) {
 800306e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8003070:	429a      	cmp	r2, r3
 8003072:	d10d      	bne.n	8003090 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8003074:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003078:	2b00      	cmp	r3, #0
 800307a:	d004      	beq.n	8003086 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800307c:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8003080:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003084:	e016      	b.n	80030b4 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8003086:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800308a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800308e:	e011      	b.n	80030b4 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8003090:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003094:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003096:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800309a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800309c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80030a4:	121b      	asrs	r3, r3, #8
 80030a6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80030a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030aa:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80030ac:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80030b0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80030b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80030b8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80030bc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80030c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80030c8:	089b      	lsrs	r3, r3, #2
 80030ca:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80030d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	019b      	lsls	r3, r3, #6
 80030d8:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	75da      	strb	r2, [r3, #23]
 80030de:	e006      	b.n	80030ee <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80030e6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2200      	movs	r2, #0
 80030ec:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80030ee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80030f2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80030f6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80030fa:	9301      	str	r3, [sp, #4]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f003 f9e5 	bl	80064d4 <VL53L0X_get_pal_range_status>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003112:	4313      	orrs	r3, r2
 8003114:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8003118:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800311c:	2b00      	cmp	r3, #0
 800311e:	d103      	bne.n	8003128 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8003120:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003128:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800312c:	2b00      	cmp	r3, #0
 800312e:	d12f      	bne.n	8003190 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f107 040c 	add.w	r4, r7, #12
 8003136:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800313a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800313c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800313e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003142:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800314a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8003150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8003158:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800315e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8003164:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800316a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8003170:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8003176:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8003180:	f107 050c 	add.w	r5, r7, #12
 8003184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003188:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800318c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003190:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8003194:	4618      	mov	r0, r3
 8003196:	3750      	adds	r7, #80	; 0x50
 8003198:	46bd      	mov	sp, r7
 800319a:	bdb0      	pop	{r4, r5, r7, pc}
 800319c:	10624dd3 	.word	0x10624dd3

080031a0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80031ae:	2100      	movs	r1, #0
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff f8d1 	bl	8002358 <VL53L0X_SetDeviceMode>
 80031b6:	4603      	mov	r3, r0
 80031b8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80031ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff fd16 	bl	8002bf4 <VL53L0X_PerformSingleMeasurement>
 80031c8:	4603      	mov	r3, r0
 80031ca:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80031cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80031d4:	6839      	ldr	r1, [r7, #0]
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff febe 	bl	8002f58 <VL53L0X_GetRangingMeasurementData>
 80031dc:	4603      	mov	r3, r0
 80031de:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80031e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d105      	bne.n	80031f4 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80031e8:	2100      	movs	r1, #0
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f962 	bl	80034b4 <VL53L0X_ClearInterruptMask>
 80031f0:	4603      	mov	r3, r0
 80031f2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80031f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	4608      	mov	r0, r1
 800320a:	4611      	mov	r1, r2
 800320c:	461a      	mov	r2, r3
 800320e:	4603      	mov	r3, r0
 8003210:	70fb      	strb	r3, [r7, #3]
 8003212:	460b      	mov	r3, r1
 8003214:	70bb      	strb	r3, [r7, #2]
 8003216:	4613      	mov	r3, r2
 8003218:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800321a:	2300      	movs	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8003224:	23f6      	movs	r3, #246	; 0xf6
 8003226:	73fb      	strb	r3, [r7, #15]
 8003228:	e107      	b.n	800343a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800322a:	78bb      	ldrb	r3, [r7, #2]
 800322c:	2b14      	cmp	r3, #20
 800322e:	d110      	bne.n	8003252 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8003230:	7e3b      	ldrb	r3, [r7, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8003236:	2310      	movs	r3, #16
 8003238:	73bb      	strb	r3, [r7, #14]
 800323a:	e001      	b.n	8003240 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800323c:	2301      	movs	r3, #1
 800323e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8003240:	7bbb      	ldrb	r3, [r7, #14]
 8003242:	461a      	mov	r2, r3
 8003244:	2184      	movs	r1, #132	; 0x84
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f003 fbbc 	bl	80069c4 <VL53L0X_WrByte>
 800324c:	4603      	mov	r3, r0
 800324e:	73fb      	strb	r3, [r7, #15]
 8003250:	e0f3      	b.n	800343a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8003252:	78bb      	ldrb	r3, [r7, #2]
 8003254:	2b15      	cmp	r3, #21
 8003256:	f040 8097 	bne.w	8003388 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800325a:	2201      	movs	r2, #1
 800325c:	21ff      	movs	r1, #255	; 0xff
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f003 fbb0 	bl	80069c4 <VL53L0X_WrByte>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	4313      	orrs	r3, r2
 800326c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800326e:	2200      	movs	r2, #0
 8003270:	2100      	movs	r1, #0
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f003 fba6 	bl	80069c4 <VL53L0X_WrByte>
 8003278:	4603      	mov	r3, r0
 800327a:	461a      	mov	r2, r3
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	4313      	orrs	r3, r2
 8003280:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003282:	2200      	movs	r2, #0
 8003284:	21ff      	movs	r1, #255	; 0xff
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f003 fb9c 	bl	80069c4 <VL53L0X_WrByte>
 800328c:	4603      	mov	r3, r0
 800328e:	461a      	mov	r2, r3
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	4313      	orrs	r3, r2
 8003294:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003296:	2201      	movs	r2, #1
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f003 fb92 	bl	80069c4 <VL53L0X_WrByte>
 80032a0:	4603      	mov	r3, r0
 80032a2:	461a      	mov	r2, r3
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80032aa:	2202      	movs	r2, #2
 80032ac:	2185      	movs	r1, #133	; 0x85
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f003 fb88 	bl	80069c4 <VL53L0X_WrByte>
 80032b4:	4603      	mov	r3, r0
 80032b6:	461a      	mov	r2, r3
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80032be:	2204      	movs	r2, #4
 80032c0:	21ff      	movs	r1, #255	; 0xff
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f003 fb7e 	bl	80069c4 <VL53L0X_WrByte>
 80032c8:	4603      	mov	r3, r0
 80032ca:	461a      	mov	r2, r3
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80032d2:	2200      	movs	r2, #0
 80032d4:	21cd      	movs	r1, #205	; 0xcd
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f003 fb74 	bl	80069c4 <VL53L0X_WrByte>
 80032dc:	4603      	mov	r3, r0
 80032de:	461a      	mov	r2, r3
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80032e6:	2211      	movs	r2, #17
 80032e8:	21cc      	movs	r1, #204	; 0xcc
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f003 fb6a 	bl	80069c4 <VL53L0X_WrByte>
 80032f0:	4603      	mov	r3, r0
 80032f2:	461a      	mov	r2, r3
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80032fa:	2207      	movs	r2, #7
 80032fc:	21ff      	movs	r1, #255	; 0xff
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f003 fb60 	bl	80069c4 <VL53L0X_WrByte>
 8003304:	4603      	mov	r3, r0
 8003306:	461a      	mov	r2, r3
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	4313      	orrs	r3, r2
 800330c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800330e:	2200      	movs	r2, #0
 8003310:	21be      	movs	r1, #190	; 0xbe
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f003 fb56 	bl	80069c4 <VL53L0X_WrByte>
 8003318:	4603      	mov	r3, r0
 800331a:	461a      	mov	r2, r3
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	4313      	orrs	r3, r2
 8003320:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8003322:	2206      	movs	r2, #6
 8003324:	21ff      	movs	r1, #255	; 0xff
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f003 fb4c 	bl	80069c4 <VL53L0X_WrByte>
 800332c:	4603      	mov	r3, r0
 800332e:	461a      	mov	r2, r3
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	4313      	orrs	r3, r2
 8003334:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8003336:	2209      	movs	r2, #9
 8003338:	21cc      	movs	r1, #204	; 0xcc
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f003 fb42 	bl	80069c4 <VL53L0X_WrByte>
 8003340:	4603      	mov	r3, r0
 8003342:	461a      	mov	r2, r3
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	4313      	orrs	r3, r2
 8003348:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800334a:	2200      	movs	r2, #0
 800334c:	21ff      	movs	r1, #255	; 0xff
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f003 fb38 	bl	80069c4 <VL53L0X_WrByte>
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	4313      	orrs	r3, r2
 800335c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800335e:	2201      	movs	r2, #1
 8003360:	21ff      	movs	r1, #255	; 0xff
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f003 fb2e 	bl	80069c4 <VL53L0X_WrByte>
 8003368:	4603      	mov	r3, r0
 800336a:	461a      	mov	r2, r3
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	4313      	orrs	r3, r2
 8003370:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003372:	2200      	movs	r2, #0
 8003374:	2100      	movs	r1, #0
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f003 fb24 	bl	80069c4 <VL53L0X_WrByte>
 800337c:	4603      	mov	r3, r0
 800337e:	461a      	mov	r2, r3
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	4313      	orrs	r3, r2
 8003384:	73fb      	strb	r3, [r7, #15]
 8003386:	e058      	b.n	800343a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8003388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d121      	bne.n	80033d4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8003390:	787b      	ldrb	r3, [r7, #1]
 8003392:	2b04      	cmp	r3, #4
 8003394:	d81b      	bhi.n	80033ce <VL53L0X_SetGpioConfig+0x1ce>
 8003396:	a201      	add	r2, pc, #4	; (adr r2, 800339c <VL53L0X_SetGpioConfig+0x19c>)
 8003398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339c:	080033b1 	.word	0x080033b1
 80033a0:	080033b7 	.word	0x080033b7
 80033a4:	080033bd 	.word	0x080033bd
 80033a8:	080033c3 	.word	0x080033c3
 80033ac:	080033c9 	.word	0x080033c9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80033b0:	2300      	movs	r3, #0
 80033b2:	73bb      	strb	r3, [r7, #14]
				break;
 80033b4:	e00f      	b.n	80033d6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73bb      	strb	r3, [r7, #14]
				break;
 80033ba:	e00c      	b.n	80033d6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80033bc:	2302      	movs	r3, #2
 80033be:	73bb      	strb	r3, [r7, #14]
				break;
 80033c0:	e009      	b.n	80033d6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80033c2:	2303      	movs	r3, #3
 80033c4:	73bb      	strb	r3, [r7, #14]
				break;
 80033c6:	e006      	b.n	80033d6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80033c8:	2304      	movs	r3, #4
 80033ca:	73bb      	strb	r3, [r7, #14]
				break;
 80033cc:	e003      	b.n	80033d6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80033ce:	23f5      	movs	r3, #245	; 0xf5
 80033d0:	73fb      	strb	r3, [r7, #15]
 80033d2:	e000      	b.n	80033d6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80033d4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80033d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d107      	bne.n	80033ee <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80033de:	7bbb      	ldrb	r3, [r7, #14]
 80033e0:	461a      	mov	r2, r3
 80033e2:	210a      	movs	r1, #10
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f003 faed 	bl	80069c4 <VL53L0X_WrByte>
 80033ea:	4603      	mov	r3, r0
 80033ec:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80033ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10f      	bne.n	8003416 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80033f6:	7e3b      	ldrb	r3, [r7, #24]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d102      	bne.n	8003402 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73bb      	strb	r3, [r7, #14]
 8003400:	e001      	b.n	8003406 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8003402:	2310      	movs	r3, #16
 8003404:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8003406:	7bbb      	ldrb	r3, [r7, #14]
 8003408:	22ef      	movs	r2, #239	; 0xef
 800340a:	2184      	movs	r1, #132	; 0x84
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f003 fb27 	bl	8006a60 <VL53L0X_UpdateByte>
 8003412:	4603      	mov	r3, r0
 8003414:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8003416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d103      	bne.n	8003426 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	787a      	ldrb	r2, [r7, #1]
 8003422:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8003426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d105      	bne.n	800343a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800342e:	2100      	movs	r1, #0
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f83f 	bl	80034b4 <VL53L0X_ClearInterruptMask>
 8003436:	4603      	mov	r3, r0
 8003438:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800343a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop

08003448 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	607a      	str	r2, [r7, #4]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	460b      	mov	r3, r1
 8003456:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003458:	2300      	movs	r3, #0
 800345a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800345c:	f107 0314 	add.w	r3, r7, #20
 8003460:	461a      	mov	r2, r3
 8003462:	210e      	movs	r1, #14
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f003 fb59 	bl	8006b1c <VL53L0X_RdWord>
 800346a:	4603      	mov	r3, r0
 800346c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800346e:	8abb      	ldrh	r3, [r7, #20]
 8003470:	045b      	lsls	r3, r3, #17
 8003472:	461a      	mov	r2, r3
 8003474:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <VL53L0X_GetInterruptThresholds+0x68>)
 8003476:	4013      	ands	r3, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800347c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10f      	bne.n	80034a4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	461a      	mov	r2, r3
 800348a:	210c      	movs	r1, #12
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f003 fb45 	bl	8006b1c <VL53L0X_RdWord>
 8003492:	4603      	mov	r3, r0
 8003494:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8003496:	8abb      	ldrh	r3, [r7, #20]
 8003498:	045b      	lsls	r3, r3, #17
 800349a:	461a      	mov	r2, r3
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <VL53L0X_GetInterruptThresholds+0x68>)
 800349e:	4013      	ands	r3, r2
		*pThresholdHigh =
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80034a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	1ffe0000 	.word	0x1ffe0000

080034b4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034be:	2300      	movs	r3, #0
 80034c0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80034c6:	2201      	movs	r2, #1
 80034c8:	210b      	movs	r1, #11
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f003 fa7a 	bl	80069c4 <VL53L0X_WrByte>
 80034d0:	4603      	mov	r3, r0
 80034d2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80034d4:	2200      	movs	r2, #0
 80034d6:	210b      	movs	r1, #11
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f003 fa73 	bl	80069c4 <VL53L0X_WrByte>
 80034de:	4603      	mov	r3, r0
 80034e0:	461a      	mov	r2, r3
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80034e8:	f107 030d 	add.w	r3, r7, #13
 80034ec:	461a      	mov	r2, r3
 80034ee:	2113      	movs	r1, #19
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f003 fae9 	bl	8006ac8 <VL53L0X_RdByte>
 80034f6:	4603      	mov	r3, r0
 80034f8:	461a      	mov	r2, r3
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8003500:	7bbb      	ldrb	r3, [r7, #14]
 8003502:	3301      	adds	r3, #1
 8003504:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8003506:	7b7b      	ldrb	r3, [r7, #13]
 8003508:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800350c:	2b00      	cmp	r3, #0
 800350e:	d006      	beq.n	800351e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8003510:	7bbb      	ldrb	r3, [r7, #14]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d803      	bhi.n	800351e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8003516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0d3      	beq.n	80034c6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800351e:	7bbb      	ldrb	r3, [r7, #14]
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8003524:	23f4      	movs	r3, #244	; 0xf4
 8003526:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8003528:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800353e:	2300      	movs	r3, #0
 8003540:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8003542:	f107 030e 	add.w	r3, r7, #14
 8003546:	461a      	mov	r2, r3
 8003548:	2113      	movs	r1, #19
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f003 fabc 	bl	8006ac8 <VL53L0X_RdByte>
 8003550:	4603      	mov	r3, r0
 8003552:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8003554:	7bbb      	ldrb	r3, [r7, #14]
 8003556:	f003 0207 	and.w	r2, r3, #7
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800355e:	7bbb      	ldrb	r3, [r7, #14]
 8003560:	f003 0318 	and.w	r3, r3, #24
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8003568:	23fa      	movs	r3, #250	; 0xfa
 800356a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800356c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003584:	2300      	movs	r3, #0
 8003586:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 fa03 	bl	8003998 <VL53L0X_perform_ref_spad_management>
 8003592:	4603      	mov	r3, r0
 8003594:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8003596:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035ac:	2300      	movs	r3, #0
 80035ae:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80035b0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80035b4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80035b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ba:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80035bc:	f107 0308 	add.w	r3, r7, #8
 80035c0:	461a      	mov	r2, r3
 80035c2:	2128      	movs	r1, #40	; 0x28
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f003 faa9 	bl	8006b1c <VL53L0X_RdWord>
 80035ca:	4603      	mov	r3, r0
 80035cc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80035ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d11e      	bne.n	8003614 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80035d6:	893b      	ldrh	r3, [r7, #8]
 80035d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035dc:	b29b      	uxth	r3, r3
 80035de:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80035e0:	893b      	ldrh	r3, [r7, #8]
 80035e2:	461a      	mov	r2, r3
 80035e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	dd0b      	ble.n	8003604 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80035ec:	893a      	ldrh	r2, [r7, #8]
 80035ee:	897b      	ldrh	r3, [r7, #10]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	b21b      	sxth	r3, r3
 80035f6:	461a      	mov	r2, r3
					* 250;
 80035f8:	23fa      	movs	r3, #250	; 0xfa
 80035fa:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	e007      	b.n	8003614 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8003604:	893b      	ldrh	r3, [r7, #8]
 8003606:	b21b      	sxth	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	23fa      	movs	r3, #250	; 0xfa
 800360c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8003614:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8003620:	b480      	push	{r7}
 8003622:	b08b      	sub	sp, #44	; 0x2c
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800362e:	2308      	movs	r3, #8
 8003630:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	f04f 32ff 	mov.w	r2, #4294967295
 800363c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	fbb2 f3f3 	udiv	r3, r2, r3
 8003646:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003650:	69b9      	ldr	r1, [r7, #24]
 8003652:	fb01 f202 	mul.w	r2, r1, r2
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	e030      	b.n	80036c2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	4413      	add	r3, r2
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800366e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	429a      	cmp	r2, r3
 8003674:	d11e      	bne.n	80036b4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8003676:	7ffa      	ldrb	r2, [r7, #31]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	fa42 f303 	asr.w	r3, r2, r3
 800367e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8003684:	e016      	b.n	80036b4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8003686:	7ffb      	ldrb	r3, [r7, #31]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <get_next_good_spad+0x88>
				success = 1;
 8003690:	2301      	movs	r3, #1
 8003692:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	fb02 f203 	mul.w	r2, r2, r3
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	4413      	add	r3, r2
 80036a0:	461a      	mov	r2, r3
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	601a      	str	r2, [r3, #0]
				break;
 80036a6:	e009      	b.n	80036bc <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80036a8:	7ffb      	ldrb	r3, [r7, #31]
 80036aa:	085b      	lsrs	r3, r3, #1
 80036ac:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	3301      	adds	r3, #1
 80036b2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80036b4:	6a3a      	ldr	r2, [r7, #32]
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d3e4      	bcc.n	8003686 <get_next_good_spad+0x66>
				coarseIndex++) {
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	3301      	adds	r3, #1
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80036c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d202      	bcs.n	80036d0 <get_next_good_spad+0xb0>
 80036ca:	7fbb      	ldrb	r3, [r7, #30]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0c7      	beq.n	8003660 <get_next_good_spad+0x40>
		}
	}
}
 80036d0:	bf00      	nop
 80036d2:	372c      	adds	r7, #44	; 0x2c
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	099b      	lsrs	r3, r3, #6
 80036ec:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80036ee:	4a07      	ldr	r2, [pc, #28]	; (800370c <is_aperture+0x30>)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <is_aperture+0x22>
		isAperture = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	200002b0 	.word	0x200002b0

08003710 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8003710:	b480      	push	{r7}
 8003712:	b089      	sub	sp, #36	; 0x24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800371c:	2300      	movs	r3, #0
 800371e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8003720:	2308      	movs	r3, #8
 8003722:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	fbb3 f2f2 	udiv	r2, r3, r2
 8003736:	69b9      	ldr	r1, [r7, #24]
 8003738:	fb01 f202 	mul.w	r2, r1, r2
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	429a      	cmp	r2, r3
 8003746:	d302      	bcc.n	800374e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003748:	23ce      	movs	r3, #206	; 0xce
 800374a:	77fb      	strb	r3, [r7, #31]
 800374c:	e010      	b.n	8003770 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	4413      	add	r3, r2
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	b25a      	sxtb	r2, r3
 8003758:	2101      	movs	r1, #1
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	b25b      	sxtb	r3, r3
 8003762:	4313      	orrs	r3, r2
 8003764:	b259      	sxtb	r1, r3
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	4413      	add	r3, r2
 800376c:	b2ca      	uxtb	r2, r1
 800376e:	701a      	strb	r2, [r3, #0]

	return status;
 8003770:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3724      	adds	r7, #36	; 0x24
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800378a:	2306      	movs	r3, #6
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	21b0      	movs	r1, #176	; 0xb0
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f003 f8bb 	bl	800690c <VL53L0X_WriteMulti>
 8003796:	4603      	mov	r3, r0
 8003798:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800379a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80037b0:	2306      	movs	r3, #6
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	21b0      	movs	r1, #176	; 0xb0
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f003 f8d8 	bl	800696c <VL53L0X_ReadMulti>
 80037bc:	4603      	mov	r3, r0
 80037be:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80037c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08c      	sub	sp, #48	; 0x30
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	460b      	mov	r3, r1
 80037da:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80037dc:	2300      	movs	r3, #0
 80037de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80037e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e4:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80037e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80037ea:	2300      	movs	r3, #0
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ee:	e02b      	b.n	8003848 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80037f0:	f107 031c 	add.w	r3, r7, #28
 80037f4:	6a3a      	ldr	r2, [r7, #32]
 80037f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ff11 	bl	8003620 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d103      	bne.n	800380e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003806:	23ce      	movs	r3, #206	; 0xce
 8003808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800380c:	e020      	b.n	8003850 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	461a      	mov	r2, r3
 8003812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003814:	4413      	add	r3, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff ff60 	bl	80036dc <is_aperture>
 800381c:	4603      	mov	r3, r0
 800381e:	461a      	mov	r2, r3
 8003820:	7afb      	ldrb	r3, [r7, #11]
 8003822:	4293      	cmp	r3, r2
 8003824:	d003      	beq.n	800382e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003826:	23ce      	movs	r3, #206	; 0xce
 8003828:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800382c:	e010      	b.n	8003850 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8003832:	6a3a      	ldr	r2, [r7, #32]
 8003834:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003836:	6838      	ldr	r0, [r7, #0]
 8003838:	f7ff ff6a 	bl	8003710 <enable_spad_bit>
		currentSpad++;
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	3301      	adds	r3, #1
 8003840:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	3301      	adds	r3, #1
 8003846:	62bb      	str	r3, [r7, #40]	; 0x28
 8003848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800384a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800384c:	429a      	cmp	r2, r3
 800384e:	d3cf      	bcc.n	80037f0 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8003850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003852:	6a3a      	ldr	r2, [r7, #32]
 8003854:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8003856:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800385e:	6839      	ldr	r1, [r7, #0]
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f7ff ff8d 	bl	8003780 <set_ref_spad_map>
 8003866:	4603      	mov	r3, r0
 8003868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800386c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003870:	2b00      	cmp	r3, #0
 8003872:	d121      	bne.n	80038b8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8003874:	f107 0314 	add.w	r3, r7, #20
 8003878:	4619      	mov	r1, r3
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff ff93 	bl	80037a6 <get_ref_spad_map>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800388a:	e011      	b.n	80038b0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	4413      	add	r3, r2
 8003892:	781a      	ldrb	r2, [r3, #0]
 8003894:	f107 0114 	add.w	r1, r7, #20
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	440b      	add	r3, r1
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d003      	beq.n	80038aa <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80038a2:	23ce      	movs	r3, #206	; 0xce
 80038a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80038a8:	e006      	b.n	80038b8 <enable_ref_spads+0xec>
			}
			i++;
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	3301      	adds	r3, #1
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80038b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d3e9      	bcc.n	800388c <enable_ref_spads+0xc0>
		}
	}
	return status;
 80038b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3730      	adds	r7, #48	; 0x30
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	; 0x28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80038e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80038e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d107      	bne.n	80038fc <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80038ec:	22c0      	movs	r2, #192	; 0xc0
 80038ee:	2101      	movs	r1, #1
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f003 f867 	bl	80069c4 <VL53L0X_WrByte>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80038fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003900:	2b00      	cmp	r3, #0
 8003902:	d108      	bne.n	8003916 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8003904:	f107 0308 	add.w	r3, r7, #8
 8003908:	4619      	mov	r1, r3
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff fc48 	bl	80031a0 <VL53L0X_PerformSingleRangingMeasurement>
 8003910:	4603      	mov	r3, r0
 8003912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8003916:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800391a:	2b00      	cmp	r3, #0
 800391c:	d107      	bne.n	800392e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800391e:	2201      	movs	r2, #1
 8003920:	21ff      	movs	r1, #255	; 0xff
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f003 f84e 	bl	80069c4 <VL53L0X_WrByte>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800392e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003932:	2b00      	cmp	r3, #0
 8003934:	d107      	bne.n	8003946 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	21b6      	movs	r1, #182	; 0xb6
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f003 f8ee 	bl	8006b1c <VL53L0X_RdWord>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8003946:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800394a:	2b00      	cmp	r3, #0
 800394c:	d107      	bne.n	800395e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800394e:	2200      	movs	r2, #0
 8003950:	21ff      	movs	r1, #255	; 0xff
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f003 f836 	bl	80069c4 <VL53L0X_WrByte>
 8003958:	4603      	mov	r3, r0
 800395a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800395e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003962:	2b00      	cmp	r3, #0
 8003964:	d112      	bne.n	800398c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003966:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800396a:	461a      	mov	r2, r3
 800396c:	2101      	movs	r1, #1
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f003 f828 	bl	80069c4 <VL53L0X_WrByte>
 8003974:	4603      	mov	r3, r0
 8003976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800397a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800397e:	2b00      	cmp	r3, #0
 8003980:	d104      	bne.n	800398c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003988:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800398c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003990:	4618      	mov	r0, r3
 8003992:	3728      	adds	r7, #40	; 0x28
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b09d      	sub	sp, #116	; 0x74
 800399c:	af06      	add	r7, sp, #24
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80039aa:	23b4      	movs	r3, #180	; 0xb4
 80039ac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80039b0:	2303      	movs	r3, #3
 80039b2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80039b4:	232c      	movs	r3, #44	; 0x2c
 80039b6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80039c4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80039c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80039d2:	2306      	movs	r3, #6
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80039fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a02:	e009      	b.n	8003a18 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8003a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a14:	3301      	adds	r3, #1
 8003a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d3f1      	bcc.n	8003a04 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003a20:	2201      	movs	r2, #1
 8003a22:	21ff      	movs	r1, #255	; 0xff
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f002 ffcd 	bl	80069c4 <VL53L0X_WrByte>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003a30:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d107      	bne.n	8003a48 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8003a38:	2200      	movs	r2, #0
 8003a3a:	214f      	movs	r1, #79	; 0x4f
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f002 ffc1 	bl	80069c4 <VL53L0X_WrByte>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003a48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d107      	bne.n	8003a60 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8003a50:	222c      	movs	r2, #44	; 0x2c
 8003a52:	214e      	movs	r1, #78	; 0x4e
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f002 ffb5 	bl	80069c4 <VL53L0X_WrByte>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8003a60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	21ff      	movs	r1, #255	; 0xff
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f002 ffa9 	bl	80069c4 <VL53L0X_WrByte>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003a78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8003a80:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003a84:	461a      	mov	r2, r3
 8003a86:	21b6      	movs	r1, #182	; 0xb6
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f002 ff9b 	bl	80069c4 <VL53L0X_WrByte>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8003a94:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d107      	bne.n	8003aac <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2180      	movs	r1, #128	; 0x80
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f002 ff8f 	bl	80069c4 <VL53L0X_WrByte>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8003aac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8003ab4:	f107 0210 	add.w	r2, r7, #16
 8003ab8:	f107 0111 	add.w	r1, r7, #17
 8003abc:	2300      	movs	r3, #0
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fbbb 	bl	800423a <VL53L0X_perform_ref_calibration>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8003aca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d121      	bne.n	8003b16 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8003ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8003ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8003aee:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003af2:	f107 0218 	add.w	r2, r7, #24
 8003af6:	9204      	str	r2, [sp, #16]
 8003af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003afa:	9203      	str	r2, [sp, #12]
 8003afc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003afe:	9202      	str	r2, [sp, #8]
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	4623      	mov	r3, r4
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f7ff fe5e 	bl	80037cc <enable_ref_spads>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b16:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d174      	bne.n	8003c08 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8003b22:	f107 0312 	add.w	r3, r7, #18
 8003b26:	4619      	mov	r1, r3
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f7ff fecb 	bl	80038c4 <perform_ref_signal_measurement>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8003b34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d161      	bne.n	8003c00 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8003b3c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8003b3e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d25d      	bcs.n	8003c00 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8003b44:	2300      	movs	r3, #0
 8003b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b48:	e009      	b.n	8003b5e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8003b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d3f1      	bcc.n	8003b4a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8003b66:	e002      	b.n	8003b6e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8003b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8003b6e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8003b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b74:	4413      	add	r3, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff fdb0 	bl	80036dc <is_aperture>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8003b82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d3ee      	bcc.n	8003b68 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8003b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b90:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8003b9e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003ba2:	f107 0218 	add.w	r2, r7, #24
 8003ba6:	9204      	str	r2, [sp, #16]
 8003ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003baa:	9203      	str	r2, [sp, #12]
 8003bac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003bae:	9202      	str	r2, [sp, #8]
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	4623      	mov	r3, r4
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f7ff fe06 	bl	80037cc <enable_ref_spads>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8003bc6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d11b      	bne.n	8003c06 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8003bd2:	f107 0312 	add.w	r3, r7, #18
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f7ff fe73 	bl	80038c4 <perform_ref_signal_measurement>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8003be4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10c      	bne.n	8003c06 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8003bec:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8003bee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d208      	bcs.n	8003c06 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8003bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8003bfe:	e002      	b.n	8003c06 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c04:	e000      	b.n	8003c08 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8003c06:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003c08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f040 80af 	bne.w	8003d70 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8003c12:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8003c14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003c16:	429a      	cmp	r2, r3
 8003c18:	f240 80aa 	bls.w	8003d70 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8003c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8003c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c24:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8003c2c:	f107 031c 	add.w	r3, r7, #28
 8003c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c32:	4618      	mov	r0, r3
 8003c34:	f007 fc02 	bl	800b43c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8003c38:	8a7b      	ldrh	r3, [r7, #18]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bfb8      	it	lt
 8003c44:	425b      	neglt	r3, r3
 8003c46:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8003c4e:	e086      	b.n	8003d5e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8003c56:	f107 0314 	add.w	r3, r7, #20
 8003c5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c5e:	f7ff fcdf 	bl	8003620 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d103      	bne.n	8003c72 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003c6a:	23ce      	movs	r3, #206	; 0xce
 8003c6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8003c70:	e07e      	b.n	8003d70 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8003c72:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4413      	add	r3, r2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff fd2e 	bl	80036dc <is_aperture>
 8003c80:	4603      	mov	r3, r0
 8003c82:	461a      	mov	r2, r3
 8003c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d003      	beq.n	8003c92 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8003c90:	e06e      	b.n	8003d70 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8003c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c94:	3301      	adds	r3, #1
 8003c96:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8003ca2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff fd32 	bl	8003710 <enable_spad_bit>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8003cb2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10c      	bne.n	8003cd4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8003cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7ff fd59 	bl	8003780 <set_ref_spad_map>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8003cd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d146      	bne.n	8003d6a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8003cdc:	f107 0312 	add.w	r3, r7, #18
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f7ff fdee 	bl	80038c4 <perform_ref_signal_measurement>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8003cee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d13b      	bne.n	8003d6e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8003cf6:	8a7b      	ldrh	r3, [r7, #18]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	bfb8      	it	lt
 8003d02:	425b      	neglt	r3, r3
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8003d06:	8a7b      	ldrh	r3, [r7, #18]
 8003d08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d21c      	bcs.n	8003d48 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8003d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d914      	bls.n	8003d40 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8003d16:	f107 031c 	add.w	r3, r7, #28
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f7ff fd2f 	bl	8003780 <set_ref_spad_map>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8003d2e:	f107 011c 	add.w	r1, r7, #28
 8003d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d34:	4618      	mov	r0, r3
 8003d36:	f007 fb81 	bl	800b43c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d46:	e00a      	b.n	8003d5e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8003d52:	f107 031c 	add.w	r3, r7, #28
 8003d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f007 fb6f 	bl	800b43c <memcpy>
		while (!complete) {
 8003d5e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f43f af74 	beq.w	8003c50 <VL53L0X_perform_ref_spad_management+0x2b8>
 8003d68:	e002      	b.n	8003d70 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003d6a:	bf00      	nop
 8003d6c:	e000      	b.n	8003d70 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003d6e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003d70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d115      	bne.n	8003da4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d7c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003d84:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	781a      	ldrb	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8003da4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	375c      	adds	r7, #92	; 0x5c
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd90      	pop	{r4, r7, pc}

08003db0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8003db0:	b590      	push	{r4, r7, lr}
 8003db2:	b093      	sub	sp, #76	; 0x4c
 8003db4:	af06      	add	r7, sp, #24
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8003dc8:	23b4      	movs	r3, #180	; 0xb4
 8003dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8003dce:	2306      	movs	r3, #6
 8003dd0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8003dd2:	232c      	movs	r3, #44	; 0x2c
 8003dd4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	21ff      	movs	r1, #255	; 0xff
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f002 fdf2 	bl	80069c4 <VL53L0X_WrByte>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8003de6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d107      	bne.n	8003dfe <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8003dee:	2200      	movs	r2, #0
 8003df0:	214f      	movs	r1, #79	; 0x4f
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f002 fde6 	bl	80069c4 <VL53L0X_WrByte>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003dfe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d107      	bne.n	8003e16 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8003e06:	222c      	movs	r2, #44	; 0x2c
 8003e08:	214e      	movs	r1, #78	; 0x4e
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f002 fdda 	bl	80069c4 <VL53L0X_WrByte>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8003e16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d107      	bne.n	8003e2e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003e1e:	2200      	movs	r2, #0
 8003e20:	21ff      	movs	r1, #255	; 0xff
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f002 fdce 	bl	80069c4 <VL53L0X_WrByte>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8003e2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8003e36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	21b6      	movs	r1, #182	; 0xb6
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f002 fdc0 	bl	80069c4 <VL53L0X_WrByte>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4e:	e009      	b.n	8003e64 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	3301      	adds	r3, #1
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
 8003e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d3f1      	bcc.n	8003e50 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d011      	beq.n	8003e96 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8003e72:	e002      	b.n	8003e7a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	3301      	adds	r3, #1
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8003e7a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	4413      	add	r3, r2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fc2a 	bl	80036dc <is_aperture>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d103      	bne.n	8003e96 <VL53L0X_set_reference_spads+0xe6>
 8003e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d3ee      	bcc.n	8003e74 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8003ea2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ea6:	79f9      	ldrb	r1, [r7, #7]
 8003ea8:	f107 0214 	add.w	r2, r7, #20
 8003eac:	9204      	str	r2, [sp, #16]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	9203      	str	r2, [sp, #12]
 8003eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb4:	9202      	str	r2, [sp, #8]
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	4623      	mov	r3, r4
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7ff fc83 	bl	80037cc <enable_ref_spads>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8003ecc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10c      	bne.n	8003eee <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	79fa      	ldrb	r2, [r7, #7]
 8003eea:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8003eee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3734      	adds	r7, #52	; 0x34
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd90      	pop	{r4, r7, pc}

08003efa <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	460b      	mov	r3, r1
 8003f04:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f06:	2300      	movs	r3, #0
 8003f08:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f002 fd50 	bl	80069c4 <VL53L0X_WrByte>
 8003f24:	4603      	mov	r3, r0
 8003f26:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8003f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d104      	bne.n	8003f3a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f9bf 	bl	80042b4 <VL53L0X_measurement_poll_for_completion>
 8003f36:	4603      	mov	r3, r0
 8003f38:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d105      	bne.n	8003f4e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003f42:	2100      	movs	r1, #0
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fab5 	bl	80034b4 <VL53L0X_ClearInterruptMask>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8003f56:	2200      	movs	r2, #0
 8003f58:	2100      	movs	r1, #0
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f002 fd32 	bl	80069c4 <VL53L0X_WrByte>
 8003f60:	4603      	mov	r3, r0
 8003f62:	73fb      	strb	r3, [r7, #15]

	return Status;
 8003f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	70fb      	strb	r3, [r7, #3]
 8003f82:	460b      	mov	r3, r1
 8003f84:	70bb      	strb	r3, [r7, #2]
 8003f86:	4613      	mov	r3, r2
 8003f88:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003f92:	2201      	movs	r2, #1
 8003f94:	21ff      	movs	r1, #255	; 0xff
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f002 fd14 	bl	80069c4 <VL53L0X_WrByte>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2100      	movs	r1, #0
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f002 fd0a 	bl	80069c4 <VL53L0X_WrByte>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003fba:	2200      	movs	r2, #0
 8003fbc:	21ff      	movs	r1, #255	; 0xff
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f002 fd00 	bl	80069c4 <VL53L0X_WrByte>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01e      	beq.n	8004012 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8003fd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d009      	beq.n	8003ff0 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	21cb      	movs	r1, #203	; 0xcb
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f002 fd71 	bl	8006ac8 <VL53L0X_RdByte>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	461a      	mov	r2, r3
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8003ff0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d02a      	beq.n	800404e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8003ff8:	f107 030e 	add.w	r3, r7, #14
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	21ee      	movs	r1, #238	; 0xee
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f002 fd61 	bl	8006ac8 <VL53L0X_RdByte>
 8004006:	4603      	mov	r3, r0
 8004008:	461a      	mov	r2, r3
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	4313      	orrs	r3, r2
 800400e:	73fb      	strb	r3, [r7, #15]
 8004010:	e01d      	b.n	800404e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8004012:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800401a:	78bb      	ldrb	r3, [r7, #2]
 800401c:	461a      	mov	r2, r3
 800401e:	21cb      	movs	r1, #203	; 0xcb
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f002 fccf 	bl	80069c4 <VL53L0X_WrByte>
 8004026:	4603      	mov	r3, r0
 8004028:	461a      	mov	r2, r3
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	4313      	orrs	r3, r2
 800402e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004030:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8004038:	787b      	ldrb	r3, [r7, #1]
 800403a:	2280      	movs	r2, #128	; 0x80
 800403c:	21ee      	movs	r1, #238	; 0xee
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f002 fd0e 	bl	8006a60 <VL53L0X_UpdateByte>
 8004044:	4603      	mov	r3, r0
 8004046:	461a      	mov	r2, r3
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	4313      	orrs	r3, r2
 800404c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800404e:	2201      	movs	r2, #1
 8004050:	21ff      	movs	r1, #255	; 0xff
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f002 fcb6 	bl	80069c4 <VL53L0X_WrByte>
 8004058:	4603      	mov	r3, r0
 800405a:	461a      	mov	r2, r3
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	4313      	orrs	r3, r2
 8004060:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004062:	2201      	movs	r2, #1
 8004064:	2100      	movs	r1, #0
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f002 fcac 	bl	80069c4 <VL53L0X_WrByte>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	4313      	orrs	r3, r2
 8004074:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004076:	2200      	movs	r2, #0
 8004078:	21ff      	movs	r1, #255	; 0xff
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f002 fca2 	bl	80069c4 <VL53L0X_WrByte>
 8004080:	4603      	mov	r3, r0
 8004082:	461a      	mov	r2, r3
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	4313      	orrs	r3, r2
 8004088:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800408a:	7bbb      	ldrb	r3, [r7, #14]
 800408c:	f023 0310 	bic.w	r3, r3, #16
 8004090:	b2da      	uxtb	r2, r3
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	701a      	strb	r2, [r3, #0]

	return Status;
 8004096:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b08a      	sub	sp, #40	; 0x28
 80040a6:	af04      	add	r7, sp, #16
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	4611      	mov	r1, r2
 80040ae:	461a      	mov	r2, r3
 80040b0:	460b      	mov	r3, r1
 80040b2:	71fb      	strb	r3, [r7, #7]
 80040b4:	4613      	mov	r3, r2
 80040b6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040b8:	2300      	movs	r3, #0
 80040ba:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80040cc:	79bb      	ldrb	r3, [r7, #6]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80040d8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80040da:	2201      	movs	r2, #1
 80040dc:	2101      	movs	r1, #1
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f002 fc70 	bl	80069c4 <VL53L0X_WrByte>
 80040e4:	4603      	mov	r3, r0
 80040e6:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80040e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d105      	bne.n	80040fc <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80040f0:	2140      	movs	r1, #64	; 0x40
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f7ff ff01 	bl	8003efa <VL53L0X_perform_single_ref_calibration>
 80040f8:	4603      	mov	r3, r0
 80040fa:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80040fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d115      	bne.n	8004130 <VL53L0X_perform_vhv_calibration+0x8e>
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d112      	bne.n	8004130 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800410a:	7d39      	ldrb	r1, [r7, #20]
 800410c:	7d7a      	ldrb	r2, [r7, #21]
 800410e:	2300      	movs	r3, #0
 8004110:	9303      	str	r3, [sp, #12]
 8004112:	2301      	movs	r3, #1
 8004114:	9302      	str	r3, [sp, #8]
 8004116:	f107 0313 	add.w	r3, r7, #19
 800411a:	9301      	str	r3, [sp, #4]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	460b      	mov	r3, r1
 8004122:	2101      	movs	r1, #1
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f7ff ff23 	bl	8003f70 <VL53L0X_ref_calibration_io>
 800412a:	4603      	mov	r3, r0
 800412c:	75fb      	strb	r3, [r7, #23]
 800412e:	e002      	b.n	8004136 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2200      	movs	r2, #0
 8004134:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004136:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d112      	bne.n	8004164 <VL53L0X_perform_vhv_calibration+0xc2>
 800413e:	79bb      	ldrb	r3, [r7, #6]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00f      	beq.n	8004164 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004144:	7dbb      	ldrb	r3, [r7, #22]
 8004146:	461a      	mov	r2, r3
 8004148:	2101      	movs	r1, #1
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f002 fc3a 	bl	80069c4 <VL53L0X_WrByte>
 8004150:	4603      	mov	r3, r0
 8004152:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004154:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d103      	bne.n	8004164 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	7dba      	ldrb	r2, [r7, #22]
 8004160:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004164:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	; 0x28
 8004174:	af04      	add	r7, sp, #16
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	4611      	mov	r1, r2
 800417c:	461a      	mov	r2, r3
 800417e:	460b      	mov	r3, r1
 8004180:	71fb      	strb	r3, [r7, #7]
 8004182:	4613      	mov	r3, r2
 8004184:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004186:	2300      	movs	r3, #0
 8004188:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004196:	79bb      	ldrb	r3, [r7, #6]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80041a2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80041a4:	2202      	movs	r2, #2
 80041a6:	2101      	movs	r1, #1
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f002 fc0b 	bl	80069c4 <VL53L0X_WrByte>
 80041ae:	4603      	mov	r3, r0
 80041b0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80041b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d105      	bne.n	80041c6 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80041ba:	2100      	movs	r1, #0
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff fe9c 	bl	8003efa <VL53L0X_perform_single_ref_calibration>
 80041c2:	4603      	mov	r3, r0
 80041c4:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80041c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d115      	bne.n	80041fa <VL53L0X_perform_phase_calibration+0x8a>
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d112      	bne.n	80041fa <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80041d4:	7d39      	ldrb	r1, [r7, #20]
 80041d6:	7d7a      	ldrb	r2, [r7, #21]
 80041d8:	2301      	movs	r3, #1
 80041da:	9303      	str	r3, [sp, #12]
 80041dc:	2300      	movs	r3, #0
 80041de:	9302      	str	r3, [sp, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	f107 0313 	add.w	r3, r7, #19
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	460b      	mov	r3, r1
 80041ec:	2101      	movs	r1, #1
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff febe 	bl	8003f70 <VL53L0X_ref_calibration_io>
 80041f4:	4603      	mov	r3, r0
 80041f6:	75fb      	strb	r3, [r7, #23]
 80041f8:	e002      	b.n	8004200 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004200:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d112      	bne.n	800422e <VL53L0X_perform_phase_calibration+0xbe>
 8004208:	79bb      	ldrb	r3, [r7, #6]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00f      	beq.n	800422e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800420e:	7dbb      	ldrb	r3, [r7, #22]
 8004210:	461a      	mov	r2, r3
 8004212:	2101      	movs	r1, #1
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f002 fbd5 	bl	80069c4 <VL53L0X_WrByte>
 800421a:	4603      	mov	r3, r0
 800421c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800421e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	7dba      	ldrb	r2, [r7, #22]
 800422a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800422e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b086      	sub	sp, #24
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004248:	2300      	movs	r3, #0
 800424a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004256:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8004258:	78fa      	ldrb	r2, [r7, #3]
 800425a:	2300      	movs	r3, #0
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff ff1f 	bl	80040a2 <VL53L0X_perform_vhv_calibration>
 8004264:	4603      	mov	r3, r0
 8004266:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004268:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d107      	bne.n	8004280 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	2300      	movs	r3, #0
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f7ff ff7a 	bl	8004170 <VL53L0X_perform_phase_calibration>
 800427c:	4603      	mov	r3, r0
 800427e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8004280:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10f      	bne.n	80042a8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004288:	7dbb      	ldrb	r3, [r7, #22]
 800428a:	461a      	mov	r2, r3
 800428c:	2101      	movs	r1, #1
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f002 fb98 	bl	80069c4 <VL53L0X_WrByte>
 8004294:	4603      	mov	r3, r0
 8004296:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004298:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d103      	bne.n	80042a8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	7dba      	ldrb	r2, [r7, #22]
 80042a4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80042a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042bc:	2300      	movs	r3, #0
 80042be:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80042c8:	f107 030f 	add.w	r3, r7, #15
 80042cc:	4619      	mov	r1, r3
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fe fe02 	bl	8002ed8 <VL53L0X_GetMeasurementDataReady>
 80042d4:	4603      	mov	r3, r0
 80042d6:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80042d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d110      	bne.n	8004302 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d00f      	beq.n	8004306 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	3301      	adds	r3, #1
 80042ea:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80042f2:	d302      	bcc.n	80042fa <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80042f4:	23f9      	movs	r3, #249	; 0xf9
 80042f6:	75fb      	strb	r3, [r7, #23]
			break;
 80042f8:	e006      	b.n	8004308 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f002 fc82 	bl	8006c04 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004300:	e7e2      	b.n	80042c8 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8004302:	bf00      	nop
 8004304:	e000      	b.n	8004308 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8004306:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8004308:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	3301      	adds	r3, #1
 8004326:	b2db      	uxtb	r3, r3
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800433a:	b480      	push	{r7}
 800433c:	b085      	sub	sp, #20
 800433e:	af00      	add	r7, sp, #0
 8004340:	4603      	mov	r3, r0
 8004342:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8004352:	7bfb      	ldrb	r3, [r7, #15]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800436c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004370:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8004372:	e002      	b.n	800437a <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	089b      	lsrs	r3, r3, #2
 8004378:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	429a      	cmp	r2, r3
 8004380:	d8f8      	bhi.n	8004374 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8004382:	e017      	b.n	80043b4 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4413      	add	r3, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	429a      	cmp	r2, r3
 800438e:	d30b      	bcc.n	80043a8 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4413      	add	r3, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	085b      	lsrs	r3, r3, #1
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	4413      	add	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	e002      	b.n	80043ae <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	089b      	lsrs	r3, r3, #2
 80043b2:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e4      	bne.n	8004384 <VL53L0X_isqrt+0x24>
	}

	return res;
 80043ba:	68fb      	ldr	r3, [r7, #12]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80043d4:	2200      	movs	r2, #0
 80043d6:	2183      	movs	r1, #131	; 0x83
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f002 faf3 	bl	80069c4 <VL53L0X_WrByte>
 80043de:	4603      	mov	r3, r0
 80043e0:	461a      	mov	r2, r3
 80043e2:	7dfb      	ldrb	r3, [r7, #23]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80043e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d11e      	bne.n	800442e <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80043f4:	f107 030f 	add.w	r3, r7, #15
 80043f8:	461a      	mov	r2, r3
 80043fa:	2183      	movs	r1, #131	; 0x83
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f002 fb63 	bl	8006ac8 <VL53L0X_RdByte>
 8004402:	4603      	mov	r3, r0
 8004404:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <VL53L0X_device_read_strobe+0x5a>
 800440c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d106      	bne.n	8004422 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	3301      	adds	r3, #1
 8004418:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004420:	d3e8      	bcc.n	80043f4 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004428:	d301      	bcc.n	800442e <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800442a:	23f9      	movs	r3, #249	; 0xf9
 800442c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800442e:	2201      	movs	r2, #1
 8004430:	2183      	movs	r1, #131	; 0x83
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f002 fac6 	bl	80069c4 <VL53L0X_WrByte>
 8004438:	4603      	mov	r3, r0
 800443a:	461a      	mov	r2, r3
 800443c:	7dfb      	ldrb	r3, [r7, #23]
 800443e:	4313      	orrs	r3, r2
 8004440:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8004442:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b098      	sub	sp, #96	; 0x60
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	460b      	mov	r3, r1
 8004458:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800445a:	2300      	movs	r3, #0
 800445c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8004470:	2300      	movs	r3, #0
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8004474:	2300      	movs	r3, #0
 8004476:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8004478:	2300      	movs	r3, #0
 800447a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800447e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8004482:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8004496:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800449a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800449e:	2b07      	cmp	r3, #7
 80044a0:	f000 8408 	beq.w	8004cb4 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80044a4:	2201      	movs	r2, #1
 80044a6:	2180      	movs	r1, #128	; 0x80
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f002 fa8b 	bl	80069c4 <VL53L0X_WrByte>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80044bc:	2201      	movs	r2, #1
 80044be:	21ff      	movs	r1, #255	; 0xff
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f002 fa7f 	bl	80069c4 <VL53L0X_WrByte>
 80044c6:	4603      	mov	r3, r0
 80044c8:	461a      	mov	r2, r3
 80044ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80044d4:	2200      	movs	r2, #0
 80044d6:	2100      	movs	r1, #0
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f002 fa73 	bl	80069c4 <VL53L0X_WrByte>
 80044de:	4603      	mov	r3, r0
 80044e0:	461a      	mov	r2, r3
 80044e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80044ec:	2206      	movs	r2, #6
 80044ee:	21ff      	movs	r1, #255	; 0xff
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f002 fa67 	bl	80069c4 <VL53L0X_WrByte>
 80044f6:	4603      	mov	r3, r0
 80044f8:	461a      	mov	r2, r3
 80044fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80044fe:	4313      	orrs	r3, r2
 8004500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8004504:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004508:	461a      	mov	r2, r3
 800450a:	2183      	movs	r1, #131	; 0x83
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f002 fadb 	bl	8006ac8 <VL53L0X_RdByte>
 8004512:	4603      	mov	r3, r0
 8004514:	461a      	mov	r2, r3
 8004516:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800451a:	4313      	orrs	r3, r2
 800451c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8004520:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004524:	f043 0304 	orr.w	r3, r3, #4
 8004528:	b2db      	uxtb	r3, r3
 800452a:	461a      	mov	r2, r3
 800452c:	2183      	movs	r1, #131	; 0x83
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f002 fa48 	bl	80069c4 <VL53L0X_WrByte>
 8004534:	4603      	mov	r3, r0
 8004536:	461a      	mov	r2, r3
 8004538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800453c:	4313      	orrs	r3, r2
 800453e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8004542:	2207      	movs	r2, #7
 8004544:	21ff      	movs	r1, #255	; 0xff
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f002 fa3c 	bl	80069c4 <VL53L0X_WrByte>
 800454c:	4603      	mov	r3, r0
 800454e:	461a      	mov	r2, r3
 8004550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004554:	4313      	orrs	r3, r2
 8004556:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800455a:	2201      	movs	r2, #1
 800455c:	2181      	movs	r1, #129	; 0x81
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f002 fa30 	bl	80069c4 <VL53L0X_WrByte>
 8004564:	4603      	mov	r3, r0
 8004566:	461a      	mov	r2, r3
 8004568:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800456c:	4313      	orrs	r3, r2
 800456e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f002 fb46 	bl	8006c04 <VL53L0X_PollingDelay>
 8004578:	4603      	mov	r3, r0
 800457a:	461a      	mov	r2, r3
 800457c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004580:	4313      	orrs	r3, r2
 8004582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004586:	2201      	movs	r2, #1
 8004588:	2180      	movs	r1, #128	; 0x80
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f002 fa1a 	bl	80069c4 <VL53L0X_WrByte>
 8004590:	4603      	mov	r3, r0
 8004592:	461a      	mov	r2, r3
 8004594:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004598:	4313      	orrs	r3, r2
 800459a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8098 	beq.w	80046da <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80045aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80045ae:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f040 8091 	bne.w	80046da <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80045b8:	226b      	movs	r2, #107	; 0x6b
 80045ba:	2194      	movs	r1, #148	; 0x94
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f002 fa01 	bl	80069c4 <VL53L0X_WrByte>
 80045c2:	4603      	mov	r3, r0
 80045c4:	461a      	mov	r2, r3
 80045c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff fef9 	bl	80043c8 <VL53L0X_device_read_strobe>
 80045d6:	4603      	mov	r3, r0
 80045d8:	461a      	mov	r2, r3
 80045da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045de:	4313      	orrs	r3, r2
 80045e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80045e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045e8:	461a      	mov	r2, r3
 80045ea:	2190      	movs	r1, #144	; 0x90
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f002 facd 	bl	8006b8c <VL53L0X_RdDWord>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800460a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	0bdb      	lsrs	r3, r3, #15
 8004612:	b2db      	uxtb	r3, r3
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800461c:	2224      	movs	r2, #36	; 0x24
 800461e:	2194      	movs	r1, #148	; 0x94
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f002 f9cf 	bl	80069c4 <VL53L0X_WrByte>
 8004626:	4603      	mov	r3, r0
 8004628:	461a      	mov	r2, r3
 800462a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800462e:	4313      	orrs	r3, r2
 8004630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff fec7 	bl	80043c8 <VL53L0X_device_read_strobe>
 800463a:	4603      	mov	r3, r0
 800463c:	461a      	mov	r2, r3
 800463e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004642:	4313      	orrs	r3, r2
 8004644:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004648:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800464c:	461a      	mov	r2, r3
 800464e:	2190      	movs	r1, #144	; 0x90
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f002 fa9b 	bl	8006b8c <VL53L0X_RdDWord>
 8004656:	4603      	mov	r3, r0
 8004658:	461a      	mov	r2, r3
 800465a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800465e:	4313      	orrs	r3, r2
 8004660:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8004664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004666:	0e1b      	lsrs	r3, r3, #24
 8004668:	b2db      	uxtb	r3, r3
 800466a:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	0c1b      	lsrs	r3, r3, #16
 8004670:	b2db      	uxtb	r3, r3
 8004672:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	0a1b      	lsrs	r3, r3, #8
 8004678:	b2db      	uxtb	r3, r3
 800467a:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800467c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467e:	b2db      	uxtb	r3, r3
 8004680:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8004682:	2225      	movs	r2, #37	; 0x25
 8004684:	2194      	movs	r1, #148	; 0x94
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f002 f99c 	bl	80069c4 <VL53L0X_WrByte>
 800468c:	4603      	mov	r3, r0
 800468e:	461a      	mov	r2, r3
 8004690:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004694:	4313      	orrs	r3, r2
 8004696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff fe94 	bl	80043c8 <VL53L0X_device_read_strobe>
 80046a0:	4603      	mov	r3, r0
 80046a2:	461a      	mov	r2, r3
 80046a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80046ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046b2:	461a      	mov	r2, r3
 80046b4:	2190      	movs	r1, #144	; 0x90
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f002 fa68 	bl	8006b8c <VL53L0X_RdDWord>
 80046bc:	4603      	mov	r3, r0
 80046be:	461a      	mov	r2, r3
 80046c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	0e1b      	lsrs	r3, r3, #24
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	0c1b      	lsrs	r3, r3, #16
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 8189 	beq.w	80049f8 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80046e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80046ea:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f040 8182 	bne.w	80049f8 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80046f4:	2202      	movs	r2, #2
 80046f6:	2194      	movs	r1, #148	; 0x94
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f002 f963 	bl	80069c4 <VL53L0X_WrByte>
 80046fe:	4603      	mov	r3, r0
 8004700:	461a      	mov	r2, r3
 8004702:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004706:	4313      	orrs	r3, r2
 8004708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff fe5b 	bl	80043c8 <VL53L0X_device_read_strobe>
 8004712:	4603      	mov	r3, r0
 8004714:	461a      	mov	r2, r3
 8004716:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800471a:	4313      	orrs	r3, r2
 800471c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8004720:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8004724:	461a      	mov	r2, r3
 8004726:	2190      	movs	r1, #144	; 0x90
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f002 f9cd 	bl	8006ac8 <VL53L0X_RdByte>
 800472e:	4603      	mov	r3, r0
 8004730:	461a      	mov	r2, r3
 8004732:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004736:	4313      	orrs	r3, r2
 8004738:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800473c:	227b      	movs	r2, #123	; 0x7b
 800473e:	2194      	movs	r1, #148	; 0x94
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f002 f93f 	bl	80069c4 <VL53L0X_WrByte>
 8004746:	4603      	mov	r3, r0
 8004748:	461a      	mov	r2, r3
 800474a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800474e:	4313      	orrs	r3, r2
 8004750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff fe37 	bl	80043c8 <VL53L0X_device_read_strobe>
 800475a:	4603      	mov	r3, r0
 800475c:	461a      	mov	r2, r3
 800475e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004762:	4313      	orrs	r3, r2
 8004764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8004768:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800476c:	461a      	mov	r2, r3
 800476e:	2190      	movs	r1, #144	; 0x90
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f002 f9a9 	bl	8006ac8 <VL53L0X_RdByte>
 8004776:	4603      	mov	r3, r0
 8004778:	461a      	mov	r2, r3
 800477a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800477e:	4313      	orrs	r3, r2
 8004780:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8004784:	2277      	movs	r2, #119	; 0x77
 8004786:	2194      	movs	r1, #148	; 0x94
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f002 f91b 	bl	80069c4 <VL53L0X_WrByte>
 800478e:	4603      	mov	r3, r0
 8004790:	461a      	mov	r2, r3
 8004792:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004796:	4313      	orrs	r3, r2
 8004798:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff fe13 	bl	80043c8 <VL53L0X_device_read_strobe>
 80047a2:	4603      	mov	r3, r0
 80047a4:	461a      	mov	r2, r3
 80047a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80047b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047b4:	461a      	mov	r2, r3
 80047b6:	2190      	movs	r1, #144	; 0x90
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f002 f9e7 	bl	8006b8c <VL53L0X_RdDWord>
 80047be:	4603      	mov	r3, r0
 80047c0:	461a      	mov	r2, r3
 80047c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	0e5b      	lsrs	r3, r3, #25
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	0c9b      	lsrs	r3, r3, #18
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	0adb      	lsrs	r3, r3, #11
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004800:	b2db      	uxtb	r3, r3
 8004802:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	b2db      	uxtb	r3, r3
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8004810:	b2db      	uxtb	r3, r3
 8004812:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8004816:	2278      	movs	r2, #120	; 0x78
 8004818:	2194      	movs	r1, #148	; 0x94
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f002 f8d2 	bl	80069c4 <VL53L0X_WrByte>
 8004820:	4603      	mov	r3, r0
 8004822:	461a      	mov	r2, r3
 8004824:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004828:	4313      	orrs	r3, r2
 800482a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff fdca 	bl	80043c8 <VL53L0X_device_read_strobe>
 8004834:	4603      	mov	r3, r0
 8004836:	461a      	mov	r2, r3
 8004838:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800483c:	4313      	orrs	r3, r2
 800483e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004842:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004846:	461a      	mov	r2, r3
 8004848:	2190      	movs	r1, #144	; 0x90
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f002 f99e 	bl	8006b8c <VL53L0X_RdDWord>
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004858:	4313      	orrs	r3, r2
 800485a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	0f5b      	lsrs	r3, r3, #29
 8004862:	b2db      	uxtb	r3, r3
 8004864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004868:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800486a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800486e:	4413      	add	r3, r2
 8004870:	b2db      	uxtb	r3, r3
 8004872:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	0d9b      	lsrs	r3, r3, #22
 8004878:	b2db      	uxtb	r3, r3
 800487a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800487e:	b2db      	uxtb	r3, r3
 8004880:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	0bdb      	lsrs	r3, r3, #15
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800488c:	b2db      	uxtb	r3, r3
 800488e:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	0a1b      	lsrs	r3, r3, #8
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800489a:	b2db      	uxtb	r3, r3
 800489c:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a0:	085b      	lsrs	r3, r3, #1
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	019b      	lsls	r3, r3, #6
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80048be:	2279      	movs	r2, #121	; 0x79
 80048c0:	2194      	movs	r1, #148	; 0x94
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f002 f87e 	bl	80069c4 <VL53L0X_WrByte>
 80048c8:	4603      	mov	r3, r0
 80048ca:	461a      	mov	r2, r3
 80048cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff fd76 	bl	80043c8 <VL53L0X_device_read_strobe>
 80048dc:	4603      	mov	r3, r0
 80048de:	461a      	mov	r2, r3
 80048e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80048ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048ee:	461a      	mov	r2, r3
 80048f0:	2190      	movs	r1, #144	; 0x90
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f002 f94a 	bl	8006b8c <VL53L0X_RdDWord>
 80048f8:	4603      	mov	r3, r0
 80048fa:	461a      	mov	r2, r3
 80048fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004900:	4313      	orrs	r3, r2
 8004902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	0e9b      	lsrs	r3, r3, #26
 800490a:	b2db      	uxtb	r3, r3
 800490c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004910:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8004912:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004916:	4413      	add	r3, r2
 8004918:	b2db      	uxtb	r3, r3
 800491a:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	0cdb      	lsrs	r3, r3, #19
 8004920:	b2db      	uxtb	r3, r3
 8004922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004926:	b2db      	uxtb	r3, r3
 8004928:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	0b1b      	lsrs	r3, r3, #12
 800492e:	b2db      	uxtb	r3, r3
 8004930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004934:	b2db      	uxtb	r3, r3
 8004936:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	b2db      	uxtb	r3, r3
 800493e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004942:	b2db      	uxtb	r3, r3
 8004944:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	b2db      	uxtb	r3, r3
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8004958:	227a      	movs	r2, #122	; 0x7a
 800495a:	2194      	movs	r1, #148	; 0x94
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f002 f831 	bl	80069c4 <VL53L0X_WrByte>
 8004962:	4603      	mov	r3, r0
 8004964:	461a      	mov	r2, r3
 8004966:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800496a:	4313      	orrs	r3, r2
 800496c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff fd29 	bl	80043c8 <VL53L0X_device_read_strobe>
 8004976:	4603      	mov	r3, r0
 8004978:	461a      	mov	r2, r3
 800497a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800497e:	4313      	orrs	r3, r2
 8004980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004984:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004988:	461a      	mov	r2, r3
 800498a:	2190      	movs	r1, #144	; 0x90
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f002 f8fd 	bl	8006b8c <VL53L0X_RdDWord>
 8004992:	4603      	mov	r3, r0
 8004994:	461a      	mov	r2, r3
 8004996:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800499a:	4313      	orrs	r3, r2
 800499c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	0f9b      	lsrs	r3, r3, #30
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049aa:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80049ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049b0:	4413      	add	r3, r2
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	0ddb      	lsrs	r3, r3, #23
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	0c1b      	lsrs	r3, r3, #16
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	0a5b      	lsrs	r3, r3, #9
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	089b      	lsrs	r3, r3, #2
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80049f2:	2300      	movs	r3, #0
 80049f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 80f1 	beq.w	8004be6 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8004a04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a08:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f040 80ea 	bne.w	8004be6 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8004a12:	227b      	movs	r2, #123	; 0x7b
 8004a14:	2194      	movs	r1, #148	; 0x94
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f001 ffd4 	bl	80069c4 <VL53L0X_WrByte>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff fccc 	bl	80043c8 <VL53L0X_device_read_strobe>
 8004a30:	4603      	mov	r3, r0
 8004a32:	461a      	mov	r2, r3
 8004a34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8004a3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a42:	461a      	mov	r2, r3
 8004a44:	2190      	movs	r1, #144	; 0x90
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f002 f8a0 	bl	8006b8c <VL53L0X_RdDWord>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8004a5a:	227c      	movs	r2, #124	; 0x7c
 8004a5c:	2194      	movs	r1, #148	; 0x94
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f001 ffb0 	bl	80069c4 <VL53L0X_WrByte>
 8004a64:	4603      	mov	r3, r0
 8004a66:	461a      	mov	r2, r3
 8004a68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff fca8 	bl	80043c8 <VL53L0X_device_read_strobe>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8004a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	2190      	movs	r1, #144	; 0x90
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f002 f87c 	bl	8006b8c <VL53L0X_RdDWord>
 8004a94:	4603      	mov	r3, r0
 8004a96:	461a      	mov	r2, r3
 8004a98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8004aa2:	2273      	movs	r2, #115	; 0x73
 8004aa4:	2194      	movs	r1, #148	; 0x94
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f001 ff8c 	bl	80069c4 <VL53L0X_WrByte>
 8004aac:	4603      	mov	r3, r0
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff fc84 	bl	80043c8 <VL53L0X_device_read_strobe>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004ace:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	2190      	movs	r1, #144	; 0x90
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f002 f858 	bl	8006b8c <VL53L0X_RdDWord>
 8004adc:	4603      	mov	r3, r0
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8004af2:	2274      	movs	r2, #116	; 0x74
 8004af4:	2194      	movs	r1, #148	; 0x94
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f001 ff64 	bl	80069c4 <VL53L0X_WrByte>
 8004afc:	4603      	mov	r3, r0
 8004afe:	461a      	mov	r2, r3
 8004b00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff fc5c 	bl	80043c8 <VL53L0X_device_read_strobe>
 8004b10:	4603      	mov	r3, r0
 8004b12:	461a      	mov	r2, r3
 8004b14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004b1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b22:	461a      	mov	r2, r3
 8004b24:	2190      	movs	r1, #144	; 0x90
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f002 f830 	bl	8006b8c <VL53L0X_RdDWord>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8004b3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b40:	4313      	orrs	r3, r2
 8004b42:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8004b44:	2275      	movs	r2, #117	; 0x75
 8004b46:	2194      	movs	r1, #148	; 0x94
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f001 ff3b 	bl	80069c4 <VL53L0X_WrByte>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	461a      	mov	r2, r3
 8004b52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fc33 	bl	80043c8 <VL53L0X_device_read_strobe>
 8004b62:	4603      	mov	r3, r0
 8004b64:	461a      	mov	r2, r3
 8004b66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004b70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b74:	461a      	mov	r2, r3
 8004b76:	2190      	movs	r1, #144	; 0x90
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f002 f807 	bl	8006b8c <VL53L0X_RdDWord>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	461a      	mov	r2, r3
 8004b82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8004b94:	2276      	movs	r2, #118	; 0x76
 8004b96:	2194      	movs	r1, #148	; 0x94
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f001 ff13 	bl	80069c4 <VL53L0X_WrByte>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff fc0b 	bl	80043c8 <VL53L0X_device_read_strobe>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004bc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2190      	movs	r1, #144	; 0x90
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f001 ffdf 	bl	8006b8c <VL53L0X_RdDWord>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8004be0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004be2:	4313      	orrs	r3, r2
 8004be4:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8004be6:	2200      	movs	r2, #0
 8004be8:	2181      	movs	r1, #129	; 0x81
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f001 feea 	bl	80069c4 <VL53L0X_WrByte>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8004bfe:	2206      	movs	r2, #6
 8004c00:	21ff      	movs	r1, #255	; 0xff
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f001 fede 	bl	80069c4 <VL53L0X_WrByte>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8004c16:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	2183      	movs	r1, #131	; 0x83
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f001 ff52 	bl	8006ac8 <VL53L0X_RdByte>
 8004c24:	4603      	mov	r3, r0
 8004c26:	461a      	mov	r2, r3
 8004c28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8004c32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c36:	f023 0304 	bic.w	r3, r3, #4
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	2183      	movs	r1, #131	; 0x83
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f001 febf 	bl	80069c4 <VL53L0X_WrByte>
 8004c46:	4603      	mov	r3, r0
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004c54:	2201      	movs	r2, #1
 8004c56:	21ff      	movs	r1, #255	; 0xff
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f001 feb3 	bl	80069c4 <VL53L0X_WrByte>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	461a      	mov	r2, r3
 8004c62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	2100      	movs	r1, #0
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f001 fea7 	bl	80069c4 <VL53L0X_WrByte>
 8004c76:	4603      	mov	r3, r0
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004c84:	2200      	movs	r2, #0
 8004c86:	21ff      	movs	r1, #255	; 0xff
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f001 fe9b 	bl	80069c4 <VL53L0X_WrByte>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	461a      	mov	r2, r3
 8004c92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2180      	movs	r1, #128	; 0x80
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 fe8f 	bl	80069c4 <VL53L0X_WrByte>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	461a      	mov	r2, r3
 8004caa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004cb4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f040 808f 	bne.w	8004ddc <VL53L0X_get_info_from_device+0x98e>
 8004cbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004cc2:	2b07      	cmp	r3, #7
 8004cc4:	f000 808a 	beq.w	8004ddc <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d024      	beq.n	8004d1c <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8004cd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004cd6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d11e      	bne.n	8004d1c <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8004ce4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8004cee:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf6:	e00e      	b.n	8004d16 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8004cf8:	f107 0208 	add.w	r2, r7, #8
 8004cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cfe:	4413      	add	r3, r2
 8004d00:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8004d0c:	460a      	mov	r2, r1
 8004d0e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8004d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d12:	3301      	adds	r3, #1
 8004d14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d18:	2b05      	cmp	r3, #5
 8004d1a:	dded      	ble.n	8004cf8 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d018      	beq.n	8004d58 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8004d26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d2a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d112      	bne.n	8004d58 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d32:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d3c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	33f3      	adds	r3, #243	; 0xf3
 8004d4a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8004d4c:	f107 0310 	add.w	r3, r7, #16
 8004d50:	4619      	mov	r1, r3
 8004d52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d54:	f006 fba8 	bl	800b4a8 <strcpy>

		}

		if (((option & 4) == 4) &&
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d030      	beq.n	8004dc4 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8004d62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d66:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d12a      	bne.n	8004dc4 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8004d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d80:	025b      	lsls	r3, r3, #9
 8004d82:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d88:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8004d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d011      	beq.n	8004dbc <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8004d98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8004da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004da6:	fb02 f303 	mul.w	r3, r2, r3
 8004daa:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8004dac:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8004db0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004db4:	425b      	negs	r3, r3
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8004dbc:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8004dc4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8004dd2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ddc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3760      	adds	r7, #96	; 0x60
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8004df4:	f240 6277 	movw	r2, #1655	; 0x677
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8004e00:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8004e04:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8004e06:	78fb      	ldrb	r3, [r7, #3]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	fb02 f303 	mul.w	r3, r2, r3
 8004e14:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8004e16:	68bb      	ldr	r3, [r7, #8]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8004e30:	2300      	movs	r3, #0
 8004e32:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d017      	beq.n	8004e6e <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8004e44:	e005      	b.n	8004e52 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8004e4c:	89fb      	ldrh	r3, [r7, #14]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1f4      	bne.n	8004e46 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8004e5c:	89fb      	ldrh	r3, [r7, #14]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8004e6a:	4413      	add	r3, r2
 8004e6c:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8004e6e:	8afb      	ldrh	r3, [r7, #22]

}
 8004e70:	4618      	mov	r0, r3
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	4603      	mov	r3, r0
 8004e84:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8004e8a:	88fb      	ldrh	r3, [r7, #6]
 8004e8c:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8004e8e:	88fa      	ldrh	r2, [r7, #6]
 8004e90:	0a12      	lsrs	r2, r2, #8
 8004e92:	b292      	uxth	r2, r2
 8004e94:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8004e96:	3301      	adds	r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f7ff ff92 	bl	8004de8 <VL53L0X_calc_macro_period_ps>
 8004ec4:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004ecc:	4a0a      	ldr	r2, [pc, #40]	; (8004ef8 <VL53L0X_calc_timeout_mclks+0x50>)
 8004ece:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed2:	099b      	lsrs	r3, r3, #6
 8004ed4:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004edc:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	085b      	lsrs	r3, r3, #1
 8004ee4:	441a      	add	r2, r3
	timeout_period_mclks =
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eec:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8004eee:	69fb      	ldr	r3, [r7, #28]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3720      	adds	r7, #32
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	10624dd3 	.word	0x10624dd3

08004efc <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	807b      	strh	r3, [r7, #2]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8004f10:	787b      	ldrb	r3, [r7, #1]
 8004f12:	4619      	mov	r1, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff ff67 	bl	8004de8 <VL53L0X_calc_macro_period_ps>
 8004f1a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004f22:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <VL53L0X_calc_timeout_us+0x50>)
 8004f24:	fba2 2303 	umull	r2, r3, r2, r3
 8004f28:	099b      	lsrs	r3, r3, #6
 8004f2a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8004f2c:	887b      	ldrh	r3, [r7, #2]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	fb02 f303 	mul.w	r3, r2, r3
 8004f34:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8004f38:	4a04      	ldr	r2, [pc, #16]	; (8004f4c <VL53L0X_calc_timeout_us+0x50>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	099b      	lsrs	r3, r3, #6
 8004f40:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8004f42:	697b      	ldr	r3, [r7, #20]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	10624dd3 	.word	0x10624dd3

08004f50 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08c      	sub	sp, #48	; 0x30
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8004f76:	7afb      	ldrb	r3, [r7, #11]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <get_sequence_step_timeout+0x38>
 8004f7c:	7afb      	ldrb	r3, [r7, #11]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d002      	beq.n	8004f88 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8004f82:	7afb      	ldrb	r3, [r7, #11]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d128      	bne.n	8004fda <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004f88:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	2100      	movs	r1, #0
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7fd fa7d 	bl	8002490 <VL53L0X_GetVcselPulsePeriod>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8004f9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d109      	bne.n	8004fb8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8004fa4:	f107 0320 	add.w	r3, r7, #32
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2146      	movs	r1, #70	; 0x46
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f001 fd8b 	bl	8006ac8 <VL53L0X_RdByte>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8004fb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff ff5c 	bl	8004e7c <VL53L0X_decode_timeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004fc8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004fcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fce:	4619      	mov	r1, r3
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f7ff ff93 	bl	8004efc <VL53L0X_calc_timeout_us>
 8004fd6:	62b8      	str	r0, [r7, #40]	; 0x28
 8004fd8:	e092      	b.n	8005100 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8004fda:	7afb      	ldrb	r3, [r7, #11]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d135      	bne.n	800504c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004fe0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f7fd fa51 	bl	8002490 <VL53L0X_GetVcselPulsePeriod>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8004ff4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f040 8081 	bne.w	8005100 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004ffe:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005002:	461a      	mov	r2, r3
 8005004:	2100      	movs	r1, #0
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f7fd fa42 	bl	8002490 <VL53L0X_GetVcselPulsePeriod>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8005012:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800501a:	f107 031e 	add.w	r3, r7, #30
 800501e:	461a      	mov	r2, r3
 8005020:	2151      	movs	r1, #81	; 0x51
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f001 fd7a 	bl	8006b1c <VL53L0X_RdWord>
 8005028:	4603      	mov	r3, r0
 800502a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800502e:	8bfb      	ldrh	r3, [r7, #30]
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff ff23 	bl	8004e7c <VL53L0X_decode_timeout>
 8005036:	4603      	mov	r3, r0
 8005038:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800503a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800503e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005040:	4619      	mov	r1, r3
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f7ff ff5a 	bl	8004efc <VL53L0X_calc_timeout_us>
 8005048:	62b8      	str	r0, [r7, #40]	; 0x28
 800504a:	e059      	b.n	8005100 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800504c:	7afb      	ldrb	r3, [r7, #11]
 800504e:	2b04      	cmp	r3, #4
 8005050:	d156      	bne.n	8005100 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005052:	f107 0314 	add.w	r3, r7, #20
 8005056:	4619      	mov	r1, r3
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7fd fb25 	bl	80026a8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8005062:	7dfb      	ldrb	r3, [r7, #23]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01d      	beq.n	80050a4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005068:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800506c:	461a      	mov	r2, r3
 800506e:	2100      	movs	r1, #0
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f7fd fa0d 	bl	8002490 <VL53L0X_GetVcselPulsePeriod>
 8005076:	4603      	mov	r3, r0
 8005078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800507c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10f      	bne.n	80050a4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8005084:	f107 031e 	add.w	r3, r7, #30
 8005088:	461a      	mov	r2, r3
 800508a:	2151      	movs	r1, #81	; 0x51
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f001 fd45 	bl	8006b1c <VL53L0X_RdWord>
 8005092:	4603      	mov	r3, r0
 8005094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005098:	8bfb      	ldrh	r3, [r7, #30]
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff feee 	bl	8004e7c <VL53L0X_decode_timeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80050a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d109      	bne.n	80050c0 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80050ac:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80050b0:	461a      	mov	r2, r3
 80050b2:	2101      	movs	r1, #1
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f7fd f9eb 	bl	8002490 <VL53L0X_GetVcselPulsePeriod>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80050c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10f      	bne.n	80050e8 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80050c8:	f107 031c 	add.w	r3, r7, #28
 80050cc:	461a      	mov	r2, r3
 80050ce:	2171      	movs	r1, #113	; 0x71
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f001 fd23 	bl	8006b1c <VL53L0X_RdWord>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80050dc:	8bbb      	ldrh	r3, [r7, #28]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff fecc 	bl	8004e7c <VL53L0X_decode_timeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80050e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80050f0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80050f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050f6:	4619      	mov	r1, r3
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7ff feff 	bl	8004efc <VL53L0X_calc_timeout_us>
 80050fe:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005104:	601a      	str	r2, [r3, #0]

	return Status;
 8005106:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800510a:	4618      	mov	r0, r3
 800510c:	3730      	adds	r7, #48	; 0x30
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b08a      	sub	sp, #40	; 0x28
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	460b      	mov	r3, r1
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005120:	2300      	movs	r3, #0
 8005122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005126:	7afb      	ldrb	r3, [r7, #11]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <set_sequence_step_timeout+0x26>
 800512c:	7afb      	ldrb	r3, [r7, #11]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d002      	beq.n	8005138 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005132:	7afb      	ldrb	r3, [r7, #11]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d138      	bne.n	80051aa <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005138:	f107 031b 	add.w	r3, r7, #27
 800513c:	461a      	mov	r2, r3
 800513e:	2100      	movs	r1, #0
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f7fd f9a5 	bl	8002490 <VL53L0X_GetVcselPulsePeriod>
 8005146:	4603      	mov	r3, r0
 8005148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800514c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005150:	2b00      	cmp	r3, #0
 8005152:	d11a      	bne.n	800518a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8005154:	7efb      	ldrb	r3, [r7, #27]
 8005156:	461a      	mov	r2, r3
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff fea4 	bl	8004ea8 <VL53L0X_calc_timeout_mclks>
 8005160:	4603      	mov	r3, r0
 8005162:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8005164:	8bbb      	ldrh	r3, [r7, #28]
 8005166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516a:	d903      	bls.n	8005174 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800516c:	23ff      	movs	r3, #255	; 0xff
 800516e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005172:	e004      	b.n	800517e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8005174:	8bbb      	ldrh	r3, [r7, #28]
 8005176:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8005178:	3b01      	subs	r3, #1
 800517a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800517e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800518a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800518e:	2b00      	cmp	r3, #0
 8005190:	f040 80ab 	bne.w	80052ea <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8005194:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005198:	461a      	mov	r2, r3
 800519a:	2146      	movs	r1, #70	; 0x46
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f001 fc11 	bl	80069c4 <VL53L0X_WrByte>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80051a8:	e09f      	b.n	80052ea <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80051aa:	7afb      	ldrb	r3, [r7, #11]
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d135      	bne.n	800521c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80051b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d11b      	bne.n	80051f0 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80051b8:	f107 031b 	add.w	r3, r7, #27
 80051bc:	461a      	mov	r2, r3
 80051be:	2100      	movs	r1, #0
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7fd f965 	bl	8002490 <VL53L0X_GetVcselPulsePeriod>
 80051c6:	4603      	mov	r3, r0
 80051c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80051cc:	7efb      	ldrb	r3, [r7, #27]
 80051ce:	461a      	mov	r2, r3
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f7ff fe68 	bl	8004ea8 <VL53L0X_calc_timeout_mclks>
 80051d8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80051da:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80051dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff fe20 	bl	8004e24 <VL53L0X_encode_timeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80051e8:	8b3a      	ldrh	r2, [r7, #24]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80051f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d108      	bne.n	800520a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80051f8:	8b3b      	ldrh	r3, [r7, #24]
 80051fa:	461a      	mov	r2, r3
 80051fc:	2151      	movs	r1, #81	; 0x51
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f001 fc04 	bl	8006a0c <VL53L0X_WrWord>
 8005204:	4603      	mov	r3, r0
 8005206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800520a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800520e:	2b00      	cmp	r3, #0
 8005210:	d16b      	bne.n	80052ea <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800521a:	e066      	b.n	80052ea <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800521c:	7afb      	ldrb	r3, [r7, #11]
 800521e:	2b04      	cmp	r3, #4
 8005220:	d160      	bne.n	80052e4 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8005222:	f107 0310 	add.w	r3, r7, #16
 8005226:	4619      	mov	r1, r3
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f7fd fa3d 	bl	80026a8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800522e:	2300      	movs	r3, #0
 8005230:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8005232:	7cfb      	ldrb	r3, [r7, #19]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01d      	beq.n	8005274 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005238:	f107 031b 	add.w	r3, r7, #27
 800523c:	461a      	mov	r2, r3
 800523e:	2100      	movs	r1, #0
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f7fd f925 	bl	8002490 <VL53L0X_GetVcselPulsePeriod>
 8005246:	4603      	mov	r3, r0
 8005248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800524c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10f      	bne.n	8005274 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8005254:	f107 0318 	add.w	r3, r7, #24
 8005258:	461a      	mov	r2, r3
 800525a:	2151      	movs	r1, #81	; 0x51
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f001 fc5d 	bl	8006b1c <VL53L0X_RdWord>
 8005262:	4603      	mov	r3, r0
 8005264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8005268:	8b3b      	ldrh	r3, [r7, #24]
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff fe06 	bl	8004e7c <VL53L0X_decode_timeout>
 8005270:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8005272:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005274:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005278:	2b00      	cmp	r3, #0
 800527a:	d109      	bne.n	8005290 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800527c:	f107 031b 	add.w	r3, r7, #27
 8005280:	461a      	mov	r2, r3
 8005282:	2101      	movs	r1, #1
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7fd f903 	bl	8002490 <VL53L0X_GetVcselPulsePeriod>
 800528a:	4603      	mov	r3, r0
 800528c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005290:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005294:	2b00      	cmp	r3, #0
 8005296:	d128      	bne.n	80052ea <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005298:	7efb      	ldrb	r3, [r7, #27]
 800529a:	461a      	mov	r2, r3
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f7ff fe02 	bl	8004ea8 <VL53L0X_calc_timeout_mclks>
 80052a4:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80052a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052a8:	6a3a      	ldr	r2, [r7, #32]
 80052aa:	4413      	add	r3, r2
 80052ac:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80052ae:	6a38      	ldr	r0, [r7, #32]
 80052b0:	f7ff fdb8 	bl	8004e24 <VL53L0X_encode_timeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80052b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d108      	bne.n	80052d2 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80052c0:	8bfb      	ldrh	r3, [r7, #30]
 80052c2:	461a      	mov	r2, r3
 80052c4:	2171      	movs	r1, #113	; 0x71
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f001 fba0 	bl	8006a0c <VL53L0X_WrWord>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80052d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d107      	bne.n	80052ea <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80052e2:	e002      	b.n	80052ea <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80052e4:	23fc      	movs	r3, #252	; 0xfc
 80052e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80052ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3728      	adds	r7, #40	; 0x28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b08a      	sub	sp, #40	; 0x28
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	460b      	mov	r3, r1
 8005300:	70fb      	strb	r3, [r7, #3]
 8005302:	4613      	mov	r3, r2
 8005304:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005306:	2300      	movs	r3, #0
 8005308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800530c:	230c      	movs	r3, #12
 800530e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8005312:	2312      	movs	r3, #18
 8005314:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8005318:	2308      	movs	r3, #8
 800531a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800531e:	230e      	movs	r3, #14
 8005320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8005328:	78bb      	ldrb	r3, [r7, #2]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005334:	23fc      	movs	r3, #252	; 0xfc
 8005336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800533a:	e020      	b.n	800537e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10d      	bne.n	800535e <VL53L0X_set_vcsel_pulse_period+0x68>
 8005342:	78ba      	ldrb	r2, [r7, #2]
 8005344:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005348:	429a      	cmp	r2, r3
 800534a:	d304      	bcc.n	8005356 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800534c:	78ba      	ldrb	r2, [r7, #2]
 800534e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005352:	429a      	cmp	r2, r3
 8005354:	d903      	bls.n	800535e <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005356:	23fc      	movs	r3, #252	; 0xfc
 8005358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800535c:	e00f      	b.n	800537e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800535e:	78fb      	ldrb	r3, [r7, #3]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d10c      	bne.n	800537e <VL53L0X_set_vcsel_pulse_period+0x88>
 8005364:	78ba      	ldrb	r2, [r7, #2]
 8005366:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800536a:	429a      	cmp	r2, r3
 800536c:	d304      	bcc.n	8005378 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800536e:	78ba      	ldrb	r2, [r7, #2]
 8005370:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005374:	429a      	cmp	r2, r3
 8005376:	d902      	bls.n	800537e <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005378:	23fc      	movs	r3, #252	; 0xfc
 800537a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800537e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8005386:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800538a:	e239      	b.n	8005800 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d150      	bne.n	8005434 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8005392:	78bb      	ldrb	r3, [r7, #2]
 8005394:	2b0c      	cmp	r3, #12
 8005396:	d110      	bne.n	80053ba <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8005398:	2218      	movs	r2, #24
 800539a:	2157      	movs	r1, #87	; 0x57
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f001 fb11 	bl	80069c4 <VL53L0X_WrByte>
 80053a2:	4603      	mov	r3, r0
 80053a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80053a8:	2208      	movs	r2, #8
 80053aa:	2156      	movs	r1, #86	; 0x56
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f001 fb09 	bl	80069c4 <VL53L0X_WrByte>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80053b8:	e17f      	b.n	80056ba <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80053ba:	78bb      	ldrb	r3, [r7, #2]
 80053bc:	2b0e      	cmp	r3, #14
 80053be:	d110      	bne.n	80053e2 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80053c0:	2230      	movs	r2, #48	; 0x30
 80053c2:	2157      	movs	r1, #87	; 0x57
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f001 fafd 	bl	80069c4 <VL53L0X_WrByte>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80053d0:	2208      	movs	r2, #8
 80053d2:	2156      	movs	r1, #86	; 0x56
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f001 faf5 	bl	80069c4 <VL53L0X_WrByte>
 80053da:	4603      	mov	r3, r0
 80053dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80053e0:	e16b      	b.n	80056ba <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80053e2:	78bb      	ldrb	r3, [r7, #2]
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d110      	bne.n	800540a <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80053e8:	2240      	movs	r2, #64	; 0x40
 80053ea:	2157      	movs	r1, #87	; 0x57
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f001 fae9 	bl	80069c4 <VL53L0X_WrByte>
 80053f2:	4603      	mov	r3, r0
 80053f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80053f8:	2208      	movs	r2, #8
 80053fa:	2156      	movs	r1, #86	; 0x56
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f001 fae1 	bl	80069c4 <VL53L0X_WrByte>
 8005402:	4603      	mov	r3, r0
 8005404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005408:	e157      	b.n	80056ba <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800540a:	78bb      	ldrb	r3, [r7, #2]
 800540c:	2b12      	cmp	r3, #18
 800540e:	f040 8154 	bne.w	80056ba <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8005412:	2250      	movs	r2, #80	; 0x50
 8005414:	2157      	movs	r1, #87	; 0x57
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f001 fad4 	bl	80069c4 <VL53L0X_WrByte>
 800541c:	4603      	mov	r3, r0
 800541e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8005422:	2208      	movs	r2, #8
 8005424:	2156      	movs	r1, #86	; 0x56
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f001 facc 	bl	80069c4 <VL53L0X_WrByte>
 800542c:	4603      	mov	r3, r0
 800542e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005432:	e142      	b.n	80056ba <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	2b01      	cmp	r3, #1
 8005438:	f040 813f 	bne.w	80056ba <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800543c:	78bb      	ldrb	r3, [r7, #2]
 800543e:	2b08      	cmp	r3, #8
 8005440:	d14c      	bne.n	80054dc <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8005442:	2210      	movs	r2, #16
 8005444:	2148      	movs	r1, #72	; 0x48
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f001 fabc 	bl	80069c4 <VL53L0X_WrByte>
 800544c:	4603      	mov	r3, r0
 800544e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8005452:	2208      	movs	r2, #8
 8005454:	2147      	movs	r1, #71	; 0x47
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f001 fab4 	bl	80069c4 <VL53L0X_WrByte>
 800545c:	4603      	mov	r3, r0
 800545e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8005462:	2202      	movs	r2, #2
 8005464:	2132      	movs	r1, #50	; 0x32
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f001 faac 	bl	80069c4 <VL53L0X_WrByte>
 800546c:	4603      	mov	r3, r0
 800546e:	461a      	mov	r2, r3
 8005470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005474:	4313      	orrs	r3, r2
 8005476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800547a:	220c      	movs	r2, #12
 800547c:	2130      	movs	r1, #48	; 0x30
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f001 faa0 	bl	80069c4 <VL53L0X_WrByte>
 8005484:	4603      	mov	r3, r0
 8005486:	461a      	mov	r2, r3
 8005488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800548c:	4313      	orrs	r3, r2
 800548e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005492:	2201      	movs	r2, #1
 8005494:	21ff      	movs	r1, #255	; 0xff
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f001 fa94 	bl	80069c4 <VL53L0X_WrByte>
 800549c:	4603      	mov	r3, r0
 800549e:	461a      	mov	r2, r3
 80054a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80054aa:	2230      	movs	r2, #48	; 0x30
 80054ac:	2130      	movs	r1, #48	; 0x30
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f001 fa88 	bl	80069c4 <VL53L0X_WrByte>
 80054b4:	4603      	mov	r3, r0
 80054b6:	461a      	mov	r2, r3
 80054b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054bc:	4313      	orrs	r3, r2
 80054be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80054c2:	2200      	movs	r2, #0
 80054c4:	21ff      	movs	r1, #255	; 0xff
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f001 fa7c 	bl	80069c4 <VL53L0X_WrByte>
 80054cc:	4603      	mov	r3, r0
 80054ce:	461a      	mov	r2, r3
 80054d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80054da:	e0ee      	b.n	80056ba <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80054dc:	78bb      	ldrb	r3, [r7, #2]
 80054de:	2b0a      	cmp	r3, #10
 80054e0:	d14c      	bne.n	800557c <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80054e2:	2228      	movs	r2, #40	; 0x28
 80054e4:	2148      	movs	r1, #72	; 0x48
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f001 fa6c 	bl	80069c4 <VL53L0X_WrByte>
 80054ec:	4603      	mov	r3, r0
 80054ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80054f2:	2208      	movs	r2, #8
 80054f4:	2147      	movs	r1, #71	; 0x47
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f001 fa64 	bl	80069c4 <VL53L0X_WrByte>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8005502:	2203      	movs	r2, #3
 8005504:	2132      	movs	r1, #50	; 0x32
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f001 fa5c 	bl	80069c4 <VL53L0X_WrByte>
 800550c:	4603      	mov	r3, r0
 800550e:	461a      	mov	r2, r3
 8005510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005514:	4313      	orrs	r3, r2
 8005516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800551a:	2209      	movs	r2, #9
 800551c:	2130      	movs	r1, #48	; 0x30
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f001 fa50 	bl	80069c4 <VL53L0X_WrByte>
 8005524:	4603      	mov	r3, r0
 8005526:	461a      	mov	r2, r3
 8005528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800552c:	4313      	orrs	r3, r2
 800552e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005532:	2201      	movs	r2, #1
 8005534:	21ff      	movs	r1, #255	; 0xff
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f001 fa44 	bl	80069c4 <VL53L0X_WrByte>
 800553c:	4603      	mov	r3, r0
 800553e:	461a      	mov	r2, r3
 8005540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005544:	4313      	orrs	r3, r2
 8005546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800554a:	2220      	movs	r2, #32
 800554c:	2130      	movs	r1, #48	; 0x30
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f001 fa38 	bl	80069c4 <VL53L0X_WrByte>
 8005554:	4603      	mov	r3, r0
 8005556:	461a      	mov	r2, r3
 8005558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800555c:	4313      	orrs	r3, r2
 800555e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005562:	2200      	movs	r2, #0
 8005564:	21ff      	movs	r1, #255	; 0xff
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f001 fa2c 	bl	80069c4 <VL53L0X_WrByte>
 800556c:	4603      	mov	r3, r0
 800556e:	461a      	mov	r2, r3
 8005570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005574:	4313      	orrs	r3, r2
 8005576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800557a:	e09e      	b.n	80056ba <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800557c:	78bb      	ldrb	r3, [r7, #2]
 800557e:	2b0c      	cmp	r3, #12
 8005580:	d14c      	bne.n	800561c <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8005582:	2238      	movs	r2, #56	; 0x38
 8005584:	2148      	movs	r1, #72	; 0x48
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f001 fa1c 	bl	80069c4 <VL53L0X_WrByte>
 800558c:	4603      	mov	r3, r0
 800558e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8005592:	2208      	movs	r2, #8
 8005594:	2147      	movs	r1, #71	; 0x47
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f001 fa14 	bl	80069c4 <VL53L0X_WrByte>
 800559c:	4603      	mov	r3, r0
 800559e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80055a2:	2203      	movs	r2, #3
 80055a4:	2132      	movs	r1, #50	; 0x32
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f001 fa0c 	bl	80069c4 <VL53L0X_WrByte>
 80055ac:	4603      	mov	r3, r0
 80055ae:	461a      	mov	r2, r3
 80055b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80055ba:	2208      	movs	r2, #8
 80055bc:	2130      	movs	r1, #48	; 0x30
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f001 fa00 	bl	80069c4 <VL53L0X_WrByte>
 80055c4:	4603      	mov	r3, r0
 80055c6:	461a      	mov	r2, r3
 80055c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80055d2:	2201      	movs	r2, #1
 80055d4:	21ff      	movs	r1, #255	; 0xff
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f001 f9f4 	bl	80069c4 <VL53L0X_WrByte>
 80055dc:	4603      	mov	r3, r0
 80055de:	461a      	mov	r2, r3
 80055e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80055ea:	2220      	movs	r2, #32
 80055ec:	2130      	movs	r1, #48	; 0x30
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f001 f9e8 	bl	80069c4 <VL53L0X_WrByte>
 80055f4:	4603      	mov	r3, r0
 80055f6:	461a      	mov	r2, r3
 80055f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005602:	2200      	movs	r2, #0
 8005604:	21ff      	movs	r1, #255	; 0xff
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f001 f9dc 	bl	80069c4 <VL53L0X_WrByte>
 800560c:	4603      	mov	r3, r0
 800560e:	461a      	mov	r2, r3
 8005610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005614:	4313      	orrs	r3, r2
 8005616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800561a:	e04e      	b.n	80056ba <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800561c:	78bb      	ldrb	r3, [r7, #2]
 800561e:	2b0e      	cmp	r3, #14
 8005620:	d14b      	bne.n	80056ba <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8005622:	2248      	movs	r2, #72	; 0x48
 8005624:	2148      	movs	r1, #72	; 0x48
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f001 f9cc 	bl	80069c4 <VL53L0X_WrByte>
 800562c:	4603      	mov	r3, r0
 800562e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8005632:	2208      	movs	r2, #8
 8005634:	2147      	movs	r1, #71	; 0x47
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f001 f9c4 	bl	80069c4 <VL53L0X_WrByte>
 800563c:	4603      	mov	r3, r0
 800563e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8005642:	2203      	movs	r2, #3
 8005644:	2132      	movs	r1, #50	; 0x32
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f001 f9bc 	bl	80069c4 <VL53L0X_WrByte>
 800564c:	4603      	mov	r3, r0
 800564e:	461a      	mov	r2, r3
 8005650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005654:	4313      	orrs	r3, r2
 8005656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800565a:	2207      	movs	r2, #7
 800565c:	2130      	movs	r1, #48	; 0x30
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f001 f9b0 	bl	80069c4 <VL53L0X_WrByte>
 8005664:	4603      	mov	r3, r0
 8005666:	461a      	mov	r2, r3
 8005668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800566c:	4313      	orrs	r3, r2
 800566e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005672:	2201      	movs	r2, #1
 8005674:	21ff      	movs	r1, #255	; 0xff
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f001 f9a4 	bl	80069c4 <VL53L0X_WrByte>
 800567c:	4603      	mov	r3, r0
 800567e:	461a      	mov	r2, r3
 8005680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005684:	4313      	orrs	r3, r2
 8005686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800568a:	2220      	movs	r2, #32
 800568c:	2130      	movs	r1, #48	; 0x30
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f001 f998 	bl	80069c4 <VL53L0X_WrByte>
 8005694:	4603      	mov	r3, r0
 8005696:	461a      	mov	r2, r3
 8005698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800569c:	4313      	orrs	r3, r2
 800569e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80056a2:	2200      	movs	r2, #0
 80056a4:	21ff      	movs	r1, #255	; 0xff
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f001 f98c 	bl	80069c4 <VL53L0X_WrByte>
 80056ac:	4603      	mov	r3, r0
 80056ae:	461a      	mov	r2, r3
 80056b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80056ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d17f      	bne.n	80057c2 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80056c2:	78bb      	ldrb	r3, [r7, #2]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fe fe38 	bl	800433a <VL53L0X_encode_vcsel_period>
 80056ca:	4603      	mov	r3, r0
 80056cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d045      	beq.n	8005766 <VL53L0X_set_vcsel_pulse_period+0x470>
 80056da:	e06e      	b.n	80057ba <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80056dc:	f107 0314 	add.w	r3, r7, #20
 80056e0:	461a      	mov	r2, r3
 80056e2:	2103      	movs	r1, #3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff fc33 	bl	8004f50 <get_sequence_step_timeout>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80056f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d109      	bne.n	800570c <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80056f8:	f107 0310 	add.w	r3, r7, #16
 80056fc:	461a      	mov	r2, r3
 80056fe:	2102      	movs	r1, #2
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff fc25 	bl	8004f50 <get_sequence_step_timeout>
 8005706:	4603      	mov	r3, r0
 8005708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800570c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8005714:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005718:	461a      	mov	r2, r3
 800571a:	2150      	movs	r1, #80	; 0x50
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 f951 	bl	80069c4 <VL53L0X_WrByte>
 8005722:	4603      	mov	r3, r0
 8005724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8005728:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800572c:	2b00      	cmp	r3, #0
 800572e:	d108      	bne.n	8005742 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	461a      	mov	r2, r3
 8005734:	2103      	movs	r1, #3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fceb 	bl	8005112 <set_sequence_step_timeout>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8005742:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005746:	2b00      	cmp	r3, #0
 8005748:	d108      	bne.n	800575c <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	461a      	mov	r2, r3
 800574e:	2102      	movs	r1, #2
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff fcde 	bl	8005112 <set_sequence_step_timeout>
 8005756:	4603      	mov	r3, r0
 8005758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	78ba      	ldrb	r2, [r7, #2]
 8005760:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8005764:	e02e      	b.n	80057c4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8005766:	f107 0318 	add.w	r3, r7, #24
 800576a:	461a      	mov	r2, r3
 800576c:	2104      	movs	r1, #4
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff fbee 	bl	8004f50 <get_sequence_step_timeout>
 8005774:	4603      	mov	r3, r0
 8005776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800577a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800577e:	2b00      	cmp	r3, #0
 8005780:	d109      	bne.n	8005796 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8005782:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005786:	461a      	mov	r2, r3
 8005788:	2170      	movs	r1, #112	; 0x70
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f001 f91a 	bl	80069c4 <VL53L0X_WrByte>
 8005790:	4603      	mov	r3, r0
 8005792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8005796:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800579a:	2b00      	cmp	r3, #0
 800579c:	d108      	bne.n	80057b0 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	461a      	mov	r2, r3
 80057a2:	2104      	movs	r1, #4
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff fcb4 	bl	8005112 <set_sequence_step_timeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	78ba      	ldrb	r2, [r7, #2]
 80057b4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80057b8:	e004      	b.n	80057c4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80057ba:	23fc      	movs	r3, #252	; 0xfc
 80057bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80057c0:	e000      	b.n	80057c4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80057c2:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80057c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d109      	bne.n	80057e0 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80057d2:	69f9      	ldr	r1, [r7, #28]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7fc fe1d 	bl	8002414 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80057da:	4603      	mov	r3, r0
 80057dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80057e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d109      	bne.n	80057fc <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80057e8:	f107 010f 	add.w	r1, r7, #15
 80057ec:	2301      	movs	r3, #1
 80057ee:	2200      	movs	r2, #0
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7fe fcbd 	bl	8004170 <VL53L0X_perform_phase_calibration>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80057fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005800:	4618      	mov	r0, r3
 8005802:	3728      	adds	r7, #40	; 0x28
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	460b      	mov	r3, r1
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005816:	2300      	movs	r3, #0
 8005818:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800581a:	7afb      	ldrb	r3, [r7, #11]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8005820:	2b01      	cmp	r3, #1
 8005822:	d00a      	beq.n	800583a <VL53L0X_get_vcsel_pulse_period+0x32>
 8005824:	e013      	b.n	800584e <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005826:	f107 0316 	add.w	r3, r7, #22
 800582a:	461a      	mov	r2, r3
 800582c:	2150      	movs	r1, #80	; 0x50
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f001 f94a 	bl	8006ac8 <VL53L0X_RdByte>
 8005834:	4603      	mov	r3, r0
 8005836:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005838:	e00b      	b.n	8005852 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800583a:	f107 0316 	add.w	r3, r7, #22
 800583e:	461a      	mov	r2, r3
 8005840:	2170      	movs	r1, #112	; 0x70
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f001 f940 	bl	8006ac8 <VL53L0X_RdByte>
 8005848:	4603      	mov	r3, r0
 800584a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800584c:	e001      	b.n	8005852 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800584e:	23fc      	movs	r3, #252	; 0xfc
 8005850:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005852:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d107      	bne.n	800586a <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800585a:	7dbb      	ldrb	r3, [r7, #22]
 800585c:	4618      	mov	r0, r3
 800585e:	f7fe fd59 	bl	8004314 <VL53L0X_decode_vcsel_period>
 8005862:	4603      	mov	r3, r0
 8005864:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	701a      	strb	r2, [r3, #0]

	return Status;
 800586a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b092      	sub	sp, #72	; 0x48
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005880:	2300      	movs	r3, #0
 8005882:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005886:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800588a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800588c:	f240 7376 	movw	r3, #1910	; 0x776
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8005892:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005896:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8005898:	f44f 7325 	mov.w	r3, #660	; 0x294
 800589c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800589e:	f240 234e 	movw	r3, #590	; 0x24e
 80058a2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80058a4:	f240 23b2 	movw	r3, #690	; 0x2b2
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80058aa:	f44f 7325 	mov.w	r3, #660	; 0x294
 80058ae:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80058b0:	f240 2326 	movw	r3, #550	; 0x226
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80058ba:	f644 6320 	movw	r3, #20000	; 0x4e20
 80058be:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d205      	bcs.n	80058d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80058cc:	23fc      	movs	r3, #252	; 0xfc
 80058ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80058d2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80058d6:	e0aa      	b.n	8005a2e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80058d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80058e4:	f107 0314 	add.w	r3, r7, #20
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fc fedc 	bl	80026a8 <VL53L0X_GetSequenceStepEnables>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80058f6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d15b      	bne.n	80059b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80058fe:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8005900:	2b00      	cmp	r3, #0
 8005902:	d105      	bne.n	8005910 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8005904:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800590a:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800590c:	2b00      	cmp	r3, #0
 800590e:	d052      	beq.n	80059b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8005910:	f107 0310 	add.w	r3, r7, #16
 8005914:	461a      	mov	r2, r3
 8005916:	2102      	movs	r1, #2
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff fb19 	bl	8004f50 <get_sequence_step_timeout>
 800591e:	4603      	mov	r3, r0
 8005920:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8005924:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800592c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005930:	e07d      	b.n	8005a2e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8005932:	7d3b      	ldrb	r3, [r7, #20]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00f      	beq.n	8005958 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8005938:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800593a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593c:	4413      	add	r3, r2
 800593e:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005944:	429a      	cmp	r2, r3
 8005946:	d204      	bcs.n	8005952 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8005948:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	643b      	str	r3, [r7, #64]	; 0x40
 8005950:	e002      	b.n	8005958 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005952:	23fc      	movs	r3, #252	; 0xfc
 8005954:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8005958:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8005960:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005964:	e063      	b.n	8005a2e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8005966:	7dbb      	ldrb	r3, [r7, #22]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d011      	beq.n	8005990 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005970:	4413      	add	r3, r2
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005976:	69fa      	ldr	r2, [r7, #28]
 8005978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800597a:	429a      	cmp	r2, r3
 800597c:	d204      	bcs.n	8005988 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800597e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	643b      	str	r3, [r7, #64]	; 0x40
 8005986:	e016      	b.n	80059b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005988:	23fc      	movs	r3, #252	; 0xfc
 800598a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800598e:	e012      	b.n	80059b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8005990:	7d7b      	ldrb	r3, [r7, #21]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00f      	beq.n	80059b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800599a:	4413      	add	r3, r2
 800599c:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d204      	bcs.n	80059b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80059a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	643b      	str	r3, [r7, #64]	; 0x40
 80059ae:	e002      	b.n	80059b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80059b0:	23fc      	movs	r3, #252	; 0xfc
 80059b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80059b6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80059be:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80059c2:	e034      	b.n	8005a2e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d019      	beq.n	80059fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80059ca:	f107 030c 	add.w	r3, r7, #12
 80059ce:	461a      	mov	r2, r3
 80059d0:	2103      	movs	r1, #3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff fabc 	bl	8004f50 <get_sequence_step_timeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059e2:	4413      	add	r3, r2
 80059e4:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80059e6:	69fa      	ldr	r2, [r7, #28]
 80059e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d204      	bcs.n	80059f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80059ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	643b      	str	r3, [r7, #64]	; 0x40
 80059f6:	e002      	b.n	80059fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80059f8:	23fc      	movs	r3, #252	; 0xfc
 80059fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80059fe:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d111      	bne.n	8005a2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8005a06:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00e      	beq.n	8005a2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8005a0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8005a14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a16:	2104      	movs	r1, #4
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff fb7a 	bl	8005112 <set_sequence_step_timeout>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005a2a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3748      	adds	r7, #72	; 0x48
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b090      	sub	sp, #64	; 0x40
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a40:	2300      	movs	r3, #0
 8005a42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005a46:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005a4a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8005a4c:	f240 7376 	movw	r3, #1910	; 0x776
 8005a50:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8005a52:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005a56:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8005a58:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005a5c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8005a5e:	f240 234e 	movw	r3, #590	; 0x24e
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8005a64:	f240 23b2 	movw	r3, #690	; 0x2b2
 8005a68:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8005a6a:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005a70:	f240 2326 	movw	r3, #550	; 0x226
 8005a74:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8005a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7e:	441a      	add	r2, r3
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005a84:	f107 0318 	add.w	r3, r7, #24
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fc fe0c 	bl	80026a8 <VL53L0X_GetSequenceStepEnables>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8005a96:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8005a9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005aa2:	e075      	b.n	8005b90 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8005aa4:	7e3b      	ldrb	r3, [r7, #24]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d105      	bne.n	8005ab6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8005aaa:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d102      	bne.n	8005ab6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8005ab0:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d030      	beq.n	8005b18 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8005ab6:	f107 0310 	add.w	r3, r7, #16
 8005aba:	461a      	mov	r2, r3
 8005abc:	2102      	movs	r1, #2
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff fa46 	bl	8004f50 <get_sequence_step_timeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8005aca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d122      	bne.n	8005b18 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8005ad2:	7e3b      	ldrb	r3, [r7, #24]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d007      	beq.n	8005ae8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8005adc:	6939      	ldr	r1, [r7, #16]
 8005ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae0:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005ae2:	441a      	add	r2, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8005ae8:	7ebb      	ldrb	r3, [r7, #26]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d009      	beq.n	8005b02 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8005af2:	6939      	ldr	r1, [r7, #16]
 8005af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af6:	440b      	add	r3, r1
 8005af8:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005afa:	441a      	add	r2, r3
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e00a      	b.n	8005b18 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8005b02:	7e7b      	ldrb	r3, [r7, #25]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d007      	beq.n	8005b18 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8005b0c:	6939      	ldr	r1, [r7, #16]
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005b12:	441a      	add	r2, r3
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b18:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d114      	bne.n	8005b4a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8005b20:	7efb      	ldrb	r3, [r7, #27]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d011      	beq.n	8005b4a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8005b26:	f107 030c 	add.w	r3, r7, #12
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2103      	movs	r1, #3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7ff fa0e 	bl	8004f50 <get_sequence_step_timeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8005b3e:	68f9      	ldr	r1, [r7, #12]
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005b44:	441a      	add	r2, r3
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d114      	bne.n	8005b7c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8005b52:	7f3b      	ldrb	r3, [r7, #28]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d011      	beq.n	8005b7c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8005b58:	f107 0314 	add.w	r3, r7, #20
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2104      	movs	r1, #4
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff f9f5 	bl	8004f50 <get_sequence_step_timeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8005b70:	6979      	ldr	r1, [r7, #20]
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005b76:	441a      	add	r2, r3
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d103      	bne.n	8005b8c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005b8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3740      	adds	r7, #64	; 0x40
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8005baa:	e0c6      	b.n	8005d3a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	74fb      	strb	r3, [r7, #19]
		Index++;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8005bbc:	7cfb      	ldrb	r3, [r7, #19]
 8005bbe:	2bff      	cmp	r3, #255	; 0xff
 8005bc0:	f040 808d 	bne.w	8005cde <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	4413      	add	r3, r2
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	747b      	strb	r3, [r7, #17]
			Index++;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8005bd4:	7c7b      	ldrb	r3, [r7, #17]
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d87e      	bhi.n	8005cd8 <VL53L0X_load_tuning_settings+0x140>
 8005bda:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <VL53L0X_load_tuning_settings+0x48>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005bf1 	.word	0x08005bf1
 8005be4:	08005c2b 	.word	0x08005c2b
 8005be8:	08005c65 	.word	0x08005c65
 8005bec:	08005c9f 	.word	0x08005c9f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	743b      	strb	r3, [r7, #16]
				Index++;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	4413      	add	r3, r2
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005c10:	7c3b      	ldrb	r3, [r7, #16]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	021b      	lsls	r3, r3, #8
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	89ba      	ldrh	r2, [r7, #12]
 8005c24:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8005c28:	e087      	b.n	8005d3a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	4413      	add	r3, r2
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	743b      	strb	r3, [r7, #16]
				Index++;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	3301      	adds	r3, #1
 8005c38:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	4413      	add	r3, r2
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	3301      	adds	r3, #1
 8005c48:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005c4a:	7c3b      	ldrb	r3, [r7, #16]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	4413      	add	r3, r2
 8005c58:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	89ba      	ldrh	r2, [r7, #12]
 8005c5e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8005c62:	e06a      	b.n	8005d3a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	4413      	add	r3, r2
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	743b      	strb	r3, [r7, #16]
				Index++;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	3301      	adds	r3, #1
 8005c72:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	4413      	add	r3, r2
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	3301      	adds	r3, #1
 8005c82:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005c84:	7c3b      	ldrb	r3, [r7, #16]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	021b      	lsls	r3, r3, #8
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	4413      	add	r3, r2
 8005c92:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	89ba      	ldrh	r2, [r7, #12]
 8005c98:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8005c9c:	e04d      	b.n	8005d3a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	743b      	strb	r3, [r7, #16]
				Index++;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	3301      	adds	r3, #1
 8005cac:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005cbe:	7c3b      	ldrb	r3, [r7, #16]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	4413      	add	r3, r2
 8005ccc:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	89ba      	ldrh	r2, [r7, #12]
 8005cd2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8005cd6:	e030      	b.n	8005d3a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005cd8:	23fc      	movs	r3, #252	; 0xfc
 8005cda:	77fb      	strb	r3, [r7, #31]
 8005cdc:	e02d      	b.n	8005d3a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8005cde:	7cfb      	ldrb	r3, [r7, #19]
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d828      	bhi.n	8005d36 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	4413      	add	r3, r2
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	74bb      	strb	r3, [r7, #18]
			Index++;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61bb      	str	r3, [r7, #24]
 8005cf8:	e00f      	b.n	8005d1a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	4413      	add	r3, r2
 8005d00:	7819      	ldrb	r1, [r3, #0]
 8005d02:	f107 0208 	add.w	r2, r7, #8
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	4413      	add	r3, r2
 8005d0a:	460a      	mov	r2, r1
 8005d0c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	3301      	adds	r3, #1
 8005d12:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	3301      	adds	r3, #1
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	7cfb      	ldrb	r3, [r7, #19]
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	dbeb      	blt.n	8005cfa <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8005d22:	7cfb      	ldrb	r3, [r7, #19]
 8005d24:	f107 0208 	add.w	r2, r7, #8
 8005d28:	7cb9      	ldrb	r1, [r7, #18]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fdee 	bl	800690c <VL53L0X_WriteMulti>
 8005d30:	4603      	mov	r3, r0
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	e001      	b.n	8005d3a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005d36:	23fc      	movs	r3, #252	; 0xfc
 8005d38:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	4413      	add	r3, r2
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d004      	beq.n	8005d50 <VL53L0X_load_tuning_settings+0x1b8>
 8005d46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f43f af2e 	beq.w	8005bac <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d50:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3720      	adds	r7, #32
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8005d72:	f107 0313 	add.w	r3, r7, #19
 8005d76:	4619      	mov	r1, r3
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f7fc fd21 	bl	80027c0 <VL53L0X_GetXTalkCompensationEnable>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8005d82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d111      	bne.n	8005dae <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8005d8a:	7cfb      	ldrb	r3, [r7, #19]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00e      	beq.n	8005dae <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	8a9b      	ldrh	r3, [r3, #20]
 8005d9a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	fb02 f303 	mul.w	r3, r2, r3
 8005da2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	3380      	adds	r3, #128	; 0x80
 8005da8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8005dae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3720      	adds	r7, #32
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b086      	sub	sp, #24
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8005dd2:	f107 0310 	add.w	r3, r7, #16
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7ff ffbe 	bl	8005d5c <VL53L0X_get_total_xtalk_rate>
 8005de0:	4603      	mov	r3, r0
 8005de2:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8005de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d105      	bne.n	8005df8 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	441a      	add	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	601a      	str	r2, [r3, #0]

	return Status;
 8005df8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b09a      	sub	sp, #104	; 0x68
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8005e12:	2312      	movs	r3, #18
 8005e14:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8005e16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e1a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8005e1c:	2342      	movs	r3, #66	; 0x42
 8005e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8005e20:	2306      	movs	r3, #6
 8005e22:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8005e24:	2307      	movs	r3, #7
 8005e26:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8005e34:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8005e3c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8005e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e42:	fb02 f303 	mul.w	r3, r2, r3
 8005e46:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8005e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4a:	3380      	adds	r3, #128	; 0x80
 8005e4c:	0a1b      	lsrs	r3, r3, #8
 8005e4e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8005e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e54:	fb02 f303 	mul.w	r3, r2, r3
 8005e58:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d01a      	beq.n	8005e9a <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	029b      	lsls	r3, r3, #10
 8005e68:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8005e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e70:	4413      	add	r3, r2
 8005e72:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8005e74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8005e7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005e80:	4613      	mov	r3, r2
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	4413      	add	r3, r2
 8005e86:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8005e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e8a:	fb03 f303 	mul.w	r3, r3, r3
 8005e8e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8005e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005e96:	0c1b      	lsrs	r3, r3, #16
 8005e98:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8005ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005eaa:	0c1b      	lsrs	r3, r3, #16
 8005eac:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8005eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb0:	fb03 f303 	mul.w	r3, r3, r3
 8005eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8005eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005ebc:	0c1b      	lsrs	r3, r3, #16
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8005ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec2:	085a      	lsrs	r2, r3, #1
 8005ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec6:	441a      	add	r2, r3
 8005ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ece:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ed4:	fb02 f303 	mul.w	r3, r2, r3
 8005ed8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee0:	d302      	bcc.n	8005ee8 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8005ee2:	4b54      	ldr	r3, [pc, #336]	; (8006034 <VL53L0X_calc_dmax+0x230>)
 8005ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ee6:	e015      	b.n	8005f14 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8005ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eea:	085a      	lsrs	r2, r3, #1
 8005eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eee:	441a      	add	r2, r3
 8005ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef6:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8005ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005efa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005efc:	fb02 f303 	mul.w	r3, r2, r3
 8005f00:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8005f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f04:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8005f0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f0e:	fb03 f303 	mul.w	r3, r3, r3
 8005f12:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8005f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f16:	039b      	lsls	r3, r3, #14
 8005f18:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005f1c:	4a46      	ldr	r2, [pc, #280]	; (8006038 <VL53L0X_calc_dmax+0x234>)
 8005f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f22:	099b      	lsrs	r3, r3, #6
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	fb03 f303 	mul.w	r3, r3, r3
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8005f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f30:	fb03 f303 	mul.w	r3, r3, r3
 8005f34:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	3308      	adds	r3, #8
 8005f3a:	091b      	lsrs	r3, r3, #4
 8005f3c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8005f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f48:	4613      	mov	r3, r2
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	4413      	add	r3, r2
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005f58:	0b9b      	lsrs	r3, r3, #14
 8005f5a:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8005f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f60:	4413      	add	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8005f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f66:	085b      	lsrs	r3, r3, #1
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f76:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	039b      	lsls	r3, r3, #14
 8005f7c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	085b      	lsrs	r3, r3, #1
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	4413      	add	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f90:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f96:	fb02 f303 	mul.w	r3, r2, r3
 8005f9a:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005fa2:	4a25      	ldr	r2, [pc, #148]	; (8006038 <VL53L0X_calc_dmax+0x234>)
 8005fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa8:	099b      	lsrs	r3, r3, #6
 8005faa:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005fb8:	4a1f      	ldr	r2, [pc, #124]	; (8006038 <VL53L0X_calc_dmax+0x234>)
 8005fba:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbe:	099b      	lsrs	r3, r3, #6
 8005fc0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8005fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc4:	3380      	adds	r3, #128	; 0x80
 8005fc6:	0a1b      	lsrs	r3, r3, #8
 8005fc8:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d008      	beq.n	8005fe2 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	085a      	lsrs	r2, r3, #1
 8005fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd6:	441a      	add	r2, r3
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fde:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fe0:	e001      	b.n	8005fe6 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8005fe6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005fe8:	f7fe f9ba 	bl	8004360 <VL53L0X_isqrt>
 8005fec:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d008      	beq.n	8006006 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	085a      	lsrs	r2, r3, #1
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffa:	441a      	add	r2, r3
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006002:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006004:	e001      	b.n	800600a <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800600a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800600c:	f7fe f9a8 	bl	8004360 <VL53L0X_isqrt>
 8006010:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8006012:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800601c:	429a      	cmp	r2, r3
 800601e:	d902      	bls.n	8006026 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8006020:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006022:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006024:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8006026:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800602a:	4618      	mov	r0, r3
 800602c:	3768      	adds	r7, #104	; 0x68
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	fff00000 	.word	0xfff00000
 8006038:	10624dd3 	.word	0x10624dd3

0800603c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b0b4      	sub	sp, #208	; 0xd0
 8006040:	af04      	add	r7, sp, #16
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800604a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800604e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8006052:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006056:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800605a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800605e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8006062:	f241 235c 	movw	r3, #4700	; 0x125c
 8006066:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800606a:	4b9e      	ldr	r3, [pc, #632]	; (80062e4 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800606c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8006070:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006074:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8006076:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800607a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800607e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006082:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8006084:	4b98      	ldr	r3, [pc, #608]	; (80062e8 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8006086:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8006088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800608c:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800608e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8006092:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8006094:	f240 6377 	movw	r3, #1655	; 0x677
 8006098:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800609a:	2300      	movs	r3, #0
 800609c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060ae:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80060b2:	0c1b      	lsrs	r3, r3, #16
 80060b4:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80060bc:	f107 0310 	add.w	r3, r7, #16
 80060c0:	461a      	mov	r2, r3
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f7ff fe78 	bl	8005dba <VL53L0X_get_total_signal_rate>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80060d0:	f107 0314 	add.w	r3, r7, #20
 80060d4:	461a      	mov	r2, r3
 80060d6:	68b9      	ldr	r1, [r7, #8]
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff fe3f 	bl	8005d5c <VL53L0X_get_total_xtalk_rate>
 80060de:	4603      	mov	r3, r0
 80060e0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060ea:	fb02 f303 	mul.w	r3, r2, r3
 80060ee:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80060f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060f2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80060f6:	0c1b      	lsrs	r3, r3, #16
 80060f8:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006100:	fb02 f303 	mul.w	r3, r2, r3
 8006104:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8006108:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800610c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800610e:	429a      	cmp	r2, r3
 8006110:	d902      	bls.n	8006118 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8006112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006114:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8006118:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800611c:	2b00      	cmp	r3, #0
 800611e:	d168      	bne.n	80061f2 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006126:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8006130:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8006134:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006138:	461a      	mov	r2, r3
 800613a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f7fe feb2 	bl	8004ea8 <VL53L0X_calc_timeout_mclks>
 8006144:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800614c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8006156:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800615a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800615e:	461a      	mov	r2, r3
 8006160:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f7fe fe9f 	bl	8004ea8 <VL53L0X_calc_timeout_mclks>
 800616a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800616c:	2303      	movs	r3, #3
 800616e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8006172:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006176:	2b08      	cmp	r3, #8
 8006178:	d102      	bne.n	8006180 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800617a:	2302      	movs	r3, #2
 800617c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8006180:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006184:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8006186:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800618a:	fb02 f303 	mul.w	r3, r2, r3
 800618e:	02db      	lsls	r3, r3, #11
 8006190:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006194:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006198:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800619c:	4a53      	ldr	r2, [pc, #332]	; (80062ec <VL53L0X_calc_sigma_estimate+0x2b0>)
 800619e:	fba2 2303 	umull	r2, r3, r2, r3
 80061a2:	099b      	lsrs	r3, r3, #6
 80061a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80061a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061ae:	fb02 f303 	mul.w	r3, r2, r3
 80061b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80061b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061ba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80061be:	4a4b      	ldr	r2, [pc, #300]	; (80062ec <VL53L0X_calc_sigma_estimate+0x2b0>)
 80061c0:	fba2 2303 	umull	r2, r3, r2, r3
 80061c4:	099b      	lsrs	r3, r3, #6
 80061c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	3380      	adds	r3, #128	; 0x80
 80061ce:	0a1b      	lsrs	r3, r3, #8
 80061d0:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061d8:	fb02 f303 	mul.w	r3, r2, r3
 80061dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80061e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061e4:	3380      	adds	r3, #128	; 0x80
 80061e6:	0a1b      	lsrs	r3, r3, #8
 80061e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	021b      	lsls	r3, r3, #8
 80061f0:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80061f2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 80061fa:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80061fe:	e15e      	b.n	80064be <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8006200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10c      	bne.n	8006220 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800620c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006214:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	e14c      	b.n	80064ba <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8006220:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006224:	2b00      	cmp	r3, #0
 8006226:	d102      	bne.n	800622e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8006228:	2301      	movs	r3, #1
 800622a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800622e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006232:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8006234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006236:	041a      	lsls	r2, r3, #16
 8006238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800623a:	fbb2 f3f3 	udiv	r3, r2, r3
 800623e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8006242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006248:	429a      	cmp	r2, r3
 800624a:	d902      	bls.n	8006252 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800624c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800624e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8006252:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006256:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800625a:	fb02 f303 	mul.w	r3, r2, r3
 800625e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8006262:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006266:	4613      	mov	r3, r2
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	4413      	add	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe f876 	bl	8004360 <VL53L0X_isqrt>
 8006274:	4603      	mov	r3, r0
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	891b      	ldrh	r3, [r3, #8]
 800627e:	461a      	mov	r2, r3
 8006280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006282:	fb02 f303 	mul.w	r3, r2, r3
 8006286:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800628a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800628c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006290:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006292:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8006294:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006298:	4a14      	ldr	r2, [pc, #80]	; (80062ec <VL53L0X_calc_sigma_estimate+0x2b0>)
 800629a:	fba2 2303 	umull	r2, r3, r2, r3
 800629e:	099b      	lsrs	r3, r3, #6
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80062a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062a4:	041b      	lsls	r3, r3, #16
 80062a6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80062aa:	4a10      	ldr	r2, [pc, #64]	; (80062ec <VL53L0X_calc_sigma_estimate+0x2b0>)
 80062ac:	fba2 2303 	umull	r2, r3, r2, r3
 80062b0:	099b      	lsrs	r3, r3, #6
 80062b2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80062b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b6:	021b      	lsls	r3, r3, #8
 80062b8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80062ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	bfb8      	it	lt
 80062c6:	425b      	neglt	r3, r3
 80062c8:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80062ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062cc:	021b      	lsls	r3, r3, #8
 80062ce:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	7e1b      	ldrb	r3, [r3, #24]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00b      	beq.n	80062f0 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80062d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062e0:	e033      	b.n	800634a <VL53L0X_calc_sigma_estimate+0x30e>
 80062e2:	bf00      	nop
 80062e4:	028f87ae 	.word	0x028f87ae
 80062e8:	0006999a 	.word	0x0006999a
 80062ec:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80062f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80062fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006300:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8006304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006308:	fb02 f303 	mul.w	r3, r2, r3
 800630c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8006310:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006314:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006316:	4413      	add	r3, r2
 8006318:	0c1b      	lsrs	r3, r3, #16
 800631a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800631e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006322:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800632a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800632e:	085b      	lsrs	r3, r3, #1
 8006330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8006334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006338:	fb03 f303 	mul.w	r3, r3, r3
 800633c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8006340:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006344:	0b9b      	lsrs	r3, r3, #14
 8006346:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800634a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800634e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006350:	fb02 f303 	mul.w	r3, r2, r3
 8006354:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800635c:	0c1b      	lsrs	r3, r3, #16
 800635e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	fb03 f303 	mul.w	r3, r3, r3
 8006366:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8006368:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800636c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006370:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006374:	0c1b      	lsrs	r3, r3, #16
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	fb03 f303 	mul.w	r3, r3, r3
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8006380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006384:	4413      	add	r3, r2
 8006386:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8006388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800638a:	f7fd ffe9 	bl	8004360 <VL53L0X_isqrt>
 800638e:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	041b      	lsls	r3, r3, #16
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	3332      	adds	r3, #50	; 0x32
 800639a:	4a4b      	ldr	r2, [pc, #300]	; (80064c8 <VL53L0X_calc_sigma_estimate+0x48c>)
 800639c:	fba2 2303 	umull	r2, r3, r2, r3
 80063a0:	095a      	lsrs	r2, r3, #5
 80063a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80063ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063b0:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80063b4:	fb02 f303 	mul.w	r3, r2, r3
 80063b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80063bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063c0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80063c4:	3308      	adds	r3, #8
 80063c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80063ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063ce:	4a3f      	ldr	r2, [pc, #252]	; (80064cc <VL53L0X_calc_sigma_estimate+0x490>)
 80063d0:	fba2 2303 	umull	r2, r3, r2, r3
 80063d4:	0b5b      	lsrs	r3, r3, #13
 80063d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80063da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d902      	bls.n	80063ea <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80063e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80063ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80063f8:	4a35      	ldr	r2, [pc, #212]	; (80064d0 <VL53L0X_calc_sigma_estimate+0x494>)
 80063fa:	fba2 2303 	umull	r2, r3, r2, r3
 80063fe:	099b      	lsrs	r3, r3, #6
 8006400:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8006406:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800640a:	441a      	add	r2, r3
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006412:	4618      	mov	r0, r3
 8006414:	f7fd ffa4 	bl	8004360 <VL53L0X_isqrt>
 8006418:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	021b      	lsls	r3, r3, #8
 800641e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006426:	4a2a      	ldr	r2, [pc, #168]	; (80064d0 <VL53L0X_calc_sigma_estimate+0x494>)
 8006428:	fba2 2303 	umull	r2, r3, r2, r3
 800642c:	099b      	lsrs	r3, r3, #6
 800642e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8006430:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006434:	fb03 f303 	mul.w	r3, r3, r3
 8006438:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	fb03 f303 	mul.w	r3, r3, r3
 8006440:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8006442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006446:	4413      	add	r3, r2
 8006448:	4618      	mov	r0, r3
 800644a:	f7fd ff89 	bl	8004360 <VL53L0X_isqrt>
 800644e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006456:	fb02 f303 	mul.w	r3, r2, r3
 800645a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800645e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006460:	2b00      	cmp	r3, #0
 8006462:	d009      	beq.n	8006478 <VL53L0X_calc_sigma_estimate+0x43c>
 8006464:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <VL53L0X_calc_sigma_estimate+0x43c>
 800646c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006470:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006474:	429a      	cmp	r2, r3
 8006476:	d903      	bls.n	8006480 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8006478:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800647c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006486:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8006492:	6939      	ldr	r1, [r7, #16]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	9303      	str	r3, [sp, #12]
 8006498:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800649c:	9302      	str	r3, [sp, #8]
 800649e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064a2:	9301      	str	r3, [sp, #4]
 80064a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f7ff fca8 	bl	8005e04 <VL53L0X_calc_dmax>
 80064b4:	4603      	mov	r3, r0
 80064b6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80064ba:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80064be:	4618      	mov	r0, r3
 80064c0:	37c0      	adds	r7, #192	; 0xc0
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	51eb851f 	.word	0x51eb851f
 80064cc:	d1b71759 	.word	0xd1b71759
 80064d0:	10624dd3 	.word	0x10624dd3

080064d4 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b090      	sub	sp, #64	; 0x40
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	607a      	str	r2, [r7, #4]
 80064de:	461a      	mov	r2, r3
 80064e0:	460b      	mov	r3, r1
 80064e2:	72fb      	strb	r3, [r7, #11]
 80064e4:	4613      	mov	r3, r2
 80064e6:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064e8:	2300      	movs	r3, #0
 80064ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800650c:	2300      	movs	r3, #0
 800650e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8006518:	2300      	movs	r3, #0
 800651a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8006522:	2300      	movs	r3, #0
 8006524:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8006526:	7afb      	ldrb	r3, [r7, #11]
 8006528:	10db      	asrs	r3, r3, #3
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f003 030f 	and.w	r3, r3, #15
 8006530:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8006534:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006538:	2b00      	cmp	r3, #0
 800653a:	d017      	beq.n	800656c <VL53L0X_get_pal_range_status+0x98>
 800653c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006540:	2b05      	cmp	r3, #5
 8006542:	d013      	beq.n	800656c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8006544:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006548:	2b07      	cmp	r3, #7
 800654a:	d00f      	beq.n	800656c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800654c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006550:	2b0c      	cmp	r3, #12
 8006552:	d00b      	beq.n	800656c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8006554:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006558:	2b0d      	cmp	r3, #13
 800655a:	d007      	beq.n	800656c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800655c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006560:	2b0e      	cmp	r3, #14
 8006562:	d003      	beq.n	800656c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8006564:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006568:	2b0f      	cmp	r3, #15
 800656a:	d103      	bne.n	8006574 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800656c:	2301      	movs	r3, #1
 800656e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8006572:	e002      	b.n	800657a <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8006574:	2300      	movs	r3, #0
 8006576:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800657a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800657e:	2b00      	cmp	r3, #0
 8006580:	d109      	bne.n	8006596 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006582:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006586:	461a      	mov	r2, r3
 8006588:	2100      	movs	r1, #0
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f7fc f9ec 	bl	8002968 <VL53L0X_GetLimitCheckEnable>
 8006590:	4603      	mov	r3, r0
 8006592:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8006596:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800659a:	2b00      	cmp	r3, #0
 800659c:	d02e      	beq.n	80065fc <VL53L0X_get_pal_range_status+0x128>
 800659e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d12a      	bne.n	80065fc <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80065a6:	f107 0310 	add.w	r3, r7, #16
 80065aa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80065ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f7ff fd43 	bl	800603c <VL53L0X_calc_sigma_estimate>
 80065b6:	4603      	mov	r3, r0
 80065b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80065bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d103      	bne.n	80065cc <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ca:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80065cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d113      	bne.n	80065fc <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80065d4:	f107 0320 	add.w	r3, r7, #32
 80065d8:	461a      	mov	r2, r3
 80065da:	2100      	movs	r1, #0
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7fc fa49 	bl	8002a74 <VL53L0X_GetLimitCheckValue>
 80065e2:	4603      	mov	r3, r0
 80065e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d006      	beq.n	80065fc <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 80065ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f0:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d902      	bls.n	80065fc <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80065fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006600:	2b00      	cmp	r3, #0
 8006602:	d109      	bne.n	8006618 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006604:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8006608:	461a      	mov	r2, r3
 800660a:	2102      	movs	r1, #2
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f7fc f9ab 	bl	8002968 <VL53L0X_GetLimitCheckEnable>
 8006612:	4603      	mov	r3, r0
 8006614:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8006618:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800661c:	2b00      	cmp	r3, #0
 800661e:	d044      	beq.n	80066aa <VL53L0X_get_pal_range_status+0x1d6>
 8006620:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006624:	2b00      	cmp	r3, #0
 8006626:	d140      	bne.n	80066aa <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8006628:	f107 031c 	add.w	r3, r7, #28
 800662c:	461a      	mov	r2, r3
 800662e:	2102      	movs	r1, #2
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f7fc fa1f 	bl	8002a74 <VL53L0X_GetLimitCheckValue>
 8006636:	4603      	mov	r3, r0
 8006638:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800663c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006640:	2b00      	cmp	r3, #0
 8006642:	d107      	bne.n	8006654 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006644:	2201      	movs	r2, #1
 8006646:	21ff      	movs	r1, #255	; 0xff
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f9bb 	bl	80069c4 <VL53L0X_WrByte>
 800664e:	4603      	mov	r3, r0
 8006650:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8006654:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006658:	2b00      	cmp	r3, #0
 800665a:	d109      	bne.n	8006670 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800665c:	f107 0316 	add.w	r3, r7, #22
 8006660:	461a      	mov	r2, r3
 8006662:	21b6      	movs	r1, #182	; 0xb6
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 fa59 	bl	8006b1c <VL53L0X_RdWord>
 800666a:	4603      	mov	r3, r0
 800666c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8006670:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006674:	2b00      	cmp	r3, #0
 8006676:	d107      	bne.n	8006688 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006678:	2200      	movs	r2, #0
 800667a:	21ff      	movs	r1, #255	; 0xff
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 f9a1 	bl	80069c4 <VL53L0X_WrByte>
 8006682:	4603      	mov	r3, r0
 8006684:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8006688:	8afb      	ldrh	r3, [r7, #22]
 800668a:	025b      	lsls	r3, r3, #9
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006692:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d006      	beq.n	80066aa <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800669c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800669e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d902      	bls.n	80066aa <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80066a4:	2301      	movs	r3, #1
 80066a6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80066aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d109      	bne.n	80066c6 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80066b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066b6:	461a      	mov	r2, r3
 80066b8:	2103      	movs	r1, #3
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f7fc f954 	bl	8002968 <VL53L0X_GetLimitCheckEnable>
 80066c0:	4603      	mov	r3, r0
 80066c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80066c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d023      	beq.n	8006716 <VL53L0X_get_pal_range_status+0x242>
 80066ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d11f      	bne.n	8006716 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80066d6:	893b      	ldrh	r3, [r7, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d102      	bne.n	80066e2 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80066dc:	2300      	movs	r3, #0
 80066de:	637b      	str	r3, [r7, #52]	; 0x34
 80066e0:	e005      	b.n	80066ee <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	021a      	lsls	r2, r3, #8
 80066e6:	893b      	ldrh	r3, [r7, #8]
 80066e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ec:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80066ee:	f107 0318 	add.w	r3, r7, #24
 80066f2:	461a      	mov	r2, r3
 80066f4:	2103      	movs	r1, #3
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7fc f9bc 	bl	8002a74 <VL53L0X_GetLimitCheckValue>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d006      	beq.n	8006716 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8006708:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800670a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800670c:	429a      	cmp	r2, r3
 800670e:	d202      	bcs.n	8006716 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8006710:	2301      	movs	r3, #1
 8006712:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006716:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800671a:	2b00      	cmp	r3, #0
 800671c:	d14a      	bne.n	80067b4 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800671e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006722:	2b01      	cmp	r3, #1
 8006724:	d103      	bne.n	800672e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8006726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006728:	22ff      	movs	r2, #255	; 0xff
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	e042      	b.n	80067b4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800672e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006732:	2b01      	cmp	r3, #1
 8006734:	d007      	beq.n	8006746 <VL53L0X_get_pal_range_status+0x272>
 8006736:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800673a:	2b02      	cmp	r3, #2
 800673c:	d003      	beq.n	8006746 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800673e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006742:	2b03      	cmp	r3, #3
 8006744:	d103      	bne.n	800674e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8006746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006748:	2205      	movs	r2, #5
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	e032      	b.n	80067b4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800674e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006752:	2b06      	cmp	r3, #6
 8006754:	d003      	beq.n	800675e <VL53L0X_get_pal_range_status+0x28a>
 8006756:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800675a:	2b09      	cmp	r3, #9
 800675c:	d103      	bne.n	8006766 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800675e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006760:	2204      	movs	r2, #4
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	e026      	b.n	80067b4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8006766:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800676a:	2b08      	cmp	r3, #8
 800676c:	d007      	beq.n	800677e <VL53L0X_get_pal_range_status+0x2aa>
 800676e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006772:	2b0a      	cmp	r3, #10
 8006774:	d003      	beq.n	800677e <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8006776:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800677a:	2b01      	cmp	r3, #1
 800677c:	d103      	bne.n	8006786 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800677e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006780:	2203      	movs	r2, #3
 8006782:	701a      	strb	r2, [r3, #0]
 8006784:	e016      	b.n	80067b4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8006786:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800678a:	2b04      	cmp	r3, #4
 800678c:	d003      	beq.n	8006796 <VL53L0X_get_pal_range_status+0x2c2>
 800678e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006792:	2b01      	cmp	r3, #1
 8006794:	d103      	bne.n	800679e <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8006796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006798:	2202      	movs	r2, #2
 800679a:	701a      	strb	r2, [r3, #0]
 800679c:	e00a      	b.n	80067b4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800679e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d103      	bne.n	80067ae <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80067a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a8:	2201      	movs	r2, #1
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	e002      	b.n	80067b4 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80067ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b0:	2200      	movs	r2, #0
 80067b2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80067b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d102      	bne.n	80067c2 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80067bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067be:	2200      	movs	r2, #0
 80067c0:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80067c2:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80067c6:	461a      	mov	r2, r3
 80067c8:	2101      	movs	r1, #1
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f7fc f8cc 	bl	8002968 <VL53L0X_GetLimitCheckEnable>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80067d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d14f      	bne.n	800687e <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80067de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <VL53L0X_get_pal_range_status+0x31a>
 80067e6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d103      	bne.n	80067f6 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80067ee:	2301      	movs	r3, #1
 80067f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067f4:	e002      	b.n	80067fc <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006802:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8006806:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800680a:	2b04      	cmp	r3, #4
 800680c:	d003      	beq.n	8006816 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800680e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8006812:	2b00      	cmp	r3, #0
 8006814:	d103      	bne.n	800681e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8006816:	2301      	movs	r3, #1
 8006818:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800681c:	e002      	b.n	8006824 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800682a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800682e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <VL53L0X_get_pal_range_status+0x36a>
 8006836:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800683a:	2b01      	cmp	r3, #1
 800683c:	d103      	bne.n	8006846 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800683e:	2301      	movs	r3, #1
 8006840:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006844:	e002      	b.n	800684c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8006846:	2300      	movs	r3, #0
 8006848:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006852:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8006856:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <VL53L0X_get_pal_range_status+0x392>
 800685e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006862:	2b01      	cmp	r3, #1
 8006864:	d103      	bne.n	800686e <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8006866:	2301      	movs	r3, #1
 8006868:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800686c:	e002      	b.n	8006874 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800686e:	2300      	movs	r3, #0
 8006870:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800687a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800687e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8006882:	4618      	mov	r0, r3
 8006884:	3740      	adds	r7, #64	; 0x40
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800688a:	b580      	push	{r7, lr}
 800688c:	b088      	sub	sp, #32
 800688e:	af02      	add	r7, sp, #8
 8006890:	60f8      	str	r0, [r7, #12]
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	330a      	adds	r3, #10
 800689a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80068a8:	b299      	uxth	r1, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	4613      	mov	r3, r2
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	f001 fced 	bl	8008294 <HAL_I2C_Master_Transmit>
 80068ba:	4603      	mov	r3, r0
 80068bc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80068be:	693b      	ldr	r3, [r7, #16]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3718      	adds	r7, #24
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af02      	add	r7, sp, #8
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	330a      	adds	r3, #10
 80068d8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80068e6:	f043 0301 	orr.w	r3, r3, #1
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	b299      	uxth	r1, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	4613      	mov	r3, r2
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	f001 fdc9 	bl	8008490 <HAL_I2C_Master_Receive>
 80068fe:	4603      	mov	r3, r0
 8006900:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006902:	693b      	ldr	r3, [r7, #16]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	607a      	str	r2, [r7, #4]
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	460b      	mov	r3, r1
 800691a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800691c:	2300      	movs	r3, #0
 800691e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b3f      	cmp	r3, #63	; 0x3f
 8006924:	d902      	bls.n	800692c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8006926:	f06f 0303 	mvn.w	r3, #3
 800692a:	e016      	b.n	800695a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800692c:	4a0d      	ldr	r2, [pc, #52]	; (8006964 <VL53L0X_WriteMulti+0x58>)
 800692e:	7afb      	ldrb	r3, [r7, #11]
 8006930:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	480c      	ldr	r0, [pc, #48]	; (8006968 <VL53L0X_WriteMulti+0x5c>)
 8006938:	f004 fd80 	bl	800b43c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	3301      	adds	r3, #1
 8006940:	461a      	mov	r2, r3
 8006942:	4908      	ldr	r1, [pc, #32]	; (8006964 <VL53L0X_WriteMulti+0x58>)
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f7ff ffa0 	bl	800688a <_I2CWrite>
 800694a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006952:	23ec      	movs	r3, #236	; 0xec
 8006954:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8006956:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	200006fc 	.word	0x200006fc
 8006968:	200006fd 	.word	0x200006fd

0800696c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	607a      	str	r2, [r7, #4]
 8006976:	603b      	str	r3, [r7, #0]
 8006978:	460b      	mov	r3, r1
 800697a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800697c:	2300      	movs	r3, #0
 800697e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8006980:	f107 030b 	add.w	r3, r7, #11
 8006984:	2201      	movs	r2, #1
 8006986:	4619      	mov	r1, r3
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7ff ff7e 	bl	800688a <_I2CWrite>
 800698e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d002      	beq.n	800699c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006996:	23ec      	movs	r3, #236	; 0xec
 8006998:	75fb      	strb	r3, [r7, #23]
        goto done;
 800699a:	e00c      	b.n	80069b6 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f7ff ff91 	bl	80068c8 <_I2CRead>
 80069a6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80069ae:	23ec      	movs	r3, #236	; 0xec
 80069b0:	75fb      	strb	r3, [r7, #23]
 80069b2:	e000      	b.n	80069b6 <VL53L0X_ReadMulti+0x4a>
    }
done:
 80069b4:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80069b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	70fb      	strb	r3, [r7, #3]
 80069d0:	4613      	mov	r3, r2
 80069d2:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069d4:	2300      	movs	r3, #0
 80069d6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80069d8:	4a0b      	ldr	r2, [pc, #44]	; (8006a08 <VL53L0X_WrByte+0x44>)
 80069da:	78fb      	ldrb	r3, [r7, #3]
 80069dc:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80069de:	4a0a      	ldr	r2, [pc, #40]	; (8006a08 <VL53L0X_WrByte+0x44>)
 80069e0:	78bb      	ldrb	r3, [r7, #2]
 80069e2:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80069e4:	2202      	movs	r2, #2
 80069e6:	4908      	ldr	r1, [pc, #32]	; (8006a08 <VL53L0X_WrByte+0x44>)
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff ff4e 	bl	800688a <_I2CWrite>
 80069ee:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80069f6:	23ec      	movs	r3, #236	; 0xec
 80069f8:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80069fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	200006fc 	.word	0x200006fc

08006a0c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	460b      	mov	r3, r1
 8006a16:	70fb      	strb	r3, [r7, #3]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8006a20:	4a0e      	ldr	r2, [pc, #56]	; (8006a5c <VL53L0X_WrWord+0x50>)
 8006a22:	78fb      	ldrb	r3, [r7, #3]
 8006a24:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8006a26:	883b      	ldrh	r3, [r7, #0]
 8006a28:	0a1b      	lsrs	r3, r3, #8
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	4b0b      	ldr	r3, [pc, #44]	; (8006a5c <VL53L0X_WrWord+0x50>)
 8006a30:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8006a32:	883b      	ldrh	r3, [r7, #0]
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	4b09      	ldr	r3, [pc, #36]	; (8006a5c <VL53L0X_WrWord+0x50>)
 8006a38:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8006a3a:	2203      	movs	r2, #3
 8006a3c:	4907      	ldr	r1, [pc, #28]	; (8006a5c <VL53L0X_WrWord+0x50>)
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff ff23 	bl	800688a <_I2CWrite>
 8006a44:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006a4c:	23ec      	movs	r3, #236	; 0xec
 8006a4e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8006a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	200006fc 	.word	0x200006fc

08006a60 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	4608      	mov	r0, r1
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	70fb      	strb	r3, [r7, #3]
 8006a72:	460b      	mov	r3, r1
 8006a74:	70bb      	strb	r3, [r7, #2]
 8006a76:	4613      	mov	r3, r2
 8006a78:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8006a7e:	f107 020e 	add.w	r2, r7, #14
 8006a82:	78fb      	ldrb	r3, [r7, #3]
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f81e 	bl	8006ac8 <VL53L0X_RdByte>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8006a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d110      	bne.n	8006aba <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8006a98:	7bba      	ldrb	r2, [r7, #14]
 8006a9a:	78bb      	ldrb	r3, [r7, #2]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	787b      	ldrb	r3, [r7, #1]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8006aa8:	7bba      	ldrb	r2, [r7, #14]
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff ff88 	bl	80069c4 <VL53L0X_WrByte>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73fb      	strb	r3, [r7, #15]
 8006ab8:	e000      	b.n	8006abc <VL53L0X_UpdateByte+0x5c>
        goto done;
 8006aba:	bf00      	nop
done:
    return Status;
 8006abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8006ada:	f107 030b 	add.w	r3, r7, #11
 8006ade:	2201      	movs	r2, #1
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f7ff fed1 	bl	800688a <_I2CWrite>
 8006ae8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006af0:	23ec      	movs	r3, #236	; 0xec
 8006af2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006af4:	e00c      	b.n	8006b10 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8006af6:	2201      	movs	r2, #1
 8006af8:	6879      	ldr	r1, [r7, #4]
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f7ff fee4 	bl	80068c8 <_I2CRead>
 8006b00:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006b08:	23ec      	movs	r3, #236	; 0xec
 8006b0a:	75fb      	strb	r3, [r7, #23]
 8006b0c:	e000      	b.n	8006b10 <VL53L0X_RdByte+0x48>
    }
done:
 8006b0e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8006b10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3718      	adds	r7, #24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	460b      	mov	r3, r1
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8006b2e:	f107 030b 	add.w	r3, r7, #11
 8006b32:	2201      	movs	r2, #1
 8006b34:	4619      	mov	r1, r3
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7ff fea7 	bl	800688a <_I2CWrite>
 8006b3c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006b44:	23ec      	movs	r3, #236	; 0xec
 8006b46:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006b48:	e017      	b.n	8006b7a <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	490e      	ldr	r1, [pc, #56]	; (8006b88 <VL53L0X_RdWord+0x6c>)
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f7ff feba 	bl	80068c8 <_I2CRead>
 8006b54:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006b5c:	23ec      	movs	r3, #236	; 0xec
 8006b5e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006b60:	e00b      	b.n	8006b7a <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8006b62:	4b09      	ldr	r3, [pc, #36]	; (8006b88 <VL53L0X_RdWord+0x6c>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	021b      	lsls	r3, r3, #8
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <VL53L0X_RdWord+0x6c>)
 8006b6e:	785b      	ldrb	r3, [r3, #1]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	4413      	add	r3, r2
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8006b7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	200006fc 	.word	0x200006fc

08006b8c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	460b      	mov	r3, r1
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8006b9e:	f107 030b 	add.w	r3, r7, #11
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f7ff fe6f 	bl	800688a <_I2CWrite>
 8006bac:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006bb4:	23ec      	movs	r3, #236	; 0xec
 8006bb6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006bb8:	e01b      	b.n	8006bf2 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8006bba:	2204      	movs	r2, #4
 8006bbc:	4910      	ldr	r1, [pc, #64]	; (8006c00 <VL53L0X_RdDWord+0x74>)
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff fe82 	bl	80068c8 <_I2CRead>
 8006bc4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006bcc:	23ec      	movs	r3, #236	; 0xec
 8006bce:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006bd0:	e00f      	b.n	8006bf2 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8006bd2:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <VL53L0X_RdDWord+0x74>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	061a      	lsls	r2, r3, #24
 8006bd8:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <VL53L0X_RdDWord+0x74>)
 8006bda:	785b      	ldrb	r3, [r3, #1]
 8006bdc:	041b      	lsls	r3, r3, #16
 8006bde:	441a      	add	r2, r3
 8006be0:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <VL53L0X_RdDWord+0x74>)
 8006be2:	789b      	ldrb	r3, [r3, #2]
 8006be4:	021b      	lsls	r3, r3, #8
 8006be6:	4413      	add	r3, r2
 8006be8:	4a05      	ldr	r2, [pc, #20]	; (8006c00 <VL53L0X_RdDWord+0x74>)
 8006bea:	78d2      	ldrb	r2, [r2, #3]
 8006bec:	441a      	add	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8006bf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	200006fc 	.word	0x200006fc

08006c04 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8006c10:	2002      	movs	r0, #2
 8006c12:	f000 faa3 	bl	800715c <HAL_Delay>
    return status;
 8006c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
	...

08006c24 <HandleError>:
 * Handle Error
 *
 * Set err on display and loop forever
 * @param err Error case code
 */
void HandleError(int err){
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
    char msg[16];
    sprintf(msg,"JMEr%d", err);
 8006c2c:	f107 0308 	add.w	r3, r7, #8
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	4905      	ldr	r1, [pc, #20]	; (8006c48 <HandleError+0x24>)
 8006c34:	4618      	mov	r0, r3
 8006c36:	f004 fc17 	bl	800b468 <siprintf>
    F411_SetDisplayString(msg);
 8006c3a:	f107 0308 	add.w	r3, r7, #8
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 f824 	bl	8006c8c <F411_SetDisplayString>
    while(1){};
 8006c44:	e7fe      	b.n	8006c44 <HandleError+0x20>
 8006c46:	bf00      	nop
 8006c48:	0800d270 	.word	0x0800d270

08006c4c <VL53L0X_ResetId>:





int VL53L0X_ResetId(int DevNo, int state) {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
    int status=0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	60fb      	str	r3, [r7, #12]
/// AFAIRE RESET


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c60:	4809      	ldr	r0, [pc, #36]	; (8006c88 <VL53L0X_ResetId+0x3c>)
 8006c62:	f001 f9b9 	bl	8007fd8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8006c66:	2064      	movs	r0, #100	; 0x64
 8006c68:	f000 fa78 	bl	800715c <HAL_Delay>
    if( state )
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d005      	beq.n	8006c7e <VL53L0X_ResetId+0x32>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8006c72:	2201      	movs	r2, #1
 8006c74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c78:	4803      	ldr	r0, [pc, #12]	; (8006c88 <VL53L0X_ResetId+0x3c>)
 8006c7a:	f001 f9ad 	bl	8007fd8 <HAL_GPIO_WritePin>

    return status;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	40020000 	.word	0x40020000

08006c8c <F411_SetDisplayString>:

extern UART_HandleTypeDef huart2;

int F411_SetDisplayString(const char *str) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]

	int status=1;
 8006c94:	2301      	movs	r3, #1
 8006c96:	60fb      	str	r3, [r7, #12]
	 HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 0xFFFF);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7f9 faa1 	bl	80001e0 <strlen>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	4803      	ldr	r0, [pc, #12]	; (8006cb8 <F411_SetDisplayString+0x2c>)
 8006caa:	f003 fc22 	bl	800a4f2 <HAL_UART_Transmit>

    return status;
 8006cae:	68fb      	ldr	r3, [r7, #12]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	2000067c 	.word	0x2000067c

08006cbc <DetectSensors>:





int DetectSensors(int SetDisplay) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
    int status;
    int FinalAddress;

    debug_printf("Detect Sensor");
    /* Reset all */
    nDevPresent = 0;
 8006cc4:	4b4c      	ldr	r3, [pc, #304]	; (8006df8 <DetectSensors+0x13c>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]


        status = VL53L0X_ResetId(0, 0);
 8006cca:	2100      	movs	r1, #0
 8006ccc:	2000      	movs	r0, #0
 8006cce:	f7ff ffbd 	bl	8006c4c <VL53L0X_ResetId>
 8006cd2:	61f8      	str	r0, [r7, #28]


i =0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	61bb      	str	r3, [r7, #24]
    /* detect all sensors (even on-board)*/
  //  for (i = 0; i < 1; i++) {
        VL53L0X_Dev_t *pDev;
        pDev = &VL53L0XDevs[i];
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006cde:	fb02 f303 	mul.w	r3, r2, r3
 8006ce2:	4a46      	ldr	r2, [pc, #280]	; (8006dfc <DetectSensors+0x140>)
 8006ce4:	4413      	add	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]
        pDev->I2cDevAddr = 0x52;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2252      	movs	r2, #82	; 0x52
 8006cec:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        pDev->Present = 0;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        status = 0;  // // FAIRE FONCTION RESET
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	61fb      	str	r3, [r7, #28]
        VL53L0X_ResetId( pDev->Id, 1);        HAL_Delay(2);
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8006d02:	2101      	movs	r1, #1
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff ffa1 	bl	8006c4c <VL53L0X_ResetId>
 8006d0a:	2002      	movs	r0, #2
 8006d0c:	f000 fa26 	bl	800715c <HAL_Delay>
        FinalAddress=0x52+(i+1+1)*2;
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	332b      	adds	r3, #43	; 0x2b
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	613b      	str	r3, [r7, #16]

        do {
        	/* Set I2C standard mode (400 KHz) before doing the first register access */
        	if (status == VL53L0X_ERROR_NONE)
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d106      	bne.n	8006d2c <DetectSensors+0x70>
        		status = VL53L0X_WrByte(pDev, 0x88, 0x00);
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2188      	movs	r1, #136	; 0x88
 8006d22:	6978      	ldr	r0, [r7, #20]
 8006d24:	f7ff fe4e 	bl	80069c4 <VL53L0X_WrByte>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	61fb      	str	r3, [r7, #28]

        	/* Try to read one register using default 0x52 address */
            status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 8006d2c:	f107 030e 	add.w	r3, r7, #14
 8006d30:	461a      	mov	r2, r3
 8006d32:	21c0      	movs	r1, #192	; 0xc0
 8006d34:	6978      	ldr	r0, [r7, #20]
 8006d36:	f7ff fef1 	bl	8006b1c <VL53L0X_RdWord>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	61fb      	str	r3, [r7, #28]
            if (status) {
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d142      	bne.n	8006dca <DetectSensors+0x10e>
                debug_printf("#%d Read id fail\n", i);
                break;
            }
            if (Id == 0xEEAA) {
 8006d44:	89fb      	ldrh	r3, [r7, #14]
 8006d46:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d13a      	bne.n	8006dc4 <DetectSensors+0x108>
				/* Sensor is found => Change its I2C address to final one */
                status = VL53L0X_SetDeviceAddress(pDev,FinalAddress);
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	4619      	mov	r1, r3
 8006d54:	6978      	ldr	r0, [r7, #20]
 8006d56:	f7fa ff71 	bl	8001c3c <VL53L0X_SetDeviceAddress>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	61fb      	str	r3, [r7, #28]
                if (status != 0) {
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d134      	bne.n	8006dce <DetectSensors+0x112>
                    debug_printf("#i VL53L0X_SetDeviceAddress fail\n", i);
                    break;
                }
                pDev->I2cDevAddr = FinalAddress;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
                /* Check all is OK with the new I2C address and initialize the sensor */
                status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 8006d6e:	f107 030e 	add.w	r3, r7, #14
 8006d72:	461a      	mov	r2, r3
 8006d74:	21c0      	movs	r1, #192	; 0xc0
 8006d76:	6978      	ldr	r0, [r7, #20]
 8006d78:	f7ff fed0 	bl	8006b1c <VL53L0X_RdWord>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	61fb      	str	r3, [r7, #28]
                if (status != 0) {
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d125      	bne.n	8006dd2 <DetectSensors+0x116>
					debug_printf("#i VL53L0X_RdWord fail\n", i);
					break;
				}

                status = VL53L0X_DataInit(pDev);
 8006d86:	6978      	ldr	r0, [r7, #20]
 8006d88:	f7fa ff70 	bl	8001c6c <VL53L0X_DataInit>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	61fb      	str	r3, [r7, #28]
                if( status == 0 ){
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d11f      	bne.n	8006dd6 <DetectSensors+0x11a>
                    pDev->Present = 1;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                else{
                    debug_printf("VL53L0X_DataInit %d fail\n", i);
                    break;
                }
                trace_printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
                nDevPresent++;
 8006d9e:	4b16      	ldr	r3, [pc, #88]	; (8006df8 <DetectSensors+0x13c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3301      	adds	r3, #1
 8006da4:	4a14      	ldr	r2, [pc, #80]	; (8006df8 <DetectSensors+0x13c>)
 8006da6:	6013      	str	r3, [r2, #0]
                nDevMask |= 1 << (i+1);
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	3301      	adds	r3, #1
 8006dac:	2201      	movs	r2, #1
 8006dae:	409a      	lsls	r2, r3
 8006db0:	4b13      	ldr	r3, [pc, #76]	; (8006e00 <DetectSensors+0x144>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	4a12      	ldr	r2, [pc, #72]	; (8006e00 <DetectSensors+0x144>)
 8006db8:	6013      	str	r3, [r2, #0]
                pDev->Present = 1;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8006dc2:	e009      	b.n	8006dd8 <DetectSensors+0x11c>
            }
            else {
                debug_printf("#%d unknown ID %x\n", i, Id);
                status = 1;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	61fb      	str	r3, [r7, #28]
 8006dc8:	e006      	b.n	8006dd8 <DetectSensors+0x11c>
                break;
 8006dca:	bf00      	nop
 8006dcc:	e004      	b.n	8006dd8 <DetectSensors+0x11c>
                    break;
 8006dce:	bf00      	nop
 8006dd0:	e002      	b.n	8006dd8 <DetectSensors+0x11c>
					break;
 8006dd2:	bf00      	nop
 8006dd4:	e000      	b.n	8006dd8 <DetectSensors+0x11c>
                    break;
 8006dd6:	bf00      	nop
            }
        } while (0);
        /* if fail r can't use for any reason then put the  device back to reset */
        if (status) {
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d005      	beq.n	8006dea <DetectSensors+0x12e>
            VL53L0X_ResetId(i+1, 0);
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	3301      	adds	r3, #1
 8006de2:	2100      	movs	r1, #0
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7ff ff31 	bl	8006c4c <VL53L0X_ResetId>
        }
    //}
    return nDevPresent;
 8006dea:	4b03      	ldr	r3, [pc, #12]	; (8006df8 <DetectSensors+0x13c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3720      	adds	r7, #32
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	200004e8 	.word	0x200004e8
 8006dfc:	200002c0 	.word	0x200002c0
 8006e00:	200006f8 	.word	0x200006f8

08006e04 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(RangingConfig_e rangingConfig){
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b08c      	sub	sp, #48	; 0x30
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	71fb      	strb	r3, [r7, #7]
    int status;
    uint8_t VhvSettings;
    uint8_t PhaseCal;
    uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 8006e0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e12:	62fb      	str	r3, [r7, #44]	; 0x2c
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 8006e14:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8006e18:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t timingBudget = 33000;
 8006e1a:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t preRangeVcselPeriod = 14;
 8006e20:	230e      	movs	r3, #14
 8006e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t finalRangeVcselPeriod = 10;
 8006e26:	230a      	movs	r3, #10
 8006e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

 //   for( i=0; i<3; i++){
	i=0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	61fb      	str	r3, [r7, #28]
        if( VL53L0XDevs[i].Present){
 8006e30:	4a80      	ldr	r2, [pc, #512]	; (8007034 <SetupSingleShot+0x230>)
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006e38:	fb01 f303 	mul.w	r3, r1, r3
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 80f0 	beq.w	800702a <SetupSingleShot+0x226>
            status=VL53L0X_StaticInit(&VL53L0XDevs[i]);
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006e50:	fb02 f303 	mul.w	r3, r2, r3
 8006e54:	4a77      	ldr	r2, [pc, #476]	; (8007034 <SetupSingleShot+0x230>)
 8006e56:	4413      	add	r3, r2
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fb f86b 	bl	8001f34 <VL53L0X_StaticInit>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	61bb      	str	r3, [r7, #24]
            if( status ){
                debug_printf("VL53L0X_StaticInit %d failed\n",i);
            }

            status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006e68:	fb02 f303 	mul.w	r3, r2, r3
 8006e6c:	4a71      	ldr	r2, [pc, #452]	; (8007034 <SetupSingleShot+0x230>)
 8006e6e:	4413      	add	r3, r2
 8006e70:	f107 0216 	add.w	r2, r7, #22
 8006e74:	f107 0117 	add.w	r1, r7, #23
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fb feef 	bl	8002c5c <VL53L0X_PerformRefCalibration>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_PerformRefCalibration failed\n");
			}

			status = VL53L0X_PerformRefSpadManagement(&VL53L0XDevs[i], &refSpadCount, &isApertureSpads);
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006e88:	fb02 f303 	mul.w	r3, r2, r3
 8006e8c:	4a69      	ldr	r2, [pc, #420]	; (8007034 <SetupSingleShot+0x230>)
 8006e8e:	4413      	add	r3, r2
 8006e90:	f107 020f 	add.w	r2, r7, #15
 8006e94:	f107 0110 	add.w	r1, r7, #16
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fc fb6d 	bl	8003578 <VL53L0X_PerformRefSpadManagement>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_PerformRefSpadManagement failed\n");
			}

            status = VL53L0X_SetDeviceMode(&VL53L0XDevs[i], VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006ea8:	fb02 f303 	mul.w	r3, r2, r3
 8006eac:	4a61      	ldr	r2, [pc, #388]	; (8007034 <SetupSingleShot+0x230>)
 8006eae:	4413      	add	r3, r2
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fb fa50 	bl	8002358 <VL53L0X_SetDeviceMode>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	61bb      	str	r3, [r7, #24]
            if( status ){
               debug_printf("VL53L0X_SetDeviceMode failed\n");
            }

            status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006ec2:	fb02 f303 	mul.w	r3, r2, r3
 8006ec6:	4a5b      	ldr	r2, [pc, #364]	; (8007034 <SetupSingleShot+0x230>)
 8006ec8:	4413      	add	r3, r2
 8006eca:	2201      	movs	r2, #1
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fb fcbe 	bl	8002850 <VL53L0X_SetLimitCheckEnable>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
			}

			status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006ede:	fb02 f303 	mul.w	r3, r2, r3
 8006ee2:	4a54      	ldr	r2, [pc, #336]	; (8007034 <SetupSingleShot+0x230>)
 8006ee4:	4413      	add	r3, r2
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	2101      	movs	r1, #1
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fb fcb0 	bl	8002850 <VL53L0X_SetLimitCheckEnable>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
			}
			/* Ranging configuration */
            switch(rangingConfig) {
 8006ef4:	79fb      	ldrb	r3, [r7, #7]
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d016      	beq.n	8006f28 <SetupSingleShot+0x124>
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	dc33      	bgt.n	8006f66 <SetupSingleShot+0x162>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <SetupSingleShot+0x104>
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d01f      	beq.n	8006f46 <SetupSingleShot+0x142>
 8006f06:	e02e      	b.n	8006f66 <SetupSingleShot+0x162>
            case LONG_RANGE:
            	signalLimit = (FixPoint1616_t)(0.1*65536);
 8006f08:	f641 1399 	movw	r3, #6553	; 0x1999
 8006f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
            	sigmaLimit = (FixPoint1616_t)(60*65536);
 8006f0e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28
            	timingBudget = 33000;
 8006f14:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8006f18:	627b      	str	r3, [r7, #36]	; 0x24
            	preRangeVcselPeriod = 18;
 8006f1a:	2312      	movs	r3, #18
 8006f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            	finalRangeVcselPeriod = 14;
 8006f20:	230e      	movs	r3, #14
 8006f22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            	break;
 8006f26:	e01e      	b.n	8006f66 <SetupSingleShot+0x162>
            case HIGH_ACCURACY:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 8006f28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
				sigmaLimit = (FixPoint1616_t)(18*65536);
 8006f2e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8006f32:	62bb      	str	r3, [r7, #40]	; 0x28
				timingBudget = 200000;
 8006f34:	4b40      	ldr	r3, [pc, #256]	; (8007038 <SetupSingleShot+0x234>)
 8006f36:	627b      	str	r3, [r7, #36]	; 0x24
				preRangeVcselPeriod = 14;
 8006f38:	230e      	movs	r3, #14
 8006f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				finalRangeVcselPeriod = 10;
 8006f3e:	230a      	movs	r3, #10
 8006f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				break;
 8006f44:	e00f      	b.n	8006f66 <SetupSingleShot+0x162>
            case HIGH_SPEED:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 8006f46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
				sigmaLimit = (FixPoint1616_t)(32*65536);
 8006f4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006f50:	62bb      	str	r3, [r7, #40]	; 0x28
				timingBudget = 20000;
 8006f52:	f644 6320 	movw	r3, #20000	; 0x4e20
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
				preRangeVcselPeriod = 14;
 8006f58:	230e      	movs	r3, #14
 8006f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				finalRangeVcselPeriod = 10;
 8006f5e:	230a      	movs	r3, #10
 8006f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				break;
 8006f64:	bf00      	nop
            default:
            	debug_printf("Not Supported");
            }

            status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006f6c:	fb02 f303 	mul.w	r3, r2, r3
 8006f70:	4a30      	ldr	r2, [pc, #192]	; (8007034 <SetupSingleShot+0x230>)
 8006f72:	4413      	add	r3, r2
 8006f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f76:	2101      	movs	r1, #1
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fb fd19 	bl	80029b0 <VL53L0X_SetLimitCheckValue>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
			}

			status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006f88:	fb02 f303 	mul.w	r3, r2, r3
 8006f8c:	4a29      	ldr	r2, [pc, #164]	; (8007034 <SetupSingleShot+0x230>)
 8006f8e:	4413      	add	r3, r2
 8006f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f92:	2100      	movs	r1, #0
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fb fd0b 	bl	80029b0 <VL53L0X_SetLimitCheckValue>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
			}

            status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&VL53L0XDevs[i],  timingBudget);
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006fa4:	fb02 f303 	mul.w	r3, r2, r3
 8006fa8:	4a22      	ldr	r2, [pc, #136]	; (8007034 <SetupSingleShot+0x230>)
 8006faa:	4413      	add	r3, r2
 8006fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fb fa30 	bl	8002414 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	61bb      	str	r3, [r7, #24]
            if( status ){
               debug_printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
            }

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006fbe:	fb02 f303 	mul.w	r3, r2, r3
 8006fc2:	4a1c      	ldr	r2, [pc, #112]	; (8007034 <SetupSingleShot+0x230>)
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006fca:	2100      	movs	r1, #0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fb fa47 	bl	8002460 <VL53L0X_SetVcselPulsePeriod>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
			}

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006fdc:	fb02 f303 	mul.w	r3, r2, r3
 8006fe0:	4a14      	ldr	r2, [pc, #80]	; (8007034 <SetupSingleShot+0x230>)
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006fe8:	2101      	movs	r1, #1
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fb fa38 	bl	8002460 <VL53L0X_SetVcselPulsePeriod>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
			}

			status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006ffa:	fb02 f303 	mul.w	r3, r2, r3
 8006ffe:	4a0d      	ldr	r2, [pc, #52]	; (8007034 <SetupSingleShot+0x230>)
 8007000:	4413      	add	r3, r2
 8007002:	f107 0216 	add.w	r2, r7, #22
 8007006:	f107 0117 	add.w	r1, r7, #23
 800700a:	4618      	mov	r0, r3
 800700c:	f7fb fe26 	bl	8002c5c <VL53L0X_PerformRefCalibration>
 8007010:	4603      	mov	r3, r0
 8007012:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_PerformRefCalibration  failed\n");
			}

            VL53L0XDevs[i].LeakyFirst=1;
 8007014:	4a07      	ldr	r2, [pc, #28]	; (8007034 <SetupSingleShot+0x230>)
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800701c:	fb01 f303 	mul.w	r3, r1, r3
 8007020:	4413      	add	r3, r2
 8007022:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007026:	2201      	movs	r2, #1
 8007028:	601a      	str	r2, [r3, #0]
        }

}
 800702a:	bf00      	nop
 800702c:	3730      	adds	r7, #48	; 0x30
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	200002c0 	.word	0x200002c0
 8007038:	00030d40 	.word	0x00030d40

0800703c <ResetAndDetectSensor>:





void ResetAndDetectSensor(int SetDisplay){
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
    int nSensor;
    nSensor = DetectSensors(SetDisplay);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff fe39 	bl	8006cbc <DetectSensors>
 800704a:	60f8      	str	r0, [r7, #12]
    /* at least one sensor and if one it must be the built-in one  */
    if( (nSensor <=0) ||  (nSensor ==1 && VL53L0XDevs[0].Present==0) ){
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	dd07      	ble.n	8007062 <ResetAndDetectSensor+0x26>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d108      	bne.n	800706a <ResetAndDetectSensor+0x2e>
 8007058:	4b06      	ldr	r3, [pc, #24]	; (8007074 <ResetAndDetectSensor+0x38>)
 800705a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800705e:	2b00      	cmp	r3, #0
 8007060:	d103      	bne.n	800706a <ResetAndDetectSensor+0x2e>
        HandleError(ERR_DETECT);
 8007062:	f04f 30ff 	mov.w	r0, #4294967295
 8007066:	f7ff fddd 	bl	8006c24 <HandleError>
    }
}
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	200002c0 	.word	0x200002c0

08007078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800707c:	4b0e      	ldr	r3, [pc, #56]	; (80070b8 <HAL_Init+0x40>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a0d      	ldr	r2, [pc, #52]	; (80070b8 <HAL_Init+0x40>)
 8007082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007088:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <HAL_Init+0x40>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a0a      	ldr	r2, [pc, #40]	; (80070b8 <HAL_Init+0x40>)
 800708e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007094:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <HAL_Init+0x40>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a07      	ldr	r2, [pc, #28]	; (80070b8 <HAL_Init+0x40>)
 800709a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800709e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070a0:	2003      	movs	r0, #3
 80070a2:	f000 fd41 	bl	8007b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80070a6:	2000      	movs	r0, #0
 80070a8:	f000 f808 	bl	80070bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80070ac:	f7fa fbb2 	bl	8001814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	40023c00 	.word	0x40023c00

080070bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80070c4:	4b12      	ldr	r3, [pc, #72]	; (8007110 <HAL_InitTick+0x54>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	4b12      	ldr	r3, [pc, #72]	; (8007114 <HAL_InitTick+0x58>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	4619      	mov	r1, r3
 80070ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80070d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 fd59 	bl	8007b92 <HAL_SYSTICK_Config>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e00e      	b.n	8007108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b0f      	cmp	r3, #15
 80070ee:	d80a      	bhi.n	8007106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80070f0:	2200      	movs	r2, #0
 80070f2:	6879      	ldr	r1, [r7, #4]
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295
 80070f8:	f000 fd21 	bl	8007b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80070fc:	4a06      	ldr	r2, [pc, #24]	; (8007118 <HAL_InitTick+0x5c>)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	e000      	b.n	8007108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
}
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	20000000 	.word	0x20000000
 8007114:	20000454 	.word	0x20000454
 8007118:	20000450 	.word	0x20000450

0800711c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800711c:	b480      	push	{r7}
 800711e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007120:	4b06      	ldr	r3, [pc, #24]	; (800713c <HAL_IncTick+0x20>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	461a      	mov	r2, r3
 8007126:	4b06      	ldr	r3, [pc, #24]	; (8007140 <HAL_IncTick+0x24>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4413      	add	r3, r2
 800712c:	4a04      	ldr	r2, [pc, #16]	; (8007140 <HAL_IncTick+0x24>)
 800712e:	6013      	str	r3, [r2, #0]
}
 8007130:	bf00      	nop
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	20000454 	.word	0x20000454
 8007140:	200007ac 	.word	0x200007ac

08007144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
  return uwTick;
 8007148:	4b03      	ldr	r3, [pc, #12]	; (8007158 <HAL_GetTick+0x14>)
 800714a:	681b      	ldr	r3, [r3, #0]
}
 800714c:	4618      	mov	r0, r3
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	200007ac 	.word	0x200007ac

0800715c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007164:	f7ff ffee 	bl	8007144 <HAL_GetTick>
 8007168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007174:	d005      	beq.n	8007182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007176:	4b0a      	ldr	r3, [pc, #40]	; (80071a0 <HAL_Delay+0x44>)
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007182:	bf00      	nop
 8007184:	f7ff ffde 	bl	8007144 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	429a      	cmp	r2, r3
 8007192:	d8f7      	bhi.n	8007184 <HAL_Delay+0x28>
  {
  }
}
 8007194:	bf00      	nop
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20000454 	.word	0x20000454

080071a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e033      	b.n	8007222 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d109      	bne.n	80071d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7fa fb4e 	bl	8001864 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f003 0310 	and.w	r3, r3, #16
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d118      	bne.n	8007214 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80071ea:	f023 0302 	bic.w	r3, r3, #2
 80071ee:	f043 0202 	orr.w	r2, r3, #2
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 faca 	bl	8007790 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	f023 0303 	bic.w	r3, r3, #3
 800720a:	f043 0201 	orr.w	r2, r3, #1
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	641a      	str	r2, [r3, #64]	; 0x40
 8007212:	e001      	b.n	8007218 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007220:	7bfb      	ldrb	r3, [r7, #15]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <HAL_ADC_Start+0x1a>
 8007242:	2302      	movs	r3, #2
 8007244:	e097      	b.n	8007376 <HAL_ADC_Start+0x14a>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b01      	cmp	r3, #1
 800725a:	d018      	beq.n	800728e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689a      	ldr	r2, [r3, #8]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f042 0201 	orr.w	r2, r2, #1
 800726a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800726c:	4b45      	ldr	r3, [pc, #276]	; (8007384 <HAL_ADC_Start+0x158>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a45      	ldr	r2, [pc, #276]	; (8007388 <HAL_ADC_Start+0x15c>)
 8007272:	fba2 2303 	umull	r2, r3, r2, r3
 8007276:	0c9a      	lsrs	r2, r3, #18
 8007278:	4613      	mov	r3, r2
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	4413      	add	r3, r2
 800727e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007280:	e002      	b.n	8007288 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	3b01      	subs	r3, #1
 8007286:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1f9      	bne.n	8007282 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f003 0301 	and.w	r3, r3, #1
 8007298:	2b01      	cmp	r3, #1
 800729a:	d15f      	bne.n	800735c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80072a4:	f023 0301 	bic.w	r3, r3, #1
 80072a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d007      	beq.n	80072ce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80072c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072da:	d106      	bne.n	80072ea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e0:	f023 0206 	bic.w	r2, r3, #6
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	645a      	str	r2, [r3, #68]	; 0x44
 80072e8:	e002      	b.n	80072f0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80072f8:	4b24      	ldr	r3, [pc, #144]	; (800738c <HAL_ADC_Start+0x160>)
 80072fa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007304:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f003 031f 	and.w	r3, r3, #31
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10f      	bne.n	8007332 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d129      	bne.n	8007374 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800732e:	609a      	str	r2, [r3, #8]
 8007330:	e020      	b.n	8007374 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a16      	ldr	r2, [pc, #88]	; (8007390 <HAL_ADC_Start+0x164>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d11b      	bne.n	8007374 <HAL_ADC_Start+0x148>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d114      	bne.n	8007374 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007358:	609a      	str	r2, [r3, #8]
 800735a:	e00b      	b.n	8007374 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007360:	f043 0210 	orr.w	r2, r3, #16
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736c:	f043 0201 	orr.w	r2, r3, #1
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	20000000 	.word	0x20000000
 8007388:	431bde83 	.word	0x431bde83
 800738c:	40012300 	.word	0x40012300
 8007390:	40012000 	.word	0x40012000

08007394 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d101      	bne.n	80073aa <HAL_ADC_Stop+0x16>
 80073a6:	2302      	movs	r3, #2
 80073a8:	e021      	b.n	80073ee <HAL_ADC_Stop+0x5a>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689a      	ldr	r2, [r3, #8]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0201 	bic.w	r2, r2, #1
 80073c0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d109      	bne.n	80073e4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80073d8:	f023 0301 	bic.w	r3, r3, #1
 80073dc:	f043 0201 	orr.w	r2, r3, #1
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007416:	d113      	bne.n	8007440 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007426:	d10b      	bne.n	8007440 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742c:	f043 0220 	orr.w	r2, r3, #32
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e063      	b.n	8007508 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007440:	f7ff fe80 	bl	8007144 <HAL_GetTick>
 8007444:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007446:	e021      	b.n	800748c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744e:	d01d      	beq.n	800748c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d007      	beq.n	8007466 <HAL_ADC_PollForConversion+0x6c>
 8007456:	f7ff fe75 	bl	8007144 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d212      	bcs.n	800748c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b02      	cmp	r3, #2
 8007472:	d00b      	beq.n	800748c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007478:	f043 0204 	orr.w	r2, r3, #4
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e03d      	b.n	8007508 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b02      	cmp	r3, #2
 8007498:	d1d6      	bne.n	8007448 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f06f 0212 	mvn.w	r2, #18
 80074a2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d123      	bne.n	8007506 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d11f      	bne.n	8007506 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d006      	beq.n	80074e2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d111      	bne.n	8007506 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d105      	bne.n	8007506 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f043 0201 	orr.w	r2, r3, #1
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800751e:	4618      	mov	r0, r3
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
	...

0800752c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007540:	2b01      	cmp	r3, #1
 8007542:	d101      	bne.n	8007548 <HAL_ADC_ConfigChannel+0x1c>
 8007544:	2302      	movs	r3, #2
 8007546:	e113      	b.n	8007770 <HAL_ADC_ConfigChannel+0x244>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b09      	cmp	r3, #9
 8007556:	d925      	bls.n	80075a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68d9      	ldr	r1, [r3, #12]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	b29b      	uxth	r3, r3
 8007564:	461a      	mov	r2, r3
 8007566:	4613      	mov	r3, r2
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	4413      	add	r3, r2
 800756c:	3b1e      	subs	r3, #30
 800756e:	2207      	movs	r2, #7
 8007570:	fa02 f303 	lsl.w	r3, r2, r3
 8007574:	43da      	mvns	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	400a      	ands	r2, r1
 800757c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68d9      	ldr	r1, [r3, #12]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	689a      	ldr	r2, [r3, #8]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	b29b      	uxth	r3, r3
 800758e:	4618      	mov	r0, r3
 8007590:	4603      	mov	r3, r0
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	4403      	add	r3, r0
 8007596:	3b1e      	subs	r3, #30
 8007598:	409a      	lsls	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	60da      	str	r2, [r3, #12]
 80075a2:	e022      	b.n	80075ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6919      	ldr	r1, [r3, #16]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	4613      	mov	r3, r2
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	4413      	add	r3, r2
 80075b8:	2207      	movs	r2, #7
 80075ba:	fa02 f303 	lsl.w	r3, r2, r3
 80075be:	43da      	mvns	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	400a      	ands	r2, r1
 80075c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6919      	ldr	r1, [r3, #16]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	689a      	ldr	r2, [r3, #8]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	4618      	mov	r0, r3
 80075da:	4603      	mov	r3, r0
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	4403      	add	r3, r0
 80075e0:	409a      	lsls	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2b06      	cmp	r3, #6
 80075f0:	d824      	bhi.n	800763c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	3b05      	subs	r3, #5
 8007604:	221f      	movs	r2, #31
 8007606:	fa02 f303 	lsl.w	r3, r2, r3
 800760a:	43da      	mvns	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	400a      	ands	r2, r1
 8007612:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	b29b      	uxth	r3, r3
 8007620:	4618      	mov	r0, r3
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	3b05      	subs	r3, #5
 800762e:	fa00 f203 	lsl.w	r2, r0, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	635a      	str	r2, [r3, #52]	; 0x34
 800763a:	e04c      	b.n	80076d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2b0c      	cmp	r3, #12
 8007642:	d824      	bhi.n	800768e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	3b23      	subs	r3, #35	; 0x23
 8007656:	221f      	movs	r2, #31
 8007658:	fa02 f303 	lsl.w	r3, r2, r3
 800765c:	43da      	mvns	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	400a      	ands	r2, r1
 8007664:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	b29b      	uxth	r3, r3
 8007672:	4618      	mov	r0, r3
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	4613      	mov	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	3b23      	subs	r3, #35	; 0x23
 8007680:	fa00 f203 	lsl.w	r2, r0, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	631a      	str	r2, [r3, #48]	; 0x30
 800768c:	e023      	b.n	80076d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	4613      	mov	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	3b41      	subs	r3, #65	; 0x41
 80076a0:	221f      	movs	r2, #31
 80076a2:	fa02 f303 	lsl.w	r3, r2, r3
 80076a6:	43da      	mvns	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	400a      	ands	r2, r1
 80076ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	4618      	mov	r0, r3
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	4613      	mov	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	3b41      	subs	r3, #65	; 0x41
 80076ca:	fa00 f203 	lsl.w	r2, r0, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80076d6:	4b29      	ldr	r3, [pc, #164]	; (800777c <HAL_ADC_ConfigChannel+0x250>)
 80076d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a28      	ldr	r2, [pc, #160]	; (8007780 <HAL_ADC_ConfigChannel+0x254>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d10f      	bne.n	8007704 <HAL_ADC_ConfigChannel+0x1d8>
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b12      	cmp	r3, #18
 80076ea:	d10b      	bne.n	8007704 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1d      	ldr	r2, [pc, #116]	; (8007780 <HAL_ADC_ConfigChannel+0x254>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d12b      	bne.n	8007766 <HAL_ADC_ConfigChannel+0x23a>
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a1c      	ldr	r2, [pc, #112]	; (8007784 <HAL_ADC_ConfigChannel+0x258>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d003      	beq.n	8007720 <HAL_ADC_ConfigChannel+0x1f4>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b11      	cmp	r3, #17
 800771e:	d122      	bne.n	8007766 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a11      	ldr	r2, [pc, #68]	; (8007784 <HAL_ADC_ConfigChannel+0x258>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d111      	bne.n	8007766 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007742:	4b11      	ldr	r3, [pc, #68]	; (8007788 <HAL_ADC_ConfigChannel+0x25c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a11      	ldr	r2, [pc, #68]	; (800778c <HAL_ADC_ConfigChannel+0x260>)
 8007748:	fba2 2303 	umull	r2, r3, r2, r3
 800774c:	0c9a      	lsrs	r2, r3, #18
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007758:	e002      	b.n	8007760 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	3b01      	subs	r3, #1
 800775e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1f9      	bne.n	800775a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	40012300 	.word	0x40012300
 8007780:	40012000 	.word	0x40012000
 8007784:	10000012 	.word	0x10000012
 8007788:	20000000 	.word	0x20000000
 800778c:	431bde83 	.word	0x431bde83

08007790 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007798:	4b79      	ldr	r3, [pc, #484]	; (8007980 <ADC_Init+0x1f0>)
 800779a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	431a      	orrs	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	6859      	ldr	r1, [r3, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	021a      	lsls	r2, r3, #8
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80077e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6859      	ldr	r1, [r3, #4]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689a      	ldr	r2, [r3, #8]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800780a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6899      	ldr	r1, [r3, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68da      	ldr	r2, [r3, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007822:	4a58      	ldr	r2, [pc, #352]	; (8007984 <ADC_Init+0x1f4>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d022      	beq.n	800786e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007836:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6899      	ldr	r1, [r3, #8]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007858:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6899      	ldr	r1, [r3, #8]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	609a      	str	r2, [r3, #8]
 800786c:	e00f      	b.n	800788e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	689a      	ldr	r2, [r3, #8]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800787c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800788c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 0202 	bic.w	r2, r2, #2
 800789c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6899      	ldr	r1, [r3, #8]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	7e1b      	ldrb	r3, [r3, #24]
 80078a8:	005a      	lsls	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	430a      	orrs	r2, r1
 80078b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d01b      	beq.n	80078f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80078da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6859      	ldr	r1, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e6:	3b01      	subs	r3, #1
 80078e8:	035a      	lsls	r2, r3, #13
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	605a      	str	r2, [r3, #4]
 80078f2:	e007      	b.n	8007904 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007902:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007912:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	3b01      	subs	r3, #1
 8007920:	051a      	lsls	r2, r3, #20
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6899      	ldr	r1, [r3, #8]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007946:	025a      	lsls	r2, r3, #9
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689a      	ldr	r2, [r3, #8]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800795e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6899      	ldr	r1, [r3, #8]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	029a      	lsls	r2, r3, #10
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	609a      	str	r2, [r3, #8]
}
 8007974:	bf00      	nop
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	40012300 	.word	0x40012300
 8007984:	0f000001 	.word	0x0f000001

08007988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007998:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <__NVIC_SetPriorityGrouping+0x44>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80079a4:	4013      	ands	r3, r2
 80079a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80079b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80079b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079ba:	4a04      	ldr	r2, [pc, #16]	; (80079cc <__NVIC_SetPriorityGrouping+0x44>)
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	60d3      	str	r3, [r2, #12]
}
 80079c0:	bf00      	nop
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	e000ed00 	.word	0xe000ed00

080079d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079d4:	4b04      	ldr	r3, [pc, #16]	; (80079e8 <__NVIC_GetPriorityGrouping+0x18>)
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	0a1b      	lsrs	r3, r3, #8
 80079da:	f003 0307 	and.w	r3, r3, #7
}
 80079de:	4618      	mov	r0, r3
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	e000ed00 	.word	0xe000ed00

080079ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	db0b      	blt.n	8007a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	f003 021f 	and.w	r2, r3, #31
 8007a04:	4907      	ldr	r1, [pc, #28]	; (8007a24 <__NVIC_EnableIRQ+0x38>)
 8007a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a0a:	095b      	lsrs	r3, r3, #5
 8007a0c:	2001      	movs	r0, #1
 8007a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8007a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	e000e100 	.word	0xe000e100

08007a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	4603      	mov	r3, r0
 8007a30:	6039      	str	r1, [r7, #0]
 8007a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	db0a      	blt.n	8007a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	490c      	ldr	r1, [pc, #48]	; (8007a74 <__NVIC_SetPriority+0x4c>)
 8007a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a46:	0112      	lsls	r2, r2, #4
 8007a48:	b2d2      	uxtb	r2, r2
 8007a4a:	440b      	add	r3, r1
 8007a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a50:	e00a      	b.n	8007a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	4908      	ldr	r1, [pc, #32]	; (8007a78 <__NVIC_SetPriority+0x50>)
 8007a58:	79fb      	ldrb	r3, [r7, #7]
 8007a5a:	f003 030f 	and.w	r3, r3, #15
 8007a5e:	3b04      	subs	r3, #4
 8007a60:	0112      	lsls	r2, r2, #4
 8007a62:	b2d2      	uxtb	r2, r2
 8007a64:	440b      	add	r3, r1
 8007a66:	761a      	strb	r2, [r3, #24]
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	e000e100 	.word	0xe000e100
 8007a78:	e000ed00 	.word	0xe000ed00

08007a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b089      	sub	sp, #36	; 0x24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f003 0307 	and.w	r3, r3, #7
 8007a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	f1c3 0307 	rsb	r3, r3, #7
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	bf28      	it	cs
 8007a9a:	2304      	movcs	r3, #4
 8007a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	2b06      	cmp	r3, #6
 8007aa4:	d902      	bls.n	8007aac <NVIC_EncodePriority+0x30>
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	3b03      	subs	r3, #3
 8007aaa:	e000      	b.n	8007aae <NVIC_EncodePriority+0x32>
 8007aac:	2300      	movs	r3, #0
 8007aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aba:	43da      	mvns	r2, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	401a      	ands	r2, r3
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	fa01 f303 	lsl.w	r3, r1, r3
 8007ace:	43d9      	mvns	r1, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ad4:	4313      	orrs	r3, r2
         );
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3724      	adds	r7, #36	; 0x24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
	...

08007ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3b01      	subs	r3, #1
 8007af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007af4:	d301      	bcc.n	8007afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007af6:	2301      	movs	r3, #1
 8007af8:	e00f      	b.n	8007b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007afa:	4a0a      	ldr	r2, [pc, #40]	; (8007b24 <SysTick_Config+0x40>)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007b02:	210f      	movs	r1, #15
 8007b04:	f04f 30ff 	mov.w	r0, #4294967295
 8007b08:	f7ff ff8e 	bl	8007a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b0c:	4b05      	ldr	r3, [pc, #20]	; (8007b24 <SysTick_Config+0x40>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b12:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <SysTick_Config+0x40>)
 8007b14:	2207      	movs	r2, #7
 8007b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	e000e010 	.word	0xe000e010

08007b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff ff29 	bl	8007988 <__NVIC_SetPriorityGrouping>
}
 8007b36:	bf00      	nop
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b086      	sub	sp, #24
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	4603      	mov	r3, r0
 8007b46:	60b9      	str	r1, [r7, #8]
 8007b48:	607a      	str	r2, [r7, #4]
 8007b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007b50:	f7ff ff3e 	bl	80079d0 <__NVIC_GetPriorityGrouping>
 8007b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	68b9      	ldr	r1, [r7, #8]
 8007b5a:	6978      	ldr	r0, [r7, #20]
 8007b5c:	f7ff ff8e 	bl	8007a7c <NVIC_EncodePriority>
 8007b60:	4602      	mov	r2, r0
 8007b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b66:	4611      	mov	r1, r2
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7ff ff5d 	bl	8007a28 <__NVIC_SetPriority>
}
 8007b6e:	bf00      	nop
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b082      	sub	sp, #8
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7ff ff31 	bl	80079ec <__NVIC_EnableIRQ>
}
 8007b8a:	bf00      	nop
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff ffa2 	bl	8007ae4 <SysTick_Config>
 8007ba0:	4603      	mov	r3, r0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b084      	sub	sp, #16
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007bb8:	f7ff fac4 	bl	8007144 <HAL_GetTick>
 8007bbc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d008      	beq.n	8007bdc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2280      	movs	r2, #128	; 0x80
 8007bce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e052      	b.n	8007c82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0216 	bic.w	r2, r2, #22
 8007bea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	695a      	ldr	r2, [r3, #20]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bfa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d103      	bne.n	8007c0c <HAL_DMA_Abort+0x62>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d007      	beq.n	8007c1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f022 0208 	bic.w	r2, r2, #8
 8007c1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 0201 	bic.w	r2, r2, #1
 8007c2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c2c:	e013      	b.n	8007c56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007c2e:	f7ff fa89 	bl	8007144 <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	2b05      	cmp	r3, #5
 8007c3a:	d90c      	bls.n	8007c56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2203      	movs	r2, #3
 8007c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e015      	b.n	8007c82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e4      	bne.n	8007c2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c68:	223f      	movs	r2, #63	; 0x3f
 8007c6a:	409a      	lsls	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b083      	sub	sp, #12
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d004      	beq.n	8007ca8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2280      	movs	r2, #128	; 0x80
 8007ca2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e00c      	b.n	8007cc2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2205      	movs	r2, #5
 8007cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 0201 	bic.w	r2, r2, #1
 8007cbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
	...

08007cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b089      	sub	sp, #36	; 0x24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	61fb      	str	r3, [r7, #28]
 8007cea:	e159      	b.n	8007fa0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007cec:	2201      	movs	r2, #1
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	f040 8148 	bne.w	8007f9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f003 0303 	and.w	r3, r3, #3
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d005      	beq.n	8007d22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d130      	bne.n	8007d84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	2203      	movs	r2, #3
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d32:	43db      	mvns	r3, r3
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	4013      	ands	r3, r2
 8007d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	005b      	lsls	r3, r3, #1
 8007d42:	fa02 f303 	lsl.w	r3, r2, r3
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d58:	2201      	movs	r2, #1
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d60:	43db      	mvns	r3, r3
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	4013      	ands	r3, r2
 8007d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	091b      	lsrs	r3, r3, #4
 8007d6e:	f003 0201 	and.w	r2, r3, #1
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	fa02 f303 	lsl.w	r3, r2, r3
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f003 0303 	and.w	r3, r3, #3
 8007d8c:	2b03      	cmp	r3, #3
 8007d8e:	d017      	beq.n	8007dc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007da0:	43db      	mvns	r3, r3
 8007da2:	69ba      	ldr	r2, [r7, #24]
 8007da4:	4013      	ands	r3, r2
 8007da6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	689a      	ldr	r2, [r3, #8]
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	fa02 f303 	lsl.w	r3, r2, r3
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f003 0303 	and.w	r3, r3, #3
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d123      	bne.n	8007e14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	08da      	lsrs	r2, r3, #3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3208      	adds	r2, #8
 8007dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	f003 0307 	and.w	r3, r3, #7
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	220f      	movs	r2, #15
 8007de4:	fa02 f303 	lsl.w	r3, r2, r3
 8007de8:	43db      	mvns	r3, r3
 8007dea:	69ba      	ldr	r2, [r7, #24]
 8007dec:	4013      	ands	r3, r2
 8007dee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	08da      	lsrs	r2, r3, #3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	3208      	adds	r2, #8
 8007e0e:	69b9      	ldr	r1, [r7, #24]
 8007e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	2203      	movs	r2, #3
 8007e20:	fa02 f303 	lsl.w	r3, r2, r3
 8007e24:	43db      	mvns	r3, r3
 8007e26:	69ba      	ldr	r2, [r7, #24]
 8007e28:	4013      	ands	r3, r2
 8007e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	f003 0203 	and.w	r2, r3, #3
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 80a2 	beq.w	8007f9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	4b57      	ldr	r3, [pc, #348]	; (8007fb8 <HAL_GPIO_Init+0x2e8>)
 8007e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5e:	4a56      	ldr	r2, [pc, #344]	; (8007fb8 <HAL_GPIO_Init+0x2e8>)
 8007e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e64:	6453      	str	r3, [r2, #68]	; 0x44
 8007e66:	4b54      	ldr	r3, [pc, #336]	; (8007fb8 <HAL_GPIO_Init+0x2e8>)
 8007e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e72:	4a52      	ldr	r2, [pc, #328]	; (8007fbc <HAL_GPIO_Init+0x2ec>)
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	089b      	lsrs	r3, r3, #2
 8007e78:	3302      	adds	r3, #2
 8007e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	f003 0303 	and.w	r3, r3, #3
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	220f      	movs	r2, #15
 8007e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8e:	43db      	mvns	r3, r3
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	4013      	ands	r3, r2
 8007e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a49      	ldr	r2, [pc, #292]	; (8007fc0 <HAL_GPIO_Init+0x2f0>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d019      	beq.n	8007ed2 <HAL_GPIO_Init+0x202>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a48      	ldr	r2, [pc, #288]	; (8007fc4 <HAL_GPIO_Init+0x2f4>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d013      	beq.n	8007ece <HAL_GPIO_Init+0x1fe>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a47      	ldr	r2, [pc, #284]	; (8007fc8 <HAL_GPIO_Init+0x2f8>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d00d      	beq.n	8007eca <HAL_GPIO_Init+0x1fa>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a46      	ldr	r2, [pc, #280]	; (8007fcc <HAL_GPIO_Init+0x2fc>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d007      	beq.n	8007ec6 <HAL_GPIO_Init+0x1f6>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a45      	ldr	r2, [pc, #276]	; (8007fd0 <HAL_GPIO_Init+0x300>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d101      	bne.n	8007ec2 <HAL_GPIO_Init+0x1f2>
 8007ebe:	2304      	movs	r3, #4
 8007ec0:	e008      	b.n	8007ed4 <HAL_GPIO_Init+0x204>
 8007ec2:	2307      	movs	r3, #7
 8007ec4:	e006      	b.n	8007ed4 <HAL_GPIO_Init+0x204>
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e004      	b.n	8007ed4 <HAL_GPIO_Init+0x204>
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e002      	b.n	8007ed4 <HAL_GPIO_Init+0x204>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <HAL_GPIO_Init+0x204>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	69fa      	ldr	r2, [r7, #28]
 8007ed6:	f002 0203 	and.w	r2, r2, #3
 8007eda:	0092      	lsls	r2, r2, #2
 8007edc:	4093      	lsls	r3, r2
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ee4:	4935      	ldr	r1, [pc, #212]	; (8007fbc <HAL_GPIO_Init+0x2ec>)
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	089b      	lsrs	r3, r3, #2
 8007eea:	3302      	adds	r3, #2
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ef2:	4b38      	ldr	r3, [pc, #224]	; (8007fd4 <HAL_GPIO_Init+0x304>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	43db      	mvns	r3, r3
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	4013      	ands	r3, r2
 8007f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d003      	beq.n	8007f16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007f16:	4a2f      	ldr	r2, [pc, #188]	; (8007fd4 <HAL_GPIO_Init+0x304>)
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007f1c:	4b2d      	ldr	r3, [pc, #180]	; (8007fd4 <HAL_GPIO_Init+0x304>)
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	43db      	mvns	r3, r3
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	4013      	ands	r3, r2
 8007f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d003      	beq.n	8007f40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f40:	4a24      	ldr	r2, [pc, #144]	; (8007fd4 <HAL_GPIO_Init+0x304>)
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f46:	4b23      	ldr	r3, [pc, #140]	; (8007fd4 <HAL_GPIO_Init+0x304>)
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	43db      	mvns	r3, r3
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	4013      	ands	r3, r2
 8007f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f6a:	4a1a      	ldr	r2, [pc, #104]	; (8007fd4 <HAL_GPIO_Init+0x304>)
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f70:	4b18      	ldr	r3, [pc, #96]	; (8007fd4 <HAL_GPIO_Init+0x304>)
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	43db      	mvns	r3, r3
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f94:	4a0f      	ldr	r2, [pc, #60]	; (8007fd4 <HAL_GPIO_Init+0x304>)
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	61fb      	str	r3, [r7, #28]
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	2b0f      	cmp	r3, #15
 8007fa4:	f67f aea2 	bls.w	8007cec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007fa8:	bf00      	nop
 8007faa:	bf00      	nop
 8007fac:	3724      	adds	r7, #36	; 0x24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	40023800 	.word	0x40023800
 8007fbc:	40013800 	.word	0x40013800
 8007fc0:	40020000 	.word	0x40020000
 8007fc4:	40020400 	.word	0x40020400
 8007fc8:	40020800 	.word	0x40020800
 8007fcc:	40020c00 	.word	0x40020c00
 8007fd0:	40021000 	.word	0x40021000
 8007fd4:	40013c00 	.word	0x40013c00

08007fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	807b      	strh	r3, [r7, #2]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007fe8:	787b      	ldrb	r3, [r7, #1]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fee:	887a      	ldrh	r2, [r7, #2]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ff4:	e003      	b.n	8007ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007ff6:	887b      	ldrh	r3, [r7, #2]
 8007ff8:	041a      	lsls	r2, r3, #16
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	619a      	str	r2, [r3, #24]
}
 8007ffe:	bf00      	nop
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
	...

0800800c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e12b      	b.n	8008276 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d106      	bne.n	8008038 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7f9 fc5a 	bl	80018ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2224      	movs	r2, #36	; 0x24
 800803c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0201 	bic.w	r2, r2, #1
 800804e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800805e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800806e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008070:	f001 fbae 	bl	80097d0 <HAL_RCC_GetPCLK1Freq>
 8008074:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	4a81      	ldr	r2, [pc, #516]	; (8008280 <HAL_I2C_Init+0x274>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d807      	bhi.n	8008090 <HAL_I2C_Init+0x84>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4a80      	ldr	r2, [pc, #512]	; (8008284 <HAL_I2C_Init+0x278>)
 8008084:	4293      	cmp	r3, r2
 8008086:	bf94      	ite	ls
 8008088:	2301      	movls	r3, #1
 800808a:	2300      	movhi	r3, #0
 800808c:	b2db      	uxtb	r3, r3
 800808e:	e006      	b.n	800809e <HAL_I2C_Init+0x92>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4a7d      	ldr	r2, [pc, #500]	; (8008288 <HAL_I2C_Init+0x27c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	bf94      	ite	ls
 8008098:	2301      	movls	r3, #1
 800809a:	2300      	movhi	r3, #0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e0e7      	b.n	8008276 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4a78      	ldr	r2, [pc, #480]	; (800828c <HAL_I2C_Init+0x280>)
 80080aa:	fba2 2303 	umull	r2, r3, r2, r3
 80080ae:	0c9b      	lsrs	r3, r3, #18
 80080b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	4a6a      	ldr	r2, [pc, #424]	; (8008280 <HAL_I2C_Init+0x274>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d802      	bhi.n	80080e0 <HAL_I2C_Init+0xd4>
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	3301      	adds	r3, #1
 80080de:	e009      	b.n	80080f4 <HAL_I2C_Init+0xe8>
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80080e6:	fb02 f303 	mul.w	r3, r2, r3
 80080ea:	4a69      	ldr	r2, [pc, #420]	; (8008290 <HAL_I2C_Init+0x284>)
 80080ec:	fba2 2303 	umull	r2, r3, r2, r3
 80080f0:	099b      	lsrs	r3, r3, #6
 80080f2:	3301      	adds	r3, #1
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	6812      	ldr	r2, [r2, #0]
 80080f8:	430b      	orrs	r3, r1
 80080fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008106:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	495c      	ldr	r1, [pc, #368]	; (8008280 <HAL_I2C_Init+0x274>)
 8008110:	428b      	cmp	r3, r1
 8008112:	d819      	bhi.n	8008148 <HAL_I2C_Init+0x13c>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	1e59      	subs	r1, r3, #1
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	005b      	lsls	r3, r3, #1
 800811e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008122:	1c59      	adds	r1, r3, #1
 8008124:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008128:	400b      	ands	r3, r1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <HAL_I2C_Init+0x138>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	1e59      	subs	r1, r3, #1
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	005b      	lsls	r3, r3, #1
 8008138:	fbb1 f3f3 	udiv	r3, r1, r3
 800813c:	3301      	adds	r3, #1
 800813e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008142:	e051      	b.n	80081e8 <HAL_I2C_Init+0x1dc>
 8008144:	2304      	movs	r3, #4
 8008146:	e04f      	b.n	80081e8 <HAL_I2C_Init+0x1dc>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d111      	bne.n	8008174 <HAL_I2C_Init+0x168>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	1e58      	subs	r0, r3, #1
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6859      	ldr	r1, [r3, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	005b      	lsls	r3, r3, #1
 800815c:	440b      	add	r3, r1
 800815e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008162:	3301      	adds	r3, #1
 8008164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008168:	2b00      	cmp	r3, #0
 800816a:	bf0c      	ite	eq
 800816c:	2301      	moveq	r3, #1
 800816e:	2300      	movne	r3, #0
 8008170:	b2db      	uxtb	r3, r3
 8008172:	e012      	b.n	800819a <HAL_I2C_Init+0x18e>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	1e58      	subs	r0, r3, #1
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6859      	ldr	r1, [r3, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	440b      	add	r3, r1
 8008182:	0099      	lsls	r1, r3, #2
 8008184:	440b      	add	r3, r1
 8008186:	fbb0 f3f3 	udiv	r3, r0, r3
 800818a:	3301      	adds	r3, #1
 800818c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008190:	2b00      	cmp	r3, #0
 8008192:	bf0c      	ite	eq
 8008194:	2301      	moveq	r3, #1
 8008196:	2300      	movne	r3, #0
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <HAL_I2C_Init+0x196>
 800819e:	2301      	movs	r3, #1
 80081a0:	e022      	b.n	80081e8 <HAL_I2C_Init+0x1dc>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10e      	bne.n	80081c8 <HAL_I2C_Init+0x1bc>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	1e58      	subs	r0, r3, #1
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6859      	ldr	r1, [r3, #4]
 80081b2:	460b      	mov	r3, r1
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	440b      	add	r3, r1
 80081b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80081bc:	3301      	adds	r3, #1
 80081be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081c6:	e00f      	b.n	80081e8 <HAL_I2C_Init+0x1dc>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	1e58      	subs	r0, r3, #1
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6859      	ldr	r1, [r3, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	440b      	add	r3, r1
 80081d6:	0099      	lsls	r1, r3, #2
 80081d8:	440b      	add	r3, r1
 80081da:	fbb0 f3f3 	udiv	r3, r0, r3
 80081de:	3301      	adds	r3, #1
 80081e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	6809      	ldr	r1, [r1, #0]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	69da      	ldr	r2, [r3, #28]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	431a      	orrs	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008216:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	6911      	ldr	r1, [r2, #16]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	68d2      	ldr	r2, [r2, #12]
 8008222:	4311      	orrs	r1, r2
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	6812      	ldr	r2, [r2, #0]
 8008228:	430b      	orrs	r3, r1
 800822a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	695a      	ldr	r2, [r3, #20]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	431a      	orrs	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	430a      	orrs	r2, r1
 8008246:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f042 0201 	orr.w	r2, r2, #1
 8008256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2220      	movs	r2, #32
 8008262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	000186a0 	.word	0x000186a0
 8008284:	001e847f 	.word	0x001e847f
 8008288:	003d08ff 	.word	0x003d08ff
 800828c:	431bde83 	.word	0x431bde83
 8008290:	10624dd3 	.word	0x10624dd3

08008294 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b088      	sub	sp, #32
 8008298:	af02      	add	r7, sp, #8
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	607a      	str	r2, [r7, #4]
 800829e:	461a      	mov	r2, r3
 80082a0:	460b      	mov	r3, r1
 80082a2:	817b      	strh	r3, [r7, #10]
 80082a4:	4613      	mov	r3, r2
 80082a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80082a8:	f7fe ff4c 	bl	8007144 <HAL_GetTick>
 80082ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b20      	cmp	r3, #32
 80082b8:	f040 80e0 	bne.w	800847c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	2319      	movs	r3, #25
 80082c2:	2201      	movs	r2, #1
 80082c4:	4970      	ldr	r1, [pc, #448]	; (8008488 <HAL_I2C_Master_Transmit+0x1f4>)
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 fc58 	bl	8008b7c <I2C_WaitOnFlagUntilTimeout>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80082d2:	2302      	movs	r3, #2
 80082d4:	e0d3      	b.n	800847e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d101      	bne.n	80082e4 <HAL_I2C_Master_Transmit+0x50>
 80082e0:	2302      	movs	r3, #2
 80082e2:	e0cc      	b.n	800847e <HAL_I2C_Master_Transmit+0x1ea>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d007      	beq.n	800830a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f042 0201 	orr.w	r2, r2, #1
 8008308:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008318:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2221      	movs	r2, #33	; 0x21
 800831e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2210      	movs	r2, #16
 8008326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	893a      	ldrh	r2, [r7, #8]
 800833a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008340:	b29a      	uxth	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	4a50      	ldr	r2, [pc, #320]	; (800848c <HAL_I2C_Master_Transmit+0x1f8>)
 800834a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800834c:	8979      	ldrh	r1, [r7, #10]
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	6a3a      	ldr	r2, [r7, #32]
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 fac2 	bl	80088dc <I2C_MasterRequestWrite>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e08d      	b.n	800847e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008362:	2300      	movs	r3, #0
 8008364:	613b      	str	r3, [r7, #16]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	613b      	str	r3, [r7, #16]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	613b      	str	r3, [r7, #16]
 8008376:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008378:	e066      	b.n	8008448 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	6a39      	ldr	r1, [r7, #32]
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 fcd2 	bl	8008d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00d      	beq.n	80083a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	2b04      	cmp	r3, #4
 8008390:	d107      	bne.n	80083a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e06b      	b.n	800847e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083aa:	781a      	ldrb	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	3b01      	subs	r3, #1
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ce:	3b01      	subs	r3, #1
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d11b      	bne.n	800841c <HAL_I2C_Master_Transmit+0x188>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d017      	beq.n	800841c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	781a      	ldrb	r2, [r3, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008406:	b29b      	uxth	r3, r3
 8008408:	3b01      	subs	r3, #1
 800840a:	b29a      	uxth	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008414:	3b01      	subs	r3, #1
 8008416:	b29a      	uxth	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	6a39      	ldr	r1, [r7, #32]
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 fcc2 	bl	8008daa <I2C_WaitOnBTFFlagUntilTimeout>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00d      	beq.n	8008448 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008430:	2b04      	cmp	r3, #4
 8008432:	d107      	bne.n	8008444 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008442:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e01a      	b.n	800847e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800844c:	2b00      	cmp	r3, #0
 800844e:	d194      	bne.n	800837a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800845e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2220      	movs	r2, #32
 8008464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	e000      	b.n	800847e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800847c:	2302      	movs	r3, #2
  }
}
 800847e:	4618      	mov	r0, r3
 8008480:	3718      	adds	r7, #24
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	00100002 	.word	0x00100002
 800848c:	ffff0000 	.word	0xffff0000

08008490 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b08c      	sub	sp, #48	; 0x30
 8008494:	af02      	add	r7, sp, #8
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	607a      	str	r2, [r7, #4]
 800849a:	461a      	mov	r2, r3
 800849c:	460b      	mov	r3, r1
 800849e:	817b      	strh	r3, [r7, #10]
 80084a0:	4613      	mov	r3, r2
 80084a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80084a4:	f7fe fe4e 	bl	8007144 <HAL_GetTick>
 80084a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b20      	cmp	r3, #32
 80084b4:	f040 820b 	bne.w	80088ce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	2319      	movs	r3, #25
 80084be:	2201      	movs	r2, #1
 80084c0:	497c      	ldr	r1, [pc, #496]	; (80086b4 <HAL_I2C_Master_Receive+0x224>)
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f000 fb5a 	bl	8008b7c <I2C_WaitOnFlagUntilTimeout>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80084ce:	2302      	movs	r3, #2
 80084d0:	e1fe      	b.n	80088d0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d101      	bne.n	80084e0 <HAL_I2C_Master_Receive+0x50>
 80084dc:	2302      	movs	r3, #2
 80084de:	e1f7      	b.n	80088d0 <HAL_I2C_Master_Receive+0x440>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d007      	beq.n	8008506 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f042 0201 	orr.w	r2, r2, #1
 8008504:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008514:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2222      	movs	r2, #34	; 0x22
 800851a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2210      	movs	r2, #16
 8008522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	893a      	ldrh	r2, [r7, #8]
 8008536:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800853c:	b29a      	uxth	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4a5c      	ldr	r2, [pc, #368]	; (80086b8 <HAL_I2C_Master_Receive+0x228>)
 8008546:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008548:	8979      	ldrh	r1, [r7, #10]
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f000 fa46 	bl	80089e0 <I2C_MasterRequestRead>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e1b8      	b.n	80088d0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008562:	2b00      	cmp	r3, #0
 8008564:	d113      	bne.n	800858e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008566:	2300      	movs	r3, #0
 8008568:	623b      	str	r3, [r7, #32]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	623b      	str	r3, [r7, #32]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	623b      	str	r3, [r7, #32]
 800857a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800858a:	601a      	str	r2, [r3, #0]
 800858c:	e18c      	b.n	80088a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008592:	2b01      	cmp	r3, #1
 8008594:	d11b      	bne.n	80085ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085a6:	2300      	movs	r3, #0
 80085a8:	61fb      	str	r3, [r7, #28]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	61fb      	str	r3, [r7, #28]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	61fb      	str	r3, [r7, #28]
 80085ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	e16c      	b.n	80088a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d11b      	bne.n	800860e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085f6:	2300      	movs	r3, #0
 80085f8:	61bb      	str	r3, [r7, #24]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	61bb      	str	r3, [r7, #24]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	61bb      	str	r3, [r7, #24]
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	e14c      	b.n	80088a8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800861c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800861e:	2300      	movs	r3, #0
 8008620:	617b      	str	r3, [r7, #20]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	617b      	str	r3, [r7, #20]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	617b      	str	r3, [r7, #20]
 8008632:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008634:	e138      	b.n	80088a8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800863a:	2b03      	cmp	r3, #3
 800863c:	f200 80f1 	bhi.w	8008822 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008644:	2b01      	cmp	r3, #1
 8008646:	d123      	bne.n	8008690 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800864a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 fbed 	bl	8008e2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d001      	beq.n	800865c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e139      	b.n	80088d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	691a      	ldr	r2, [r3, #16]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	b2d2      	uxtb	r2, r2
 8008668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008678:	3b01      	subs	r3, #1
 800867a:	b29a      	uxth	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008684:	b29b      	uxth	r3, r3
 8008686:	3b01      	subs	r3, #1
 8008688:	b29a      	uxth	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800868e:	e10b      	b.n	80088a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008694:	2b02      	cmp	r3, #2
 8008696:	d14e      	bne.n	8008736 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	2200      	movs	r2, #0
 80086a0:	4906      	ldr	r1, [pc, #24]	; (80086bc <HAL_I2C_Master_Receive+0x22c>)
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f000 fa6a 	bl	8008b7c <I2C_WaitOnFlagUntilTimeout>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d008      	beq.n	80086c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e10e      	b.n	80088d0 <HAL_I2C_Master_Receive+0x440>
 80086b2:	bf00      	nop
 80086b4:	00100002 	.word	0x00100002
 80086b8:	ffff0000 	.word	0xffff0000
 80086bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	691a      	ldr	r2, [r3, #16]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086da:	b2d2      	uxtb	r2, r2
 80086dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ec:	3b01      	subs	r3, #1
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	3b01      	subs	r3, #1
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	691a      	ldr	r2, [r3, #16]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	b2d2      	uxtb	r2, r2
 800870e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	1c5a      	adds	r2, r3, #1
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800871e:	3b01      	subs	r3, #1
 8008720:	b29a      	uxth	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800872a:	b29b      	uxth	r3, r3
 800872c:	3b01      	subs	r3, #1
 800872e:	b29a      	uxth	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008734:	e0b8      	b.n	80088a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873c:	2200      	movs	r2, #0
 800873e:	4966      	ldr	r1, [pc, #408]	; (80088d8 <HAL_I2C_Master_Receive+0x448>)
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 fa1b 	bl	8008b7c <I2C_WaitOnFlagUntilTimeout>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e0bf      	b.n	80088d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800875e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	691a      	ldr	r2, [r3, #16]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800877c:	3b01      	subs	r3, #1
 800877e:	b29a      	uxth	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008788:	b29b      	uxth	r3, r3
 800878a:	3b01      	subs	r3, #1
 800878c:	b29a      	uxth	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008798:	2200      	movs	r2, #0
 800879a:	494f      	ldr	r1, [pc, #316]	; (80088d8 <HAL_I2C_Master_Receive+0x448>)
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f000 f9ed 	bl	8008b7c <I2C_WaitOnFlagUntilTimeout>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e091      	b.n	80088d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	691a      	ldr	r2, [r3, #16]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	b2d2      	uxtb	r2, r2
 80087c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087d8:	3b01      	subs	r3, #1
 80087da:	b29a      	uxth	r2, r3
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	691a      	ldr	r2, [r3, #16]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	b2d2      	uxtb	r2, r2
 80087fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	1c5a      	adds	r2, r3, #1
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800880a:	3b01      	subs	r3, #1
 800880c:	b29a      	uxth	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008816:	b29b      	uxth	r3, r3
 8008818:	3b01      	subs	r3, #1
 800881a:	b29a      	uxth	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008820:	e042      	b.n	80088a8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f000 fb00 	bl	8008e2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e04c      	b.n	80088d0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	691a      	ldr	r2, [r3, #16]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	b2d2      	uxtb	r2, r2
 8008842:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008852:	3b01      	subs	r3, #1
 8008854:	b29a      	uxth	r2, r3
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800885e:	b29b      	uxth	r3, r3
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	f003 0304 	and.w	r3, r3, #4
 8008872:	2b04      	cmp	r3, #4
 8008874:	d118      	bne.n	80088a8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	691a      	ldr	r2, [r3, #16]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	b2d2      	uxtb	r2, r2
 8008882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008892:	3b01      	subs	r3, #1
 8008894:	b29a      	uxth	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800889e:	b29b      	uxth	r3, r3
 80088a0:	3b01      	subs	r3, #1
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f47f aec2 	bne.w	8008636 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2220      	movs	r2, #32
 80088b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	e000      	b.n	80088d0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80088ce:	2302      	movs	r3, #2
  }
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3728      	adds	r7, #40	; 0x28
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	00010004 	.word	0x00010004

080088dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b088      	sub	sp, #32
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	607a      	str	r2, [r7, #4]
 80088e6:	603b      	str	r3, [r7, #0]
 80088e8:	460b      	mov	r3, r1
 80088ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2b08      	cmp	r3, #8
 80088f6:	d006      	beq.n	8008906 <I2C_MasterRequestWrite+0x2a>
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d003      	beq.n	8008906 <I2C_MasterRequestWrite+0x2a>
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008904:	d108      	bne.n	8008918 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	e00b      	b.n	8008930 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891c:	2b12      	cmp	r3, #18
 800891e:	d107      	bne.n	8008930 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800892e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 f91d 	bl	8008b7c <I2C_WaitOnFlagUntilTimeout>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00d      	beq.n	8008964 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008956:	d103      	bne.n	8008960 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800895e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e035      	b.n	80089d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800896c:	d108      	bne.n	8008980 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800896e:	897b      	ldrh	r3, [r7, #10]
 8008970:	b2db      	uxtb	r3, r3
 8008972:	461a      	mov	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800897c:	611a      	str	r2, [r3, #16]
 800897e:	e01b      	b.n	80089b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008980:	897b      	ldrh	r3, [r7, #10]
 8008982:	11db      	asrs	r3, r3, #7
 8008984:	b2db      	uxtb	r3, r3
 8008986:	f003 0306 	and.w	r3, r3, #6
 800898a:	b2db      	uxtb	r3, r3
 800898c:	f063 030f 	orn	r3, r3, #15
 8008990:	b2da      	uxtb	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	490e      	ldr	r1, [pc, #56]	; (80089d8 <I2C_MasterRequestWrite+0xfc>)
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 f943 	bl	8008c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d001      	beq.n	80089ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e010      	b.n	80089d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80089ae:	897b      	ldrh	r3, [r7, #10]
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	4907      	ldr	r1, [pc, #28]	; (80089dc <I2C_MasterRequestWrite+0x100>)
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 f933 	bl	8008c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e000      	b.n	80089d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3718      	adds	r7, #24
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	00010008 	.word	0x00010008
 80089dc:	00010002 	.word	0x00010002

080089e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b088      	sub	sp, #32
 80089e4:	af02      	add	r7, sp, #8
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	607a      	str	r2, [r7, #4]
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	460b      	mov	r3, r1
 80089ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a04:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d006      	beq.n	8008a1a <I2C_MasterRequestRead+0x3a>
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d003      	beq.n	8008a1a <I2C_MasterRequestRead+0x3a>
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a18:	d108      	bne.n	8008a2c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a28:	601a      	str	r2, [r3, #0]
 8008a2a:	e00b      	b.n	8008a44 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a30:	2b11      	cmp	r3, #17
 8008a32:	d107      	bne.n	8008a44 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 f893 	bl	8008b7c <I2C_WaitOnFlagUntilTimeout>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00d      	beq.n	8008a78 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a6a:	d103      	bne.n	8008a74 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e079      	b.n	8008b6c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a80:	d108      	bne.n	8008a94 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008a82:	897b      	ldrh	r3, [r7, #10]
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	f043 0301 	orr.w	r3, r3, #1
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	611a      	str	r2, [r3, #16]
 8008a92:	e05f      	b.n	8008b54 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008a94:	897b      	ldrh	r3, [r7, #10]
 8008a96:	11db      	asrs	r3, r3, #7
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	f003 0306 	and.w	r3, r3, #6
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	f063 030f 	orn	r3, r3, #15
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	4930      	ldr	r1, [pc, #192]	; (8008b74 <I2C_MasterRequestRead+0x194>)
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f000 f8b9 	bl	8008c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e054      	b.n	8008b6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008ac2:	897b      	ldrh	r3, [r7, #10]
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	4929      	ldr	r1, [pc, #164]	; (8008b78 <I2C_MasterRequestRead+0x198>)
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 f8a9 	bl	8008c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e044      	b.n	8008b6c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	613b      	str	r3, [r7, #16]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	613b      	str	r3, [r7, #16]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	613b      	str	r3, [r7, #16]
 8008af6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b06:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 f831 	bl	8008b7c <I2C_WaitOnFlagUntilTimeout>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00d      	beq.n	8008b3c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b2e:	d103      	bne.n	8008b38 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b36:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e017      	b.n	8008b6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008b3c:	897b      	ldrh	r3, [r7, #10]
 8008b3e:	11db      	asrs	r3, r3, #7
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	f003 0306 	and.w	r3, r3, #6
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	f063 030e 	orn	r3, r3, #14
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	4907      	ldr	r1, [pc, #28]	; (8008b78 <I2C_MasterRequestRead+0x198>)
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f000 f865 	bl	8008c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e000      	b.n	8008b6c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	00010008 	.word	0x00010008
 8008b78:	00010002 	.word	0x00010002

08008b7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	603b      	str	r3, [r7, #0]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b8c:	e025      	b.n	8008bda <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b94:	d021      	beq.n	8008bda <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b96:	f7fe fad5 	bl	8007144 <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d302      	bcc.n	8008bac <I2C_WaitOnFlagUntilTimeout+0x30>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d116      	bne.n	8008bda <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc6:	f043 0220 	orr.w	r2, r3, #32
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e023      	b.n	8008c22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	0c1b      	lsrs	r3, r3, #16
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d10d      	bne.n	8008c00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	43da      	mvns	r2, r3
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	4013      	ands	r3, r2
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bf0c      	ite	eq
 8008bf6:	2301      	moveq	r3, #1
 8008bf8:	2300      	movne	r3, #0
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	e00c      	b.n	8008c1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	43da      	mvns	r2, r3
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	bf0c      	ite	eq
 8008c12:	2301      	moveq	r3, #1
 8008c14:	2300      	movne	r3, #0
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	461a      	mov	r2, r3
 8008c1a:	79fb      	ldrb	r3, [r7, #7]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d0b6      	beq.n	8008b8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	607a      	str	r2, [r7, #4]
 8008c36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008c38:	e051      	b.n	8008cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c48:	d123      	bne.n	8008c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2220      	movs	r2, #32
 8008c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	f043 0204 	orr.w	r2, r3, #4
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e046      	b.n	8008d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c98:	d021      	beq.n	8008cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c9a:	f7fe fa53 	bl	8007144 <HAL_GetTick>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d302      	bcc.n	8008cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d116      	bne.n	8008cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cca:	f043 0220 	orr.w	r2, r3, #32
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e020      	b.n	8008d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	0c1b      	lsrs	r3, r3, #16
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d10c      	bne.n	8008d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	43da      	mvns	r2, r3
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	bf14      	ite	ne
 8008cfa:	2301      	movne	r3, #1
 8008cfc:	2300      	moveq	r3, #0
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	e00b      	b.n	8008d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	43da      	mvns	r2, r3
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	bf14      	ite	ne
 8008d14:	2301      	movne	r3, #1
 8008d16:	2300      	moveq	r3, #0
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d18d      	bne.n	8008c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d34:	e02d      	b.n	8008d92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 f8ce 	bl	8008ed8 <I2C_IsAcknowledgeFailed>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e02d      	b.n	8008da2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4c:	d021      	beq.n	8008d92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d4e:	f7fe f9f9 	bl	8007144 <HAL_GetTick>
 8008d52:	4602      	mov	r2, r0
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d302      	bcc.n	8008d64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d116      	bne.n	8008d92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7e:	f043 0220 	orr.w	r2, r3, #32
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e007      	b.n	8008da2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d9c:	2b80      	cmp	r3, #128	; 0x80
 8008d9e:	d1ca      	bne.n	8008d36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	60f8      	str	r0, [r7, #12]
 8008db2:	60b9      	str	r1, [r7, #8]
 8008db4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008db6:	e02d      	b.n	8008e14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f000 f88d 	bl	8008ed8 <I2C_IsAcknowledgeFailed>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e02d      	b.n	8008e24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dce:	d021      	beq.n	8008e14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dd0:	f7fe f9b8 	bl	8007144 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d302      	bcc.n	8008de6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d116      	bne.n	8008e14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2220      	movs	r2, #32
 8008df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e00:	f043 0220 	orr.w	r2, r3, #32
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e007      	b.n	8008e24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	f003 0304 	and.w	r3, r3, #4
 8008e1e:	2b04      	cmp	r3, #4
 8008e20:	d1ca      	bne.n	8008db8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008e38:	e042      	b.n	8008ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	f003 0310 	and.w	r3, r3, #16
 8008e44:	2b10      	cmp	r3, #16
 8008e46:	d119      	bne.n	8008e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f06f 0210 	mvn.w	r2, #16
 8008e50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e029      	b.n	8008ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e7c:	f7fe f962 	bl	8007144 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d302      	bcc.n	8008e92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d116      	bne.n	8008ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2220      	movs	r2, #32
 8008e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eac:	f043 0220 	orr.w	r2, r3, #32
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e007      	b.n	8008ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eca:	2b40      	cmp	r3, #64	; 0x40
 8008ecc:	d1b5      	bne.n	8008e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eee:	d11b      	bne.n	8008f28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ef8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f14:	f043 0204 	orr.w	r2, r3, #4
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e000      	b.n	8008f2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
	...

08008f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d101      	bne.n	8008f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e264      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d075      	beq.n	8009042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008f56:	4ba3      	ldr	r3, [pc, #652]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f003 030c 	and.w	r3, r3, #12
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	d00c      	beq.n	8008f7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f62:	4ba0      	ldr	r3, [pc, #640]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008f6a:	2b08      	cmp	r3, #8
 8008f6c:	d112      	bne.n	8008f94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f6e:	4b9d      	ldr	r3, [pc, #628]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f7a:	d10b      	bne.n	8008f94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f7c:	4b99      	ldr	r3, [pc, #612]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d05b      	beq.n	8009040 <HAL_RCC_OscConfig+0x108>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d157      	bne.n	8009040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e23f      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f9c:	d106      	bne.n	8008fac <HAL_RCC_OscConfig+0x74>
 8008f9e:	4b91      	ldr	r3, [pc, #580]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a90      	ldr	r2, [pc, #576]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8008fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	e01d      	b.n	8008fe8 <HAL_RCC_OscConfig+0xb0>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fb4:	d10c      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x98>
 8008fb6:	4b8b      	ldr	r3, [pc, #556]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a8a      	ldr	r2, [pc, #552]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8008fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fc0:	6013      	str	r3, [r2, #0]
 8008fc2:	4b88      	ldr	r3, [pc, #544]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a87      	ldr	r2, [pc, #540]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8008fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	e00b      	b.n	8008fe8 <HAL_RCC_OscConfig+0xb0>
 8008fd0:	4b84      	ldr	r3, [pc, #528]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a83      	ldr	r2, [pc, #524]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8008fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fda:	6013      	str	r3, [r2, #0]
 8008fdc:	4b81      	ldr	r3, [pc, #516]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a80      	ldr	r2, [pc, #512]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8008fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d013      	beq.n	8009018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ff0:	f7fe f8a8 	bl	8007144 <HAL_GetTick>
 8008ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ff6:	e008      	b.n	800900a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ff8:	f7fe f8a4 	bl	8007144 <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	2b64      	cmp	r3, #100	; 0x64
 8009004:	d901      	bls.n	800900a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e204      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800900a:	4b76      	ldr	r3, [pc, #472]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0f0      	beq.n	8008ff8 <HAL_RCC_OscConfig+0xc0>
 8009016:	e014      	b.n	8009042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009018:	f7fe f894 	bl	8007144 <HAL_GetTick>
 800901c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800901e:	e008      	b.n	8009032 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009020:	f7fe f890 	bl	8007144 <HAL_GetTick>
 8009024:	4602      	mov	r2, r0
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	2b64      	cmp	r3, #100	; 0x64
 800902c:	d901      	bls.n	8009032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800902e:	2303      	movs	r3, #3
 8009030:	e1f0      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009032:	4b6c      	ldr	r3, [pc, #432]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1f0      	bne.n	8009020 <HAL_RCC_OscConfig+0xe8>
 800903e:	e000      	b.n	8009042 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0302 	and.w	r3, r3, #2
 800904a:	2b00      	cmp	r3, #0
 800904c:	d063      	beq.n	8009116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800904e:	4b65      	ldr	r3, [pc, #404]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f003 030c 	and.w	r3, r3, #12
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00b      	beq.n	8009072 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800905a:	4b62      	ldr	r3, [pc, #392]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009062:	2b08      	cmp	r3, #8
 8009064:	d11c      	bne.n	80090a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009066:	4b5f      	ldr	r3, [pc, #380]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d116      	bne.n	80090a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009072:	4b5c      	ldr	r3, [pc, #368]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0302 	and.w	r3, r3, #2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d005      	beq.n	800908a <HAL_RCC_OscConfig+0x152>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d001      	beq.n	800908a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e1c4      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800908a:	4b56      	ldr	r3, [pc, #344]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	00db      	lsls	r3, r3, #3
 8009098:	4952      	ldr	r1, [pc, #328]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 800909a:	4313      	orrs	r3, r2
 800909c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800909e:	e03a      	b.n	8009116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d020      	beq.n	80090ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090a8:	4b4f      	ldr	r3, [pc, #316]	; (80091e8 <HAL_RCC_OscConfig+0x2b0>)
 80090aa:	2201      	movs	r2, #1
 80090ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ae:	f7fe f849 	bl	8007144 <HAL_GetTick>
 80090b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090b4:	e008      	b.n	80090c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090b6:	f7fe f845 	bl	8007144 <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d901      	bls.n	80090c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e1a5      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090c8:	4b46      	ldr	r3, [pc, #280]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0302 	and.w	r3, r3, #2
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d0f0      	beq.n	80090b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090d4:	4b43      	ldr	r3, [pc, #268]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	00db      	lsls	r3, r3, #3
 80090e2:	4940      	ldr	r1, [pc, #256]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	600b      	str	r3, [r1, #0]
 80090e8:	e015      	b.n	8009116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090ea:	4b3f      	ldr	r3, [pc, #252]	; (80091e8 <HAL_RCC_OscConfig+0x2b0>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090f0:	f7fe f828 	bl	8007144 <HAL_GetTick>
 80090f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090f6:	e008      	b.n	800910a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090f8:	f7fe f824 	bl	8007144 <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	2b02      	cmp	r3, #2
 8009104:	d901      	bls.n	800910a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e184      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800910a:	4b36      	ldr	r3, [pc, #216]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0302 	and.w	r3, r3, #2
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1f0      	bne.n	80090f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0308 	and.w	r3, r3, #8
 800911e:	2b00      	cmp	r3, #0
 8009120:	d030      	beq.n	8009184 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d016      	beq.n	8009158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800912a:	4b30      	ldr	r3, [pc, #192]	; (80091ec <HAL_RCC_OscConfig+0x2b4>)
 800912c:	2201      	movs	r2, #1
 800912e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009130:	f7fe f808 	bl	8007144 <HAL_GetTick>
 8009134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009136:	e008      	b.n	800914a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009138:	f7fe f804 	bl	8007144 <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	2b02      	cmp	r3, #2
 8009144:	d901      	bls.n	800914a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e164      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800914a:	4b26      	ldr	r3, [pc, #152]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 800914c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800914e:	f003 0302 	and.w	r3, r3, #2
 8009152:	2b00      	cmp	r3, #0
 8009154:	d0f0      	beq.n	8009138 <HAL_RCC_OscConfig+0x200>
 8009156:	e015      	b.n	8009184 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009158:	4b24      	ldr	r3, [pc, #144]	; (80091ec <HAL_RCC_OscConfig+0x2b4>)
 800915a:	2200      	movs	r2, #0
 800915c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800915e:	f7fd fff1 	bl	8007144 <HAL_GetTick>
 8009162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009164:	e008      	b.n	8009178 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009166:	f7fd ffed 	bl	8007144 <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	2b02      	cmp	r3, #2
 8009172:	d901      	bls.n	8009178 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e14d      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009178:	4b1a      	ldr	r3, [pc, #104]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 800917a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800917c:	f003 0302 	and.w	r3, r3, #2
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1f0      	bne.n	8009166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 0304 	and.w	r3, r3, #4
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 80a0 	beq.w	80092d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009192:	2300      	movs	r3, #0
 8009194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009196:	4b13      	ldr	r3, [pc, #76]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 8009198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10f      	bne.n	80091c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091a2:	2300      	movs	r3, #0
 80091a4:	60bb      	str	r3, [r7, #8]
 80091a6:	4b0f      	ldr	r3, [pc, #60]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 80091a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091aa:	4a0e      	ldr	r2, [pc, #56]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 80091ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091b0:	6413      	str	r3, [r2, #64]	; 0x40
 80091b2:	4b0c      	ldr	r3, [pc, #48]	; (80091e4 <HAL_RCC_OscConfig+0x2ac>)
 80091b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ba:	60bb      	str	r3, [r7, #8]
 80091bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091be:	2301      	movs	r3, #1
 80091c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091c2:	4b0b      	ldr	r3, [pc, #44]	; (80091f0 <HAL_RCC_OscConfig+0x2b8>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d121      	bne.n	8009212 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80091ce:	4b08      	ldr	r3, [pc, #32]	; (80091f0 <HAL_RCC_OscConfig+0x2b8>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a07      	ldr	r2, [pc, #28]	; (80091f0 <HAL_RCC_OscConfig+0x2b8>)
 80091d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80091da:	f7fd ffb3 	bl	8007144 <HAL_GetTick>
 80091de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091e0:	e011      	b.n	8009206 <HAL_RCC_OscConfig+0x2ce>
 80091e2:	bf00      	nop
 80091e4:	40023800 	.word	0x40023800
 80091e8:	42470000 	.word	0x42470000
 80091ec:	42470e80 	.word	0x42470e80
 80091f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091f4:	f7fd ffa6 	bl	8007144 <HAL_GetTick>
 80091f8:	4602      	mov	r2, r0
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d901      	bls.n	8009206 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e106      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009206:	4b85      	ldr	r3, [pc, #532]	; (800941c <HAL_RCC_OscConfig+0x4e4>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800920e:	2b00      	cmp	r3, #0
 8009210:	d0f0      	beq.n	80091f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d106      	bne.n	8009228 <HAL_RCC_OscConfig+0x2f0>
 800921a:	4b81      	ldr	r3, [pc, #516]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 800921c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921e:	4a80      	ldr	r2, [pc, #512]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 8009220:	f043 0301 	orr.w	r3, r3, #1
 8009224:	6713      	str	r3, [r2, #112]	; 0x70
 8009226:	e01c      	b.n	8009262 <HAL_RCC_OscConfig+0x32a>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	2b05      	cmp	r3, #5
 800922e:	d10c      	bne.n	800924a <HAL_RCC_OscConfig+0x312>
 8009230:	4b7b      	ldr	r3, [pc, #492]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 8009232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009234:	4a7a      	ldr	r2, [pc, #488]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 8009236:	f043 0304 	orr.w	r3, r3, #4
 800923a:	6713      	str	r3, [r2, #112]	; 0x70
 800923c:	4b78      	ldr	r3, [pc, #480]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 800923e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009240:	4a77      	ldr	r2, [pc, #476]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 8009242:	f043 0301 	orr.w	r3, r3, #1
 8009246:	6713      	str	r3, [r2, #112]	; 0x70
 8009248:	e00b      	b.n	8009262 <HAL_RCC_OscConfig+0x32a>
 800924a:	4b75      	ldr	r3, [pc, #468]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 800924c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800924e:	4a74      	ldr	r2, [pc, #464]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 8009250:	f023 0301 	bic.w	r3, r3, #1
 8009254:	6713      	str	r3, [r2, #112]	; 0x70
 8009256:	4b72      	ldr	r3, [pc, #456]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 8009258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925a:	4a71      	ldr	r2, [pc, #452]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 800925c:	f023 0304 	bic.w	r3, r3, #4
 8009260:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d015      	beq.n	8009296 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800926a:	f7fd ff6b 	bl	8007144 <HAL_GetTick>
 800926e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009270:	e00a      	b.n	8009288 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009272:	f7fd ff67 	bl	8007144 <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009280:	4293      	cmp	r3, r2
 8009282:	d901      	bls.n	8009288 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e0c5      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009288:	4b65      	ldr	r3, [pc, #404]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 800928a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d0ee      	beq.n	8009272 <HAL_RCC_OscConfig+0x33a>
 8009294:	e014      	b.n	80092c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009296:	f7fd ff55 	bl	8007144 <HAL_GetTick>
 800929a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800929c:	e00a      	b.n	80092b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800929e:	f7fd ff51 	bl	8007144 <HAL_GetTick>
 80092a2:	4602      	mov	r2, r0
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d901      	bls.n	80092b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e0af      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092b4:	4b5a      	ldr	r3, [pc, #360]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 80092b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b8:	f003 0302 	and.w	r3, r3, #2
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1ee      	bne.n	800929e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d105      	bne.n	80092d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092c6:	4b56      	ldr	r3, [pc, #344]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 80092c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ca:	4a55      	ldr	r2, [pc, #340]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 80092cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f000 809b 	beq.w	8009412 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80092dc:	4b50      	ldr	r3, [pc, #320]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	f003 030c 	and.w	r3, r3, #12
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	d05c      	beq.n	80093a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d141      	bne.n	8009374 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092f0:	4b4c      	ldr	r3, [pc, #304]	; (8009424 <HAL_RCC_OscConfig+0x4ec>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092f6:	f7fd ff25 	bl	8007144 <HAL_GetTick>
 80092fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092fc:	e008      	b.n	8009310 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092fe:	f7fd ff21 	bl	8007144 <HAL_GetTick>
 8009302:	4602      	mov	r2, r0
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	2b02      	cmp	r3, #2
 800930a:	d901      	bls.n	8009310 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e081      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009310:	4b43      	ldr	r3, [pc, #268]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1f0      	bne.n	80092fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	69da      	ldr	r2, [r3, #28]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a1b      	ldr	r3, [r3, #32]
 8009324:	431a      	orrs	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932a:	019b      	lsls	r3, r3, #6
 800932c:	431a      	orrs	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009332:	085b      	lsrs	r3, r3, #1
 8009334:	3b01      	subs	r3, #1
 8009336:	041b      	lsls	r3, r3, #16
 8009338:	431a      	orrs	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933e:	061b      	lsls	r3, r3, #24
 8009340:	4937      	ldr	r1, [pc, #220]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 8009342:	4313      	orrs	r3, r2
 8009344:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009346:	4b37      	ldr	r3, [pc, #220]	; (8009424 <HAL_RCC_OscConfig+0x4ec>)
 8009348:	2201      	movs	r2, #1
 800934a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800934c:	f7fd fefa 	bl	8007144 <HAL_GetTick>
 8009350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009352:	e008      	b.n	8009366 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009354:	f7fd fef6 	bl	8007144 <HAL_GetTick>
 8009358:	4602      	mov	r2, r0
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	2b02      	cmp	r3, #2
 8009360:	d901      	bls.n	8009366 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e056      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009366:	4b2e      	ldr	r3, [pc, #184]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0f0      	beq.n	8009354 <HAL_RCC_OscConfig+0x41c>
 8009372:	e04e      	b.n	8009412 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009374:	4b2b      	ldr	r3, [pc, #172]	; (8009424 <HAL_RCC_OscConfig+0x4ec>)
 8009376:	2200      	movs	r2, #0
 8009378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800937a:	f7fd fee3 	bl	8007144 <HAL_GetTick>
 800937e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009380:	e008      	b.n	8009394 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009382:	f7fd fedf 	bl	8007144 <HAL_GetTick>
 8009386:	4602      	mov	r2, r0
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	2b02      	cmp	r3, #2
 800938e:	d901      	bls.n	8009394 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e03f      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009394:	4b22      	ldr	r3, [pc, #136]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1f0      	bne.n	8009382 <HAL_RCC_OscConfig+0x44a>
 80093a0:	e037      	b.n	8009412 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d101      	bne.n	80093ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e032      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80093ae:	4b1c      	ldr	r3, [pc, #112]	; (8009420 <HAL_RCC_OscConfig+0x4e8>)
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d028      	beq.n	800940e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d121      	bne.n	800940e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d11a      	bne.n	800940e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80093de:	4013      	ands	r3, r2
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80093e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d111      	bne.n	800940e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f4:	085b      	lsrs	r3, r3, #1
 80093f6:	3b01      	subs	r3, #1
 80093f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d107      	bne.n	800940e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009408:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800940a:	429a      	cmp	r2, r3
 800940c:	d001      	beq.n	8009412 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e000      	b.n	8009414 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3718      	adds	r7, #24
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	40007000 	.word	0x40007000
 8009420:	40023800 	.word	0x40023800
 8009424:	42470060 	.word	0x42470060

08009428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	e0cc      	b.n	80095d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800943c:	4b68      	ldr	r3, [pc, #416]	; (80095e0 <HAL_RCC_ClockConfig+0x1b8>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0307 	and.w	r3, r3, #7
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	429a      	cmp	r2, r3
 8009448:	d90c      	bls.n	8009464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800944a:	4b65      	ldr	r3, [pc, #404]	; (80095e0 <HAL_RCC_ClockConfig+0x1b8>)
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	b2d2      	uxtb	r2, r2
 8009450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009452:	4b63      	ldr	r3, [pc, #396]	; (80095e0 <HAL_RCC_ClockConfig+0x1b8>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0307 	and.w	r3, r3, #7
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	429a      	cmp	r2, r3
 800945e:	d001      	beq.n	8009464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e0b8      	b.n	80095d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0302 	and.w	r3, r3, #2
 800946c:	2b00      	cmp	r3, #0
 800946e:	d020      	beq.n	80094b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 0304 	and.w	r3, r3, #4
 8009478:	2b00      	cmp	r3, #0
 800947a:	d005      	beq.n	8009488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800947c:	4b59      	ldr	r3, [pc, #356]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	4a58      	ldr	r2, [pc, #352]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009486:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 0308 	and.w	r3, r3, #8
 8009490:	2b00      	cmp	r3, #0
 8009492:	d005      	beq.n	80094a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009494:	4b53      	ldr	r3, [pc, #332]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	4a52      	ldr	r2, [pc, #328]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 800949a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800949e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094a0:	4b50      	ldr	r3, [pc, #320]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	494d      	ldr	r1, [pc, #308]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d044      	beq.n	8009548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d107      	bne.n	80094d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094c6:	4b47      	ldr	r3, [pc, #284]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d119      	bne.n	8009506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e07f      	b.n	80095d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d003      	beq.n	80094e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d107      	bne.n	80094f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094e6:	4b3f      	ldr	r3, [pc, #252]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d109      	bne.n	8009506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e06f      	b.n	80095d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094f6:	4b3b      	ldr	r3, [pc, #236]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0302 	and.w	r3, r3, #2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e067      	b.n	80095d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009506:	4b37      	ldr	r3, [pc, #220]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f023 0203 	bic.w	r2, r3, #3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	4934      	ldr	r1, [pc, #208]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009514:	4313      	orrs	r3, r2
 8009516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009518:	f7fd fe14 	bl	8007144 <HAL_GetTick>
 800951c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800951e:	e00a      	b.n	8009536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009520:	f7fd fe10 	bl	8007144 <HAL_GetTick>
 8009524:	4602      	mov	r2, r0
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	f241 3288 	movw	r2, #5000	; 0x1388
 800952e:	4293      	cmp	r3, r2
 8009530:	d901      	bls.n	8009536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e04f      	b.n	80095d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009536:	4b2b      	ldr	r3, [pc, #172]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	f003 020c 	and.w	r2, r3, #12
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	429a      	cmp	r2, r3
 8009546:	d1eb      	bne.n	8009520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009548:	4b25      	ldr	r3, [pc, #148]	; (80095e0 <HAL_RCC_ClockConfig+0x1b8>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0307 	and.w	r3, r3, #7
 8009550:	683a      	ldr	r2, [r7, #0]
 8009552:	429a      	cmp	r2, r3
 8009554:	d20c      	bcs.n	8009570 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009556:	4b22      	ldr	r3, [pc, #136]	; (80095e0 <HAL_RCC_ClockConfig+0x1b8>)
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	b2d2      	uxtb	r2, r2
 800955c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800955e:	4b20      	ldr	r3, [pc, #128]	; (80095e0 <HAL_RCC_ClockConfig+0x1b8>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0307 	and.w	r3, r3, #7
 8009566:	683a      	ldr	r2, [r7, #0]
 8009568:	429a      	cmp	r2, r3
 800956a:	d001      	beq.n	8009570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e032      	b.n	80095d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0304 	and.w	r3, r3, #4
 8009578:	2b00      	cmp	r3, #0
 800957a:	d008      	beq.n	800958e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800957c:	4b19      	ldr	r3, [pc, #100]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	4916      	ldr	r1, [pc, #88]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 800958a:	4313      	orrs	r3, r2
 800958c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 0308 	and.w	r3, r3, #8
 8009596:	2b00      	cmp	r3, #0
 8009598:	d009      	beq.n	80095ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800959a:	4b12      	ldr	r3, [pc, #72]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	00db      	lsls	r3, r3, #3
 80095a8:	490e      	ldr	r1, [pc, #56]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 80095aa:	4313      	orrs	r3, r2
 80095ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80095ae:	f000 f821 	bl	80095f4 <HAL_RCC_GetSysClockFreq>
 80095b2:	4602      	mov	r2, r0
 80095b4:	4b0b      	ldr	r3, [pc, #44]	; (80095e4 <HAL_RCC_ClockConfig+0x1bc>)
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	091b      	lsrs	r3, r3, #4
 80095ba:	f003 030f 	and.w	r3, r3, #15
 80095be:	490a      	ldr	r1, [pc, #40]	; (80095e8 <HAL_RCC_ClockConfig+0x1c0>)
 80095c0:	5ccb      	ldrb	r3, [r1, r3]
 80095c2:	fa22 f303 	lsr.w	r3, r2, r3
 80095c6:	4a09      	ldr	r2, [pc, #36]	; (80095ec <HAL_RCC_ClockConfig+0x1c4>)
 80095c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80095ca:	4b09      	ldr	r3, [pc, #36]	; (80095f0 <HAL_RCC_ClockConfig+0x1c8>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fd fd74 	bl	80070bc <HAL_InitTick>

  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	40023c00 	.word	0x40023c00
 80095e4:	40023800 	.word	0x40023800
 80095e8:	0800d28c 	.word	0x0800d28c
 80095ec:	20000000 	.word	0x20000000
 80095f0:	20000450 	.word	0x20000450

080095f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80095fc:	2300      	movs	r3, #0
 80095fe:	607b      	str	r3, [r7, #4]
 8009600:	2300      	movs	r3, #0
 8009602:	60fb      	str	r3, [r7, #12]
 8009604:	2300      	movs	r3, #0
 8009606:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009608:	2300      	movs	r3, #0
 800960a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800960c:	4b67      	ldr	r3, [pc, #412]	; (80097ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f003 030c 	and.w	r3, r3, #12
 8009614:	2b08      	cmp	r3, #8
 8009616:	d00d      	beq.n	8009634 <HAL_RCC_GetSysClockFreq+0x40>
 8009618:	2b08      	cmp	r3, #8
 800961a:	f200 80bd 	bhi.w	8009798 <HAL_RCC_GetSysClockFreq+0x1a4>
 800961e:	2b00      	cmp	r3, #0
 8009620:	d002      	beq.n	8009628 <HAL_RCC_GetSysClockFreq+0x34>
 8009622:	2b04      	cmp	r3, #4
 8009624:	d003      	beq.n	800962e <HAL_RCC_GetSysClockFreq+0x3a>
 8009626:	e0b7      	b.n	8009798 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009628:	4b61      	ldr	r3, [pc, #388]	; (80097b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800962a:	60bb      	str	r3, [r7, #8]
       break;
 800962c:	e0b7      	b.n	800979e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800962e:	4b61      	ldr	r3, [pc, #388]	; (80097b4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009630:	60bb      	str	r3, [r7, #8]
      break;
 8009632:	e0b4      	b.n	800979e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009634:	4b5d      	ldr	r3, [pc, #372]	; (80097ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800963c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800963e:	4b5b      	ldr	r3, [pc, #364]	; (80097ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009646:	2b00      	cmp	r3, #0
 8009648:	d04d      	beq.n	80096e6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800964a:	4b58      	ldr	r3, [pc, #352]	; (80097ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	099b      	lsrs	r3, r3, #6
 8009650:	461a      	mov	r2, r3
 8009652:	f04f 0300 	mov.w	r3, #0
 8009656:	f240 10ff 	movw	r0, #511	; 0x1ff
 800965a:	f04f 0100 	mov.w	r1, #0
 800965e:	ea02 0800 	and.w	r8, r2, r0
 8009662:	ea03 0901 	and.w	r9, r3, r1
 8009666:	4640      	mov	r0, r8
 8009668:	4649      	mov	r1, r9
 800966a:	f04f 0200 	mov.w	r2, #0
 800966e:	f04f 0300 	mov.w	r3, #0
 8009672:	014b      	lsls	r3, r1, #5
 8009674:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009678:	0142      	lsls	r2, r0, #5
 800967a:	4610      	mov	r0, r2
 800967c:	4619      	mov	r1, r3
 800967e:	ebb0 0008 	subs.w	r0, r0, r8
 8009682:	eb61 0109 	sbc.w	r1, r1, r9
 8009686:	f04f 0200 	mov.w	r2, #0
 800968a:	f04f 0300 	mov.w	r3, #0
 800968e:	018b      	lsls	r3, r1, #6
 8009690:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009694:	0182      	lsls	r2, r0, #6
 8009696:	1a12      	subs	r2, r2, r0
 8009698:	eb63 0301 	sbc.w	r3, r3, r1
 800969c:	f04f 0000 	mov.w	r0, #0
 80096a0:	f04f 0100 	mov.w	r1, #0
 80096a4:	00d9      	lsls	r1, r3, #3
 80096a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80096aa:	00d0      	lsls	r0, r2, #3
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	eb12 0208 	adds.w	r2, r2, r8
 80096b4:	eb43 0309 	adc.w	r3, r3, r9
 80096b8:	f04f 0000 	mov.w	r0, #0
 80096bc:	f04f 0100 	mov.w	r1, #0
 80096c0:	0259      	lsls	r1, r3, #9
 80096c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80096c6:	0250      	lsls	r0, r2, #9
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4610      	mov	r0, r2
 80096ce:	4619      	mov	r1, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	461a      	mov	r2, r3
 80096d4:	f04f 0300 	mov.w	r3, #0
 80096d8:	f7f7 fade 	bl	8000c98 <__aeabi_uldivmod>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4613      	mov	r3, r2
 80096e2:	60fb      	str	r3, [r7, #12]
 80096e4:	e04a      	b.n	800977c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096e6:	4b31      	ldr	r3, [pc, #196]	; (80097ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	099b      	lsrs	r3, r3, #6
 80096ec:	461a      	mov	r2, r3
 80096ee:	f04f 0300 	mov.w	r3, #0
 80096f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80096f6:	f04f 0100 	mov.w	r1, #0
 80096fa:	ea02 0400 	and.w	r4, r2, r0
 80096fe:	ea03 0501 	and.w	r5, r3, r1
 8009702:	4620      	mov	r0, r4
 8009704:	4629      	mov	r1, r5
 8009706:	f04f 0200 	mov.w	r2, #0
 800970a:	f04f 0300 	mov.w	r3, #0
 800970e:	014b      	lsls	r3, r1, #5
 8009710:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009714:	0142      	lsls	r2, r0, #5
 8009716:	4610      	mov	r0, r2
 8009718:	4619      	mov	r1, r3
 800971a:	1b00      	subs	r0, r0, r4
 800971c:	eb61 0105 	sbc.w	r1, r1, r5
 8009720:	f04f 0200 	mov.w	r2, #0
 8009724:	f04f 0300 	mov.w	r3, #0
 8009728:	018b      	lsls	r3, r1, #6
 800972a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800972e:	0182      	lsls	r2, r0, #6
 8009730:	1a12      	subs	r2, r2, r0
 8009732:	eb63 0301 	sbc.w	r3, r3, r1
 8009736:	f04f 0000 	mov.w	r0, #0
 800973a:	f04f 0100 	mov.w	r1, #0
 800973e:	00d9      	lsls	r1, r3, #3
 8009740:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009744:	00d0      	lsls	r0, r2, #3
 8009746:	4602      	mov	r2, r0
 8009748:	460b      	mov	r3, r1
 800974a:	1912      	adds	r2, r2, r4
 800974c:	eb45 0303 	adc.w	r3, r5, r3
 8009750:	f04f 0000 	mov.w	r0, #0
 8009754:	f04f 0100 	mov.w	r1, #0
 8009758:	0299      	lsls	r1, r3, #10
 800975a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800975e:	0290      	lsls	r0, r2, #10
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4610      	mov	r0, r2
 8009766:	4619      	mov	r1, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	461a      	mov	r2, r3
 800976c:	f04f 0300 	mov.w	r3, #0
 8009770:	f7f7 fa92 	bl	8000c98 <__aeabi_uldivmod>
 8009774:	4602      	mov	r2, r0
 8009776:	460b      	mov	r3, r1
 8009778:	4613      	mov	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800977c:	4b0b      	ldr	r3, [pc, #44]	; (80097ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	0c1b      	lsrs	r3, r3, #16
 8009782:	f003 0303 	and.w	r3, r3, #3
 8009786:	3301      	adds	r3, #1
 8009788:	005b      	lsls	r3, r3, #1
 800978a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	fbb2 f3f3 	udiv	r3, r2, r3
 8009794:	60bb      	str	r3, [r7, #8]
      break;
 8009796:	e002      	b.n	800979e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009798:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800979a:	60bb      	str	r3, [r7, #8]
      break;
 800979c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800979e:	68bb      	ldr	r3, [r7, #8]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80097aa:	bf00      	nop
 80097ac:	40023800 	.word	0x40023800
 80097b0:	00f42400 	.word	0x00f42400
 80097b4:	007a1200 	.word	0x007a1200

080097b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097b8:	b480      	push	{r7}
 80097ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80097bc:	4b03      	ldr	r3, [pc, #12]	; (80097cc <HAL_RCC_GetHCLKFreq+0x14>)
 80097be:	681b      	ldr	r3, [r3, #0]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	20000000 	.word	0x20000000

080097d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80097d4:	f7ff fff0 	bl	80097b8 <HAL_RCC_GetHCLKFreq>
 80097d8:	4602      	mov	r2, r0
 80097da:	4b05      	ldr	r3, [pc, #20]	; (80097f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	0a9b      	lsrs	r3, r3, #10
 80097e0:	f003 0307 	and.w	r3, r3, #7
 80097e4:	4903      	ldr	r1, [pc, #12]	; (80097f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097e6:	5ccb      	ldrb	r3, [r1, r3]
 80097e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	40023800 	.word	0x40023800
 80097f4:	0800d29c 	.word	0x0800d29c

080097f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80097fc:	f7ff ffdc 	bl	80097b8 <HAL_RCC_GetHCLKFreq>
 8009800:	4602      	mov	r2, r0
 8009802:	4b05      	ldr	r3, [pc, #20]	; (8009818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	0b5b      	lsrs	r3, r3, #13
 8009808:	f003 0307 	and.w	r3, r3, #7
 800980c:	4903      	ldr	r1, [pc, #12]	; (800981c <HAL_RCC_GetPCLK2Freq+0x24>)
 800980e:	5ccb      	ldrb	r3, [r1, r3]
 8009810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009814:	4618      	mov	r0, r3
 8009816:	bd80      	pop	{r7, pc}
 8009818:	40023800 	.word	0x40023800
 800981c:	0800d29c 	.word	0x0800d29c

08009820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e041      	b.n	80098b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d106      	bne.n	800984c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f7f8 f898 	bl	800197c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3304      	adds	r3, #4
 800985c:	4619      	mov	r1, r3
 800985e:	4610      	mov	r0, r2
 8009860:	f000 fac0 	bl	8009de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b082      	sub	sp, #8
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e041      	b.n	8009954 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d106      	bne.n	80098ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f839 	bl	800995c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2202      	movs	r2, #2
 80098ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	3304      	adds	r3, #4
 80098fa:	4619      	mov	r1, r3
 80098fc:	4610      	mov	r0, r2
 80098fe:	f000 fa71 	bl	8009de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2201      	movs	r2, #1
 800990e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2201      	movs	r2, #1
 800992e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2201      	movs	r2, #1
 800994e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d109      	bne.n	8009994 <HAL_TIM_PWM_Start+0x24>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b01      	cmp	r3, #1
 800998a:	bf14      	ite	ne
 800998c:	2301      	movne	r3, #1
 800998e:	2300      	moveq	r3, #0
 8009990:	b2db      	uxtb	r3, r3
 8009992:	e022      	b.n	80099da <HAL_TIM_PWM_Start+0x6a>
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2b04      	cmp	r3, #4
 8009998:	d109      	bne.n	80099ae <HAL_TIM_PWM_Start+0x3e>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	bf14      	ite	ne
 80099a6:	2301      	movne	r3, #1
 80099a8:	2300      	moveq	r3, #0
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	e015      	b.n	80099da <HAL_TIM_PWM_Start+0x6a>
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	2b08      	cmp	r3, #8
 80099b2:	d109      	bne.n	80099c8 <HAL_TIM_PWM_Start+0x58>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b01      	cmp	r3, #1
 80099be:	bf14      	ite	ne
 80099c0:	2301      	movne	r3, #1
 80099c2:	2300      	moveq	r3, #0
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	e008      	b.n	80099da <HAL_TIM_PWM_Start+0x6a>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	bf14      	ite	ne
 80099d4:	2301      	movne	r3, #1
 80099d6:	2300      	moveq	r3, #0
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e068      	b.n	8009ab4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d104      	bne.n	80099f2 <HAL_TIM_PWM_Start+0x82>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2202      	movs	r2, #2
 80099ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099f0:	e013      	b.n	8009a1a <HAL_TIM_PWM_Start+0xaa>
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b04      	cmp	r3, #4
 80099f6:	d104      	bne.n	8009a02 <HAL_TIM_PWM_Start+0x92>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2202      	movs	r2, #2
 80099fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a00:	e00b      	b.n	8009a1a <HAL_TIM_PWM_Start+0xaa>
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	2b08      	cmp	r3, #8
 8009a06:	d104      	bne.n	8009a12 <HAL_TIM_PWM_Start+0xa2>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a10:	e003      	b.n	8009a1a <HAL_TIM_PWM_Start+0xaa>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2202      	movs	r2, #2
 8009a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	6839      	ldr	r1, [r7, #0]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 fc84 	bl	800a330 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a23      	ldr	r2, [pc, #140]	; (8009abc <HAL_TIM_PWM_Start+0x14c>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d107      	bne.n	8009a42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a1d      	ldr	r2, [pc, #116]	; (8009abc <HAL_TIM_PWM_Start+0x14c>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d018      	beq.n	8009a7e <HAL_TIM_PWM_Start+0x10e>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a54:	d013      	beq.n	8009a7e <HAL_TIM_PWM_Start+0x10e>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a19      	ldr	r2, [pc, #100]	; (8009ac0 <HAL_TIM_PWM_Start+0x150>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d00e      	beq.n	8009a7e <HAL_TIM_PWM_Start+0x10e>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a17      	ldr	r2, [pc, #92]	; (8009ac4 <HAL_TIM_PWM_Start+0x154>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d009      	beq.n	8009a7e <HAL_TIM_PWM_Start+0x10e>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a16      	ldr	r2, [pc, #88]	; (8009ac8 <HAL_TIM_PWM_Start+0x158>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d004      	beq.n	8009a7e <HAL_TIM_PWM_Start+0x10e>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a14      	ldr	r2, [pc, #80]	; (8009acc <HAL_TIM_PWM_Start+0x15c>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d111      	bne.n	8009aa2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	f003 0307 	and.w	r3, r3, #7
 8009a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2b06      	cmp	r3, #6
 8009a8e:	d010      	beq.n	8009ab2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f042 0201 	orr.w	r2, r2, #1
 8009a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aa0:	e007      	b.n	8009ab2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f042 0201 	orr.w	r2, r2, #1
 8009ab0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	40010000 	.word	0x40010000
 8009ac0:	40000400 	.word	0x40000400
 8009ac4:	40000800 	.word	0x40000800
 8009ac8:	40000c00 	.word	0x40000c00
 8009acc:	40014000 	.word	0x40014000

08009ad0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d101      	bne.n	8009aee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009aea:	2302      	movs	r3, #2
 8009aec:	e0ae      	b.n	8009c4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2b0c      	cmp	r3, #12
 8009afa:	f200 809f 	bhi.w	8009c3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009afe:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b04:	08009b39 	.word	0x08009b39
 8009b08:	08009c3d 	.word	0x08009c3d
 8009b0c:	08009c3d 	.word	0x08009c3d
 8009b10:	08009c3d 	.word	0x08009c3d
 8009b14:	08009b79 	.word	0x08009b79
 8009b18:	08009c3d 	.word	0x08009c3d
 8009b1c:	08009c3d 	.word	0x08009c3d
 8009b20:	08009c3d 	.word	0x08009c3d
 8009b24:	08009bbb 	.word	0x08009bbb
 8009b28:	08009c3d 	.word	0x08009c3d
 8009b2c:	08009c3d 	.word	0x08009c3d
 8009b30:	08009c3d 	.word	0x08009c3d
 8009b34:	08009bfb 	.word	0x08009bfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68b9      	ldr	r1, [r7, #8]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 f9d0 	bl	8009ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	699a      	ldr	r2, [r3, #24]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f042 0208 	orr.w	r2, r2, #8
 8009b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	699a      	ldr	r2, [r3, #24]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f022 0204 	bic.w	r2, r2, #4
 8009b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6999      	ldr	r1, [r3, #24]
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	691a      	ldr	r2, [r3, #16]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	430a      	orrs	r2, r1
 8009b74:	619a      	str	r2, [r3, #24]
      break;
 8009b76:	e064      	b.n	8009c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	68b9      	ldr	r1, [r7, #8]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 fa16 	bl	8009fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	699a      	ldr	r2, [r3, #24]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	699a      	ldr	r2, [r3, #24]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6999      	ldr	r1, [r3, #24]
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	691b      	ldr	r3, [r3, #16]
 8009bae:	021a      	lsls	r2, r3, #8
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	619a      	str	r2, [r3, #24]
      break;
 8009bb8:	e043      	b.n	8009c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68b9      	ldr	r1, [r7, #8]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f000 fa61 	bl	800a088 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	69da      	ldr	r2, [r3, #28]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f042 0208 	orr.w	r2, r2, #8
 8009bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	69da      	ldr	r2, [r3, #28]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f022 0204 	bic.w	r2, r2, #4
 8009be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	69d9      	ldr	r1, [r3, #28]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	691a      	ldr	r2, [r3, #16]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	61da      	str	r2, [r3, #28]
      break;
 8009bf8:	e023      	b.n	8009c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68b9      	ldr	r1, [r7, #8]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f000 faab 	bl	800a15c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	69da      	ldr	r2, [r3, #28]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	69da      	ldr	r2, [r3, #28]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	69d9      	ldr	r1, [r3, #28]
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	021a      	lsls	r2, r3, #8
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	430a      	orrs	r2, r1
 8009c38:	61da      	str	r2, [r3, #28]
      break;
 8009c3a:	e002      	b.n	8009c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3718      	adds	r7, #24
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d101      	bne.n	8009c70 <HAL_TIM_ConfigClockSource+0x1c>
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	e0b4      	b.n	8009dda <HAL_TIM_ConfigClockSource+0x186>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ca8:	d03e      	beq.n	8009d28 <HAL_TIM_ConfigClockSource+0xd4>
 8009caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cae:	f200 8087 	bhi.w	8009dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cb6:	f000 8086 	beq.w	8009dc6 <HAL_TIM_ConfigClockSource+0x172>
 8009cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cbe:	d87f      	bhi.n	8009dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009cc0:	2b70      	cmp	r3, #112	; 0x70
 8009cc2:	d01a      	beq.n	8009cfa <HAL_TIM_ConfigClockSource+0xa6>
 8009cc4:	2b70      	cmp	r3, #112	; 0x70
 8009cc6:	d87b      	bhi.n	8009dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009cc8:	2b60      	cmp	r3, #96	; 0x60
 8009cca:	d050      	beq.n	8009d6e <HAL_TIM_ConfigClockSource+0x11a>
 8009ccc:	2b60      	cmp	r3, #96	; 0x60
 8009cce:	d877      	bhi.n	8009dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009cd0:	2b50      	cmp	r3, #80	; 0x50
 8009cd2:	d03c      	beq.n	8009d4e <HAL_TIM_ConfigClockSource+0xfa>
 8009cd4:	2b50      	cmp	r3, #80	; 0x50
 8009cd6:	d873      	bhi.n	8009dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009cd8:	2b40      	cmp	r3, #64	; 0x40
 8009cda:	d058      	beq.n	8009d8e <HAL_TIM_ConfigClockSource+0x13a>
 8009cdc:	2b40      	cmp	r3, #64	; 0x40
 8009cde:	d86f      	bhi.n	8009dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ce0:	2b30      	cmp	r3, #48	; 0x30
 8009ce2:	d064      	beq.n	8009dae <HAL_TIM_ConfigClockSource+0x15a>
 8009ce4:	2b30      	cmp	r3, #48	; 0x30
 8009ce6:	d86b      	bhi.n	8009dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ce8:	2b20      	cmp	r3, #32
 8009cea:	d060      	beq.n	8009dae <HAL_TIM_ConfigClockSource+0x15a>
 8009cec:	2b20      	cmp	r3, #32
 8009cee:	d867      	bhi.n	8009dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d05c      	beq.n	8009dae <HAL_TIM_ConfigClockSource+0x15a>
 8009cf4:	2b10      	cmp	r3, #16
 8009cf6:	d05a      	beq.n	8009dae <HAL_TIM_ConfigClockSource+0x15a>
 8009cf8:	e062      	b.n	8009dc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6818      	ldr	r0, [r3, #0]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	6899      	ldr	r1, [r3, #8]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	685a      	ldr	r2, [r3, #4]
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	f000 faf1 	bl	800a2f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	609a      	str	r2, [r3, #8]
      break;
 8009d26:	e04f      	b.n	8009dc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6818      	ldr	r0, [r3, #0]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	6899      	ldr	r1, [r3, #8]
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	f000 fada 	bl	800a2f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	689a      	ldr	r2, [r3, #8]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d4a:	609a      	str	r2, [r3, #8]
      break;
 8009d4c:	e03c      	b.n	8009dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6818      	ldr	r0, [r3, #0]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	6859      	ldr	r1, [r3, #4]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	f000 fa4e 	bl	800a1fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2150      	movs	r1, #80	; 0x50
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 faa7 	bl	800a2ba <TIM_ITRx_SetConfig>
      break;
 8009d6c:	e02c      	b.n	8009dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6818      	ldr	r0, [r3, #0]
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	6859      	ldr	r1, [r3, #4]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	f000 fa6d 	bl	800a25a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2160      	movs	r1, #96	; 0x60
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 fa97 	bl	800a2ba <TIM_ITRx_SetConfig>
      break;
 8009d8c:	e01c      	b.n	8009dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6818      	ldr	r0, [r3, #0]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	6859      	ldr	r1, [r3, #4]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	f000 fa2e 	bl	800a1fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2140      	movs	r1, #64	; 0x40
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 fa87 	bl	800a2ba <TIM_ITRx_SetConfig>
      break;
 8009dac:	e00c      	b.n	8009dc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4619      	mov	r1, r3
 8009db8:	4610      	mov	r0, r2
 8009dba:	f000 fa7e 	bl	800a2ba <TIM_ITRx_SetConfig>
      break;
 8009dbe:	e003      	b.n	8009dc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8009dc4:	e000      	b.n	8009dc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
	...

08009de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a34      	ldr	r2, [pc, #208]	; (8009ec8 <TIM_Base_SetConfig+0xe4>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d00f      	beq.n	8009e1c <TIM_Base_SetConfig+0x38>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e02:	d00b      	beq.n	8009e1c <TIM_Base_SetConfig+0x38>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a31      	ldr	r2, [pc, #196]	; (8009ecc <TIM_Base_SetConfig+0xe8>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d007      	beq.n	8009e1c <TIM_Base_SetConfig+0x38>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a30      	ldr	r2, [pc, #192]	; (8009ed0 <TIM_Base_SetConfig+0xec>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d003      	beq.n	8009e1c <TIM_Base_SetConfig+0x38>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a2f      	ldr	r2, [pc, #188]	; (8009ed4 <TIM_Base_SetConfig+0xf0>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d108      	bne.n	8009e2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a25      	ldr	r2, [pc, #148]	; (8009ec8 <TIM_Base_SetConfig+0xe4>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d01b      	beq.n	8009e6e <TIM_Base_SetConfig+0x8a>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e3c:	d017      	beq.n	8009e6e <TIM_Base_SetConfig+0x8a>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a22      	ldr	r2, [pc, #136]	; (8009ecc <TIM_Base_SetConfig+0xe8>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d013      	beq.n	8009e6e <TIM_Base_SetConfig+0x8a>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a21      	ldr	r2, [pc, #132]	; (8009ed0 <TIM_Base_SetConfig+0xec>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d00f      	beq.n	8009e6e <TIM_Base_SetConfig+0x8a>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a20      	ldr	r2, [pc, #128]	; (8009ed4 <TIM_Base_SetConfig+0xf0>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d00b      	beq.n	8009e6e <TIM_Base_SetConfig+0x8a>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a1f      	ldr	r2, [pc, #124]	; (8009ed8 <TIM_Base_SetConfig+0xf4>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d007      	beq.n	8009e6e <TIM_Base_SetConfig+0x8a>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a1e      	ldr	r2, [pc, #120]	; (8009edc <TIM_Base_SetConfig+0xf8>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d003      	beq.n	8009e6e <TIM_Base_SetConfig+0x8a>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a1d      	ldr	r2, [pc, #116]	; (8009ee0 <TIM_Base_SetConfig+0xfc>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d108      	bne.n	8009e80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	689a      	ldr	r2, [r3, #8]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a08      	ldr	r2, [pc, #32]	; (8009ec8 <TIM_Base_SetConfig+0xe4>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d103      	bne.n	8009eb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	691a      	ldr	r2, [r3, #16]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	615a      	str	r2, [r3, #20]
}
 8009eba:	bf00      	nop
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	40010000 	.word	0x40010000
 8009ecc:	40000400 	.word	0x40000400
 8009ed0:	40000800 	.word	0x40000800
 8009ed4:	40000c00 	.word	0x40000c00
 8009ed8:	40014000 	.word	0x40014000
 8009edc:	40014400 	.word	0x40014400
 8009ee0:	40014800 	.word	0x40014800

08009ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b087      	sub	sp, #28
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a1b      	ldr	r3, [r3, #32]
 8009ef2:	f023 0201 	bic.w	r2, r3, #1
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f023 0303 	bic.w	r3, r3, #3
 8009f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f023 0302 	bic.w	r3, r3, #2
 8009f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	697a      	ldr	r2, [r7, #20]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a1c      	ldr	r2, [pc, #112]	; (8009fac <TIM_OC1_SetConfig+0xc8>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d10c      	bne.n	8009f5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	f023 0308 	bic.w	r3, r3, #8
 8009f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f023 0304 	bic.w	r3, r3, #4
 8009f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a13      	ldr	r2, [pc, #76]	; (8009fac <TIM_OC1_SetConfig+0xc8>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d111      	bne.n	8009f86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	695b      	ldr	r3, [r3, #20]
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	693a      	ldr	r2, [r7, #16]
 8009f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	621a      	str	r2, [r3, #32]
}
 8009fa0:	bf00      	nop
 8009fa2:	371c      	adds	r7, #28
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	40010000 	.word	0x40010000

08009fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b087      	sub	sp, #28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a1b      	ldr	r3, [r3, #32]
 8009fbe:	f023 0210 	bic.w	r2, r3, #16
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	021b      	lsls	r3, r3, #8
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	f023 0320 	bic.w	r3, r3, #32
 8009ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	011b      	lsls	r3, r3, #4
 800a002:	697a      	ldr	r2, [r7, #20]
 800a004:	4313      	orrs	r3, r2
 800a006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a1e      	ldr	r2, [pc, #120]	; (800a084 <TIM_OC2_SetConfig+0xd4>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d10d      	bne.n	800a02c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	011b      	lsls	r3, r3, #4
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	4313      	orrs	r3, r2
 800a022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a02a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a15      	ldr	r2, [pc, #84]	; (800a084 <TIM_OC2_SetConfig+0xd4>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d113      	bne.n	800a05c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a03a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a042:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	693a      	ldr	r2, [r7, #16]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	4313      	orrs	r3, r2
 800a05a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	693a      	ldr	r2, [r7, #16]
 800a060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	685a      	ldr	r2, [r3, #4]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	621a      	str	r2, [r3, #32]
}
 800a076:	bf00      	nop
 800a078:	371c      	adds	r7, #28
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	40010000 	.word	0x40010000

0800a088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a088:	b480      	push	{r7}
 800a08a:	b087      	sub	sp, #28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a1b      	ldr	r3, [r3, #32]
 800a0a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f023 0303 	bic.w	r3, r3, #3
 800a0be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	021b      	lsls	r3, r3, #8
 800a0d8:	697a      	ldr	r2, [r7, #20]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a1d      	ldr	r2, [pc, #116]	; (800a158 <TIM_OC3_SetConfig+0xd0>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d10d      	bne.n	800a102 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	021b      	lsls	r3, r3, #8
 800a0f4:	697a      	ldr	r2, [r7, #20]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4a14      	ldr	r2, [pc, #80]	; (800a158 <TIM_OC3_SetConfig+0xd0>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d113      	bne.n	800a132 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	695b      	ldr	r3, [r3, #20]
 800a11e:	011b      	lsls	r3, r3, #4
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	4313      	orrs	r3, r2
 800a124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	011b      	lsls	r3, r3, #4
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	4313      	orrs	r3, r2
 800a130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	685a      	ldr	r2, [r3, #4]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	621a      	str	r2, [r3, #32]
}
 800a14c:	bf00      	nop
 800a14e:	371c      	adds	r7, #28
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	40010000 	.word	0x40010000

0800a15c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b087      	sub	sp, #28
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a1b      	ldr	r3, [r3, #32]
 800a16a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	69db      	ldr	r3, [r3, #28]
 800a182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a18a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	021b      	lsls	r3, r3, #8
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	031b      	lsls	r3, r3, #12
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a10      	ldr	r2, [pc, #64]	; (800a1f8 <TIM_OC4_SetConfig+0x9c>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d109      	bne.n	800a1d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	695b      	ldr	r3, [r3, #20]
 800a1c8:	019b      	lsls	r3, r3, #6
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	697a      	ldr	r2, [r7, #20]
 800a1d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	621a      	str	r2, [r3, #32]
}
 800a1ea:	bf00      	nop
 800a1ec:	371c      	adds	r7, #28
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	40010000 	.word	0x40010000

0800a1fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	f023 0201 	bic.w	r2, r3, #1
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	011b      	lsls	r3, r3, #4
 800a22c:	693a      	ldr	r2, [r7, #16]
 800a22e:	4313      	orrs	r3, r2
 800a230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	f023 030a 	bic.w	r3, r3, #10
 800a238:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	4313      	orrs	r3, r2
 800a240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	621a      	str	r2, [r3, #32]
}
 800a24e:	bf00      	nop
 800a250:	371c      	adds	r7, #28
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b087      	sub	sp, #28
 800a25e:	af00      	add	r7, sp, #0
 800a260:	60f8      	str	r0, [r7, #12]
 800a262:	60b9      	str	r1, [r7, #8]
 800a264:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	f023 0210 	bic.w	r2, r3, #16
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	031b      	lsls	r3, r3, #12
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a296:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	011b      	lsls	r3, r3, #4
 800a29c:	693a      	ldr	r2, [r7, #16]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	697a      	ldr	r2, [r7, #20]
 800a2a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	621a      	str	r2, [r3, #32]
}
 800a2ae:	bf00      	nop
 800a2b0:	371c      	adds	r7, #28
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b085      	sub	sp, #20
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	f043 0307 	orr.w	r3, r3, #7
 800a2dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	609a      	str	r2, [r3, #8]
}
 800a2e4:	bf00      	nop
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
 800a2fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a30a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	021a      	lsls	r2, r3, #8
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	431a      	orrs	r2, r3
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	4313      	orrs	r3, r2
 800a318:	697a      	ldr	r2, [r7, #20]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	609a      	str	r2, [r3, #8]
}
 800a324:	bf00      	nop
 800a326:	371c      	adds	r7, #28
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a330:	b480      	push	{r7}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	f003 031f 	and.w	r3, r3, #31
 800a342:	2201      	movs	r2, #1
 800a344:	fa02 f303 	lsl.w	r3, r2, r3
 800a348:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6a1a      	ldr	r2, [r3, #32]
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	43db      	mvns	r3, r3
 800a352:	401a      	ands	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6a1a      	ldr	r2, [r3, #32]
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	f003 031f 	and.w	r3, r3, #31
 800a362:	6879      	ldr	r1, [r7, #4]
 800a364:	fa01 f303 	lsl.w	r3, r1, r3
 800a368:	431a      	orrs	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	621a      	str	r2, [r3, #32]
}
 800a36e:	bf00      	nop
 800a370:	371c      	adds	r7, #28
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
	...

0800a37c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d101      	bne.n	800a394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a390:	2302      	movs	r3, #2
 800a392:	e050      	b.n	800a436 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2202      	movs	r2, #2
 800a3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a1c      	ldr	r2, [pc, #112]	; (800a444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d018      	beq.n	800a40a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3e0:	d013      	beq.n	800a40a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a18      	ldr	r2, [pc, #96]	; (800a448 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d00e      	beq.n	800a40a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a16      	ldr	r2, [pc, #88]	; (800a44c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d009      	beq.n	800a40a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a15      	ldr	r2, [pc, #84]	; (800a450 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d004      	beq.n	800a40a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a13      	ldr	r2, [pc, #76]	; (800a454 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d10c      	bne.n	800a424 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a410:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	4313      	orrs	r3, r2
 800a41a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3714      	adds	r7, #20
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	40010000 	.word	0x40010000
 800a448:	40000400 	.word	0x40000400
 800a44c:	40000800 	.word	0x40000800
 800a450:	40000c00 	.word	0x40000c00
 800a454:	40014000 	.word	0x40014000

0800a458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d101      	bne.n	800a46a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	e03f      	b.n	800a4ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b00      	cmp	r3, #0
 800a474:	d106      	bne.n	800a484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7f7 fad4 	bl	8001a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2224      	movs	r2, #36	; 0x24
 800a488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68da      	ldr	r2, [r3, #12]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a49a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 fddb 	bl	800b058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	691a      	ldr	r2, [r3, #16]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	695a      	ldr	r2, [r3, #20]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68da      	ldr	r2, [r3, #12]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2220      	movs	r2, #32
 800a4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2220      	movs	r2, #32
 800a4e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b08a      	sub	sp, #40	; 0x28
 800a4f6:	af02      	add	r7, sp, #8
 800a4f8:	60f8      	str	r0, [r7, #12]
 800a4fa:	60b9      	str	r1, [r7, #8]
 800a4fc:	603b      	str	r3, [r7, #0]
 800a4fe:	4613      	mov	r3, r2
 800a500:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a502:	2300      	movs	r3, #0
 800a504:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b20      	cmp	r3, #32
 800a510:	d17c      	bne.n	800a60c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d002      	beq.n	800a51e <HAL_UART_Transmit+0x2c>
 800a518:	88fb      	ldrh	r3, [r7, #6]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d101      	bne.n	800a522 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e075      	b.n	800a60e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d101      	bne.n	800a530 <HAL_UART_Transmit+0x3e>
 800a52c:	2302      	movs	r3, #2
 800a52e:	e06e      	b.n	800a60e <HAL_UART_Transmit+0x11c>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2200      	movs	r2, #0
 800a53c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2221      	movs	r2, #33	; 0x21
 800a542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a546:	f7fc fdfd 	bl	8007144 <HAL_GetTick>
 800a54a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	88fa      	ldrh	r2, [r7, #6]
 800a550:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	88fa      	ldrh	r2, [r7, #6]
 800a556:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a560:	d108      	bne.n	800a574 <HAL_UART_Transmit+0x82>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d104      	bne.n	800a574 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a56a:	2300      	movs	r3, #0
 800a56c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	61bb      	str	r3, [r7, #24]
 800a572:	e003      	b.n	800a57c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a578:	2300      	movs	r3, #0
 800a57a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a584:	e02a      	b.n	800a5dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2200      	movs	r2, #0
 800a58e:	2180      	movs	r1, #128	; 0x80
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f000 fb1f 	bl	800abd4 <UART_WaitOnFlagUntilTimeout>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d001      	beq.n	800a5a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a59c:	2303      	movs	r3, #3
 800a59e:	e036      	b.n	800a60e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10b      	bne.n	800a5be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	881b      	ldrh	r3, [r3, #0]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	3302      	adds	r3, #2
 800a5ba:	61bb      	str	r3, [r7, #24]
 800a5bc:	e007      	b.n	800a5ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	781a      	ldrb	r2, [r3, #0]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1cf      	bne.n	800a586 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	2140      	movs	r1, #64	; 0x40
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f000 faef 	bl	800abd4 <UART_WaitOnFlagUntilTimeout>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d001      	beq.n	800a600 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	e006      	b.n	800a60e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2220      	movs	r2, #32
 800a604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	e000      	b.n	800a60e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a60c:	2302      	movs	r3, #2
  }
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3720      	adds	r7, #32
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b084      	sub	sp, #16
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	60f8      	str	r0, [r7, #12]
 800a61e:	60b9      	str	r1, [r7, #8]
 800a620:	4613      	mov	r3, r2
 800a622:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	2b20      	cmp	r3, #32
 800a62e:	d11d      	bne.n	800a66c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d002      	beq.n	800a63c <HAL_UART_Receive_IT+0x26>
 800a636:	88fb      	ldrh	r3, [r7, #6]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d101      	bne.n	800a640 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e016      	b.n	800a66e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a646:	2b01      	cmp	r3, #1
 800a648:	d101      	bne.n	800a64e <HAL_UART_Receive_IT+0x38>
 800a64a:	2302      	movs	r3, #2
 800a64c:	e00f      	b.n	800a66e <HAL_UART_Receive_IT+0x58>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a65c:	88fb      	ldrh	r3, [r7, #6]
 800a65e:	461a      	mov	r2, r3
 800a660:	68b9      	ldr	r1, [r7, #8]
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f000 fb24 	bl	800acb0 <UART_Start_Receive_IT>
 800a668:	4603      	mov	r3, r0
 800a66a:	e000      	b.n	800a66e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a66c:	2302      	movs	r3, #2
  }
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
	...

0800a678 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b0ba      	sub	sp, #232	; 0xe8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	695b      	ldr	r3, [r3, #20]
 800a69a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a6aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ae:	f003 030f 	and.w	r3, r3, #15
 800a6b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a6b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d10f      	bne.n	800a6de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6c2:	f003 0320 	and.w	r3, r3, #32
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d009      	beq.n	800a6de <HAL_UART_IRQHandler+0x66>
 800a6ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ce:	f003 0320 	and.w	r3, r3, #32
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d003      	beq.n	800a6de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fc03 	bl	800aee2 <UART_Receive_IT>
      return;
 800a6dc:	e256      	b.n	800ab8c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a6de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f000 80de 	beq.w	800a8a4 <HAL_UART_IRQHandler+0x22c>
 800a6e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6ec:	f003 0301 	and.w	r3, r3, #1
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d106      	bne.n	800a702 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a6f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f000 80d1 	beq.w	800a8a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a706:	f003 0301 	and.w	r3, r3, #1
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00b      	beq.n	800a726 <HAL_UART_IRQHandler+0xae>
 800a70e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a716:	2b00      	cmp	r3, #0
 800a718:	d005      	beq.n	800a726 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71e:	f043 0201 	orr.w	r2, r3, #1
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a72a:	f003 0304 	and.w	r3, r3, #4
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00b      	beq.n	800a74a <HAL_UART_IRQHandler+0xd2>
 800a732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d005      	beq.n	800a74a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a742:	f043 0202 	orr.w	r2, r3, #2
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a74a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a74e:	f003 0302 	and.w	r3, r3, #2
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00b      	beq.n	800a76e <HAL_UART_IRQHandler+0xf6>
 800a756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a75a:	f003 0301 	and.w	r3, r3, #1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d005      	beq.n	800a76e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a766:	f043 0204 	orr.w	r2, r3, #4
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a76e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a772:	f003 0308 	and.w	r3, r3, #8
 800a776:	2b00      	cmp	r3, #0
 800a778:	d011      	beq.n	800a79e <HAL_UART_IRQHandler+0x126>
 800a77a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a77e:	f003 0320 	and.w	r3, r3, #32
 800a782:	2b00      	cmp	r3, #0
 800a784:	d105      	bne.n	800a792 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d005      	beq.n	800a79e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a796:	f043 0208 	orr.w	r2, r3, #8
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f000 81ed 	beq.w	800ab82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7ac:	f003 0320 	and.w	r3, r3, #32
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d008      	beq.n	800a7c6 <HAL_UART_IRQHandler+0x14e>
 800a7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7b8:	f003 0320 	and.w	r3, r3, #32
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 fb8e 	bl	800aee2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d0:	2b40      	cmp	r3, #64	; 0x40
 800a7d2:	bf0c      	ite	eq
 800a7d4:	2301      	moveq	r3, #1
 800a7d6:	2300      	movne	r3, #0
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e2:	f003 0308 	and.w	r3, r3, #8
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d103      	bne.n	800a7f2 <HAL_UART_IRQHandler+0x17a>
 800a7ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d04f      	beq.n	800a892 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fa96 	bl	800ad24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	695b      	ldr	r3, [r3, #20]
 800a7fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a802:	2b40      	cmp	r3, #64	; 0x40
 800a804:	d141      	bne.n	800a88a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3314      	adds	r3, #20
 800a80c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a810:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a814:	e853 3f00 	ldrex	r3, [r3]
 800a818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a81c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3314      	adds	r3, #20
 800a82e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a832:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a83e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a842:	e841 2300 	strex	r3, r2, [r1]
 800a846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a84a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1d9      	bne.n	800a806 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a856:	2b00      	cmp	r3, #0
 800a858:	d013      	beq.n	800a882 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85e:	4a7d      	ldr	r2, [pc, #500]	; (800aa54 <HAL_UART_IRQHandler+0x3dc>)
 800a860:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a866:	4618      	mov	r0, r3
 800a868:	f7fd fa0f 	bl	8007c8a <HAL_DMA_Abort_IT>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d016      	beq.n	800a8a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a87c:	4610      	mov	r0, r2
 800a87e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a880:	e00e      	b.n	800a8a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f990 	bl	800aba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a888:	e00a      	b.n	800a8a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f98c 	bl	800aba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a890:	e006      	b.n	800a8a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f988 	bl	800aba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a89e:	e170      	b.n	800ab82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a0:	bf00      	nop
    return;
 800a8a2:	e16e      	b.n	800ab82 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	f040 814a 	bne.w	800ab42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a8ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8b2:	f003 0310 	and.w	r3, r3, #16
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f000 8143 	beq.w	800ab42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a8bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8c0:	f003 0310 	and.w	r3, r3, #16
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f000 813c 	beq.w	800ab42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	60bb      	str	r3, [r7, #8]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	60bb      	str	r3, [r7, #8]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	60bb      	str	r3, [r7, #8]
 800a8de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	695b      	ldr	r3, [r3, #20]
 800a8e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ea:	2b40      	cmp	r3, #64	; 0x40
 800a8ec:	f040 80b4 	bne.w	800aa58 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a8fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a900:	2b00      	cmp	r3, #0
 800a902:	f000 8140 	beq.w	800ab86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a90a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a90e:	429a      	cmp	r2, r3
 800a910:	f080 8139 	bcs.w	800ab86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a91a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a926:	f000 8088 	beq.w	800aa3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	330c      	adds	r3, #12
 800a930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a934:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a938:	e853 3f00 	ldrex	r3, [r3]
 800a93c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a948:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	330c      	adds	r3, #12
 800a952:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a956:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a95a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a962:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a966:	e841 2300 	strex	r3, r2, [r1]
 800a96a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a96e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1d9      	bne.n	800a92a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	3314      	adds	r3, #20
 800a97c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a980:	e853 3f00 	ldrex	r3, [r3]
 800a984:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a988:	f023 0301 	bic.w	r3, r3, #1
 800a98c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3314      	adds	r3, #20
 800a996:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a99a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a99e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a9a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a9a6:	e841 2300 	strex	r3, r2, [r1]
 800a9aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a9ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1e1      	bne.n	800a976 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	3314      	adds	r3, #20
 800a9b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9bc:	e853 3f00 	ldrex	r3, [r3]
 800a9c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a9c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3314      	adds	r3, #20
 800a9d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a9d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a9d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a9dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9de:	e841 2300 	strex	r3, r2, [r1]
 800a9e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a9e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d1e3      	bne.n	800a9b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2220      	movs	r2, #32
 800a9ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	330c      	adds	r3, #12
 800a9fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa02:	e853 3f00 	ldrex	r3, [r3]
 800aa06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa0a:	f023 0310 	bic.w	r3, r3, #16
 800aa0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	330c      	adds	r3, #12
 800aa18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aa1c:	65ba      	str	r2, [r7, #88]	; 0x58
 800aa1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa24:	e841 2300 	strex	r3, r2, [r1]
 800aa28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1e3      	bne.n	800a9f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fd f8b8 	bl	8007baa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	4619      	mov	r1, r3
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f8b6 	bl	800abbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa50:	e099      	b.n	800ab86 <HAL_UART_IRQHandler+0x50e>
 800aa52:	bf00      	nop
 800aa54:	0800adeb 	.word	0x0800adeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f000 808b 	beq.w	800ab8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800aa74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 8086 	beq.w	800ab8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	330c      	adds	r3, #12
 800aa84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa88:	e853 3f00 	ldrex	r3, [r3]
 800aa8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	330c      	adds	r3, #12
 800aa9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aaa2:	647a      	str	r2, [r7, #68]	; 0x44
 800aaa4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aaa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aaaa:	e841 2300 	strex	r3, r2, [r1]
 800aaae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d1e3      	bne.n	800aa7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3314      	adds	r3, #20
 800aabc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac0:	e853 3f00 	ldrex	r3, [r3]
 800aac4:	623b      	str	r3, [r7, #32]
   return(result);
 800aac6:	6a3b      	ldr	r3, [r7, #32]
 800aac8:	f023 0301 	bic.w	r3, r3, #1
 800aacc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3314      	adds	r3, #20
 800aad6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aada:	633a      	str	r2, [r7, #48]	; 0x30
 800aadc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aae2:	e841 2300 	strex	r3, r2, [r1]
 800aae6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1e3      	bne.n	800aab6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2220      	movs	r2, #32
 800aaf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	330c      	adds	r3, #12
 800ab02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	e853 3f00 	ldrex	r3, [r3]
 800ab0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f023 0310 	bic.w	r3, r3, #16
 800ab12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	330c      	adds	r3, #12
 800ab1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ab20:	61fa      	str	r2, [r7, #28]
 800ab22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab24:	69b9      	ldr	r1, [r7, #24]
 800ab26:	69fa      	ldr	r2, [r7, #28]
 800ab28:	e841 2300 	strex	r3, r2, [r1]
 800ab2c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1e3      	bne.n	800aafc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab38:	4619      	mov	r1, r3
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 f83e 	bl	800abbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab40:	e023      	b.n	800ab8a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ab42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d009      	beq.n	800ab62 <HAL_UART_IRQHandler+0x4ea>
 800ab4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d003      	beq.n	800ab62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f959 	bl	800ae12 <UART_Transmit_IT>
    return;
 800ab60:	e014      	b.n	800ab8c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ab62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00e      	beq.n	800ab8c <HAL_UART_IRQHandler+0x514>
 800ab6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d008      	beq.n	800ab8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 f999 	bl	800aeb2 <UART_EndTransmit_IT>
    return;
 800ab80:	e004      	b.n	800ab8c <HAL_UART_IRQHandler+0x514>
    return;
 800ab82:	bf00      	nop
 800ab84:	e002      	b.n	800ab8c <HAL_UART_IRQHandler+0x514>
      return;
 800ab86:	bf00      	nop
 800ab88:	e000      	b.n	800ab8c <HAL_UART_IRQHandler+0x514>
      return;
 800ab8a:	bf00      	nop
  }
}
 800ab8c:	37e8      	adds	r7, #232	; 0xe8
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop

0800ab94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ab9c:	bf00      	nop
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	460b      	mov	r3, r1
 800abc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b090      	sub	sp, #64	; 0x40
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	603b      	str	r3, [r7, #0]
 800abe0:	4613      	mov	r3, r2
 800abe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abe4:	e050      	b.n	800ac88 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abec:	d04c      	beq.n	800ac88 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800abee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d007      	beq.n	800ac04 <UART_WaitOnFlagUntilTimeout+0x30>
 800abf4:	f7fc faa6 	bl	8007144 <HAL_GetTick>
 800abf8:	4602      	mov	r2, r0
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	1ad3      	subs	r3, r2, r3
 800abfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d241      	bcs.n	800ac88 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	330c      	adds	r3, #12
 800ac0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0e:	e853 3f00 	ldrex	r3, [r3]
 800ac12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ac1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	330c      	adds	r3, #12
 800ac22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac24:	637a      	str	r2, [r7, #52]	; 0x34
 800ac26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac2c:	e841 2300 	strex	r3, r2, [r1]
 800ac30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1e5      	bne.n	800ac04 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3314      	adds	r3, #20
 800ac3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	e853 3f00 	ldrex	r3, [r3]
 800ac46:	613b      	str	r3, [r7, #16]
   return(result);
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	f023 0301 	bic.w	r3, r3, #1
 800ac4e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	3314      	adds	r3, #20
 800ac56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac58:	623a      	str	r2, [r7, #32]
 800ac5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5c:	69f9      	ldr	r1, [r7, #28]
 800ac5e:	6a3a      	ldr	r2, [r7, #32]
 800ac60:	e841 2300 	strex	r3, r2, [r1]
 800ac64:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1e5      	bne.n	800ac38 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2220      	movs	r2, #32
 800ac70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2220      	movs	r2, #32
 800ac78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ac84:	2303      	movs	r3, #3
 800ac86:	e00f      	b.n	800aca8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	4013      	ands	r3, r2
 800ac92:	68ba      	ldr	r2, [r7, #8]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	bf0c      	ite	eq
 800ac98:	2301      	moveq	r3, #1
 800ac9a:	2300      	movne	r3, #0
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	461a      	mov	r2, r3
 800aca0:	79fb      	ldrb	r3, [r7, #7]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d09f      	beq.n	800abe6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3740      	adds	r7, #64	; 0x40
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b085      	sub	sp, #20
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	4613      	mov	r3, r2
 800acbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	68ba      	ldr	r2, [r7, #8]
 800acc2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	88fa      	ldrh	r2, [r7, #6]
 800acc8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	88fa      	ldrh	r2, [r7, #6]
 800acce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2222      	movs	r2, #34	; 0x22
 800acda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68da      	ldr	r2, [r3, #12]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acf4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	695a      	ldr	r2, [r3, #20]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f042 0201 	orr.w	r2, r2, #1
 800ad04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68da      	ldr	r2, [r3, #12]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f042 0220 	orr.w	r2, r2, #32
 800ad14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3714      	adds	r7, #20
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b095      	sub	sp, #84	; 0x54
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	330c      	adds	r3, #12
 800ad32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad36:	e853 3f00 	ldrex	r3, [r3]
 800ad3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	330c      	adds	r3, #12
 800ad4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad4c:	643a      	str	r2, [r7, #64]	; 0x40
 800ad4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad54:	e841 2300 	strex	r3, r2, [r1]
 800ad58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1e5      	bne.n	800ad2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3314      	adds	r3, #20
 800ad66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad68:	6a3b      	ldr	r3, [r7, #32]
 800ad6a:	e853 3f00 	ldrex	r3, [r3]
 800ad6e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	f023 0301 	bic.w	r3, r3, #1
 800ad76:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	3314      	adds	r3, #20
 800ad7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad80:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad88:	e841 2300 	strex	r3, r2, [r1]
 800ad8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1e5      	bne.n	800ad60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d119      	bne.n	800add0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	330c      	adds	r3, #12
 800ada2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	e853 3f00 	ldrex	r3, [r3]
 800adaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	f023 0310 	bic.w	r3, r3, #16
 800adb2:	647b      	str	r3, [r7, #68]	; 0x44
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	330c      	adds	r3, #12
 800adba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adbc:	61ba      	str	r2, [r7, #24]
 800adbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc0:	6979      	ldr	r1, [r7, #20]
 800adc2:	69ba      	ldr	r2, [r7, #24]
 800adc4:	e841 2300 	strex	r3, r2, [r1]
 800adc8:	613b      	str	r3, [r7, #16]
   return(result);
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1e5      	bne.n	800ad9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2220      	movs	r2, #32
 800add4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800adde:	bf00      	nop
 800ade0:	3754      	adds	r7, #84	; 0x54
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr

0800adea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b084      	sub	sp, #16
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2200      	movs	r2, #0
 800adfc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f7ff fecf 	bl	800aba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae0a:	bf00      	nop
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ae12:	b480      	push	{r7}
 800ae14:	b085      	sub	sp, #20
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b21      	cmp	r3, #33	; 0x21
 800ae24:	d13e      	bne.n	800aea4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae2e:	d114      	bne.n	800ae5a <UART_Transmit_IT+0x48>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d110      	bne.n	800ae5a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a1b      	ldr	r3, [r3, #32]
 800ae3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	881b      	ldrh	r3, [r3, #0]
 800ae42:	461a      	mov	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a1b      	ldr	r3, [r3, #32]
 800ae52:	1c9a      	adds	r2, r3, #2
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	621a      	str	r2, [r3, #32]
 800ae58:	e008      	b.n	800ae6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	1c59      	adds	r1, r3, #1
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	6211      	str	r1, [r2, #32]
 800ae64:	781a      	ldrb	r2, [r3, #0]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	3b01      	subs	r3, #1
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	4619      	mov	r1, r3
 800ae7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10f      	bne.n	800aea0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68da      	ldr	r2, [r3, #12]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	68da      	ldr	r2, [r3, #12]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aea0:	2300      	movs	r3, #0
 800aea2:	e000      	b.n	800aea6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aea4:	2302      	movs	r3, #2
  }
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3714      	adds	r7, #20
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr

0800aeb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b082      	sub	sp, #8
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68da      	ldr	r2, [r3, #12]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aec8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2220      	movs	r2, #32
 800aece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f7ff fe5e 	bl	800ab94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aed8:	2300      	movs	r3, #0
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b08c      	sub	sp, #48	; 0x30
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	2b22      	cmp	r3, #34	; 0x22
 800aef4:	f040 80ab 	bne.w	800b04e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af00:	d117      	bne.n	800af32 <UART_Receive_IT+0x50>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	691b      	ldr	r3, [r3, #16]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d113      	bne.n	800af32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800af0a:	2300      	movs	r3, #0
 800af0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af20:	b29a      	uxth	r2, r3
 800af22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af2a:	1c9a      	adds	r2, r3, #2
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	629a      	str	r2, [r3, #40]	; 0x28
 800af30:	e026      	b.n	800af80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800af38:	2300      	movs	r3, #0
 800af3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af44:	d007      	beq.n	800af56 <UART_Receive_IT+0x74>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10a      	bne.n	800af64 <UART_Receive_IT+0x82>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d106      	bne.n	800af64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	b2da      	uxtb	r2, r3
 800af5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af60:	701a      	strb	r2, [r3, #0]
 800af62:	e008      	b.n	800af76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af70:	b2da      	uxtb	r2, r3
 800af72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7a:	1c5a      	adds	r2, r3, #1
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af84:	b29b      	uxth	r3, r3
 800af86:	3b01      	subs	r3, #1
 800af88:	b29b      	uxth	r3, r3
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	4619      	mov	r1, r3
 800af8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800af90:	2b00      	cmp	r3, #0
 800af92:	d15a      	bne.n	800b04a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68da      	ldr	r2, [r3, #12]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f022 0220 	bic.w	r2, r2, #32
 800afa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68da      	ldr	r2, [r3, #12]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800afb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	695a      	ldr	r2, [r3, #20]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f022 0201 	bic.w	r2, r2, #1
 800afc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2220      	movs	r2, #32
 800afc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d135      	bne.n	800b040 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	330c      	adds	r3, #12
 800afe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	e853 3f00 	ldrex	r3, [r3]
 800afe8:	613b      	str	r3, [r7, #16]
   return(result);
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	f023 0310 	bic.w	r3, r3, #16
 800aff0:	627b      	str	r3, [r7, #36]	; 0x24
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	330c      	adds	r3, #12
 800aff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800affa:	623a      	str	r2, [r7, #32]
 800affc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affe:	69f9      	ldr	r1, [r7, #28]
 800b000:	6a3a      	ldr	r2, [r7, #32]
 800b002:	e841 2300 	strex	r3, r2, [r1]
 800b006:	61bb      	str	r3, [r7, #24]
   return(result);
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1e5      	bne.n	800afda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f003 0310 	and.w	r3, r3, #16
 800b018:	2b10      	cmp	r3, #16
 800b01a:	d10a      	bne.n	800b032 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b01c:	2300      	movs	r3, #0
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	60fb      	str	r3, [r7, #12]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7ff fdbf 	bl	800abbc <HAL_UARTEx_RxEventCallback>
 800b03e:	e002      	b.n	800b046 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f7f6 f935 	bl	80012b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b046:	2300      	movs	r3, #0
 800b048:	e002      	b.n	800b050 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b04a:	2300      	movs	r3, #0
 800b04c:	e000      	b.n	800b050 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b04e:	2302      	movs	r3, #2
  }
}
 800b050:	4618      	mov	r0, r3
 800b052:	3730      	adds	r7, #48	; 0x30
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05c:	b09f      	sub	sp, #124	; 0x7c
 800b05e:	af00      	add	r7, sp, #0
 800b060:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b06c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b06e:	68d9      	ldr	r1, [r3, #12]
 800b070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	ea40 0301 	orr.w	r3, r0, r1
 800b078:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b07a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b07c:	689a      	ldr	r2, [r3, #8]
 800b07e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	431a      	orrs	r2, r3
 800b084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b086:	695b      	ldr	r3, [r3, #20]
 800b088:	431a      	orrs	r2, r3
 800b08a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b08c:	69db      	ldr	r3, [r3, #28]
 800b08e:	4313      	orrs	r3, r2
 800b090:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b09c:	f021 010c 	bic.w	r1, r1, #12
 800b0a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0a6:	430b      	orrs	r3, r1
 800b0a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b0aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	695b      	ldr	r3, [r3, #20]
 800b0b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b0b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0b6:	6999      	ldr	r1, [r3, #24]
 800b0b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	ea40 0301 	orr.w	r3, r0, r1
 800b0c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b0c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	4bc5      	ldr	r3, [pc, #788]	; (800b3dc <UART_SetConfig+0x384>)
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d004      	beq.n	800b0d6 <UART_SetConfig+0x7e>
 800b0cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	4bc3      	ldr	r3, [pc, #780]	; (800b3e0 <UART_SetConfig+0x388>)
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d103      	bne.n	800b0de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b0d6:	f7fe fb8f 	bl	80097f8 <HAL_RCC_GetPCLK2Freq>
 800b0da:	6778      	str	r0, [r7, #116]	; 0x74
 800b0dc:	e002      	b.n	800b0e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b0de:	f7fe fb77 	bl	80097d0 <HAL_RCC_GetPCLK1Freq>
 800b0e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0e6:	69db      	ldr	r3, [r3, #28]
 800b0e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0ec:	f040 80b6 	bne.w	800b25c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b0f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0f2:	461c      	mov	r4, r3
 800b0f4:	f04f 0500 	mov.w	r5, #0
 800b0f8:	4622      	mov	r2, r4
 800b0fa:	462b      	mov	r3, r5
 800b0fc:	1891      	adds	r1, r2, r2
 800b0fe:	6439      	str	r1, [r7, #64]	; 0x40
 800b100:	415b      	adcs	r3, r3
 800b102:	647b      	str	r3, [r7, #68]	; 0x44
 800b104:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b108:	1912      	adds	r2, r2, r4
 800b10a:	eb45 0303 	adc.w	r3, r5, r3
 800b10e:	f04f 0000 	mov.w	r0, #0
 800b112:	f04f 0100 	mov.w	r1, #0
 800b116:	00d9      	lsls	r1, r3, #3
 800b118:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b11c:	00d0      	lsls	r0, r2, #3
 800b11e:	4602      	mov	r2, r0
 800b120:	460b      	mov	r3, r1
 800b122:	1911      	adds	r1, r2, r4
 800b124:	6639      	str	r1, [r7, #96]	; 0x60
 800b126:	416b      	adcs	r3, r5
 800b128:	667b      	str	r3, [r7, #100]	; 0x64
 800b12a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	461a      	mov	r2, r3
 800b130:	f04f 0300 	mov.w	r3, #0
 800b134:	1891      	adds	r1, r2, r2
 800b136:	63b9      	str	r1, [r7, #56]	; 0x38
 800b138:	415b      	adcs	r3, r3
 800b13a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b13c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b140:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b144:	f7f5 fda8 	bl	8000c98 <__aeabi_uldivmod>
 800b148:	4602      	mov	r2, r0
 800b14a:	460b      	mov	r3, r1
 800b14c:	4ba5      	ldr	r3, [pc, #660]	; (800b3e4 <UART_SetConfig+0x38c>)
 800b14e:	fba3 2302 	umull	r2, r3, r3, r2
 800b152:	095b      	lsrs	r3, r3, #5
 800b154:	011e      	lsls	r6, r3, #4
 800b156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b158:	461c      	mov	r4, r3
 800b15a:	f04f 0500 	mov.w	r5, #0
 800b15e:	4622      	mov	r2, r4
 800b160:	462b      	mov	r3, r5
 800b162:	1891      	adds	r1, r2, r2
 800b164:	6339      	str	r1, [r7, #48]	; 0x30
 800b166:	415b      	adcs	r3, r3
 800b168:	637b      	str	r3, [r7, #52]	; 0x34
 800b16a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b16e:	1912      	adds	r2, r2, r4
 800b170:	eb45 0303 	adc.w	r3, r5, r3
 800b174:	f04f 0000 	mov.w	r0, #0
 800b178:	f04f 0100 	mov.w	r1, #0
 800b17c:	00d9      	lsls	r1, r3, #3
 800b17e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b182:	00d0      	lsls	r0, r2, #3
 800b184:	4602      	mov	r2, r0
 800b186:	460b      	mov	r3, r1
 800b188:	1911      	adds	r1, r2, r4
 800b18a:	65b9      	str	r1, [r7, #88]	; 0x58
 800b18c:	416b      	adcs	r3, r5
 800b18e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	461a      	mov	r2, r3
 800b196:	f04f 0300 	mov.w	r3, #0
 800b19a:	1891      	adds	r1, r2, r2
 800b19c:	62b9      	str	r1, [r7, #40]	; 0x28
 800b19e:	415b      	adcs	r3, r3
 800b1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b1a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b1aa:	f7f5 fd75 	bl	8000c98 <__aeabi_uldivmod>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	4b8c      	ldr	r3, [pc, #560]	; (800b3e4 <UART_SetConfig+0x38c>)
 800b1b4:	fba3 1302 	umull	r1, r3, r3, r2
 800b1b8:	095b      	lsrs	r3, r3, #5
 800b1ba:	2164      	movs	r1, #100	; 0x64
 800b1bc:	fb01 f303 	mul.w	r3, r1, r3
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	00db      	lsls	r3, r3, #3
 800b1c4:	3332      	adds	r3, #50	; 0x32
 800b1c6:	4a87      	ldr	r2, [pc, #540]	; (800b3e4 <UART_SetConfig+0x38c>)
 800b1c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1cc:	095b      	lsrs	r3, r3, #5
 800b1ce:	005b      	lsls	r3, r3, #1
 800b1d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b1d4:	441e      	add	r6, r3
 800b1d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f04f 0100 	mov.w	r1, #0
 800b1de:	4602      	mov	r2, r0
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	1894      	adds	r4, r2, r2
 800b1e4:	623c      	str	r4, [r7, #32]
 800b1e6:	415b      	adcs	r3, r3
 800b1e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b1ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b1ee:	1812      	adds	r2, r2, r0
 800b1f0:	eb41 0303 	adc.w	r3, r1, r3
 800b1f4:	f04f 0400 	mov.w	r4, #0
 800b1f8:	f04f 0500 	mov.w	r5, #0
 800b1fc:	00dd      	lsls	r5, r3, #3
 800b1fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b202:	00d4      	lsls	r4, r2, #3
 800b204:	4622      	mov	r2, r4
 800b206:	462b      	mov	r3, r5
 800b208:	1814      	adds	r4, r2, r0
 800b20a:	653c      	str	r4, [r7, #80]	; 0x50
 800b20c:	414b      	adcs	r3, r1
 800b20e:	657b      	str	r3, [r7, #84]	; 0x54
 800b210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	461a      	mov	r2, r3
 800b216:	f04f 0300 	mov.w	r3, #0
 800b21a:	1891      	adds	r1, r2, r2
 800b21c:	61b9      	str	r1, [r7, #24]
 800b21e:	415b      	adcs	r3, r3
 800b220:	61fb      	str	r3, [r7, #28]
 800b222:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b226:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b22a:	f7f5 fd35 	bl	8000c98 <__aeabi_uldivmod>
 800b22e:	4602      	mov	r2, r0
 800b230:	460b      	mov	r3, r1
 800b232:	4b6c      	ldr	r3, [pc, #432]	; (800b3e4 <UART_SetConfig+0x38c>)
 800b234:	fba3 1302 	umull	r1, r3, r3, r2
 800b238:	095b      	lsrs	r3, r3, #5
 800b23a:	2164      	movs	r1, #100	; 0x64
 800b23c:	fb01 f303 	mul.w	r3, r1, r3
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	00db      	lsls	r3, r3, #3
 800b244:	3332      	adds	r3, #50	; 0x32
 800b246:	4a67      	ldr	r2, [pc, #412]	; (800b3e4 <UART_SetConfig+0x38c>)
 800b248:	fba2 2303 	umull	r2, r3, r2, r3
 800b24c:	095b      	lsrs	r3, r3, #5
 800b24e:	f003 0207 	and.w	r2, r3, #7
 800b252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4432      	add	r2, r6
 800b258:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b25a:	e0b9      	b.n	800b3d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b25c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b25e:	461c      	mov	r4, r3
 800b260:	f04f 0500 	mov.w	r5, #0
 800b264:	4622      	mov	r2, r4
 800b266:	462b      	mov	r3, r5
 800b268:	1891      	adds	r1, r2, r2
 800b26a:	6139      	str	r1, [r7, #16]
 800b26c:	415b      	adcs	r3, r3
 800b26e:	617b      	str	r3, [r7, #20]
 800b270:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b274:	1912      	adds	r2, r2, r4
 800b276:	eb45 0303 	adc.w	r3, r5, r3
 800b27a:	f04f 0000 	mov.w	r0, #0
 800b27e:	f04f 0100 	mov.w	r1, #0
 800b282:	00d9      	lsls	r1, r3, #3
 800b284:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b288:	00d0      	lsls	r0, r2, #3
 800b28a:	4602      	mov	r2, r0
 800b28c:	460b      	mov	r3, r1
 800b28e:	eb12 0804 	adds.w	r8, r2, r4
 800b292:	eb43 0905 	adc.w	r9, r3, r5
 800b296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f04f 0100 	mov.w	r1, #0
 800b2a0:	f04f 0200 	mov.w	r2, #0
 800b2a4:	f04f 0300 	mov.w	r3, #0
 800b2a8:	008b      	lsls	r3, r1, #2
 800b2aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b2ae:	0082      	lsls	r2, r0, #2
 800b2b0:	4640      	mov	r0, r8
 800b2b2:	4649      	mov	r1, r9
 800b2b4:	f7f5 fcf0 	bl	8000c98 <__aeabi_uldivmod>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	4b49      	ldr	r3, [pc, #292]	; (800b3e4 <UART_SetConfig+0x38c>)
 800b2be:	fba3 2302 	umull	r2, r3, r3, r2
 800b2c2:	095b      	lsrs	r3, r3, #5
 800b2c4:	011e      	lsls	r6, r3, #4
 800b2c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f04f 0100 	mov.w	r1, #0
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	1894      	adds	r4, r2, r2
 800b2d4:	60bc      	str	r4, [r7, #8]
 800b2d6:	415b      	adcs	r3, r3
 800b2d8:	60fb      	str	r3, [r7, #12]
 800b2da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b2de:	1812      	adds	r2, r2, r0
 800b2e0:	eb41 0303 	adc.w	r3, r1, r3
 800b2e4:	f04f 0400 	mov.w	r4, #0
 800b2e8:	f04f 0500 	mov.w	r5, #0
 800b2ec:	00dd      	lsls	r5, r3, #3
 800b2ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b2f2:	00d4      	lsls	r4, r2, #3
 800b2f4:	4622      	mov	r2, r4
 800b2f6:	462b      	mov	r3, r5
 800b2f8:	1814      	adds	r4, r2, r0
 800b2fa:	64bc      	str	r4, [r7, #72]	; 0x48
 800b2fc:	414b      	adcs	r3, r1
 800b2fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	4618      	mov	r0, r3
 800b306:	f04f 0100 	mov.w	r1, #0
 800b30a:	f04f 0200 	mov.w	r2, #0
 800b30e:	f04f 0300 	mov.w	r3, #0
 800b312:	008b      	lsls	r3, r1, #2
 800b314:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b318:	0082      	lsls	r2, r0, #2
 800b31a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b31e:	f7f5 fcbb 	bl	8000c98 <__aeabi_uldivmod>
 800b322:	4602      	mov	r2, r0
 800b324:	460b      	mov	r3, r1
 800b326:	4b2f      	ldr	r3, [pc, #188]	; (800b3e4 <UART_SetConfig+0x38c>)
 800b328:	fba3 1302 	umull	r1, r3, r3, r2
 800b32c:	095b      	lsrs	r3, r3, #5
 800b32e:	2164      	movs	r1, #100	; 0x64
 800b330:	fb01 f303 	mul.w	r3, r1, r3
 800b334:	1ad3      	subs	r3, r2, r3
 800b336:	011b      	lsls	r3, r3, #4
 800b338:	3332      	adds	r3, #50	; 0x32
 800b33a:	4a2a      	ldr	r2, [pc, #168]	; (800b3e4 <UART_SetConfig+0x38c>)
 800b33c:	fba2 2303 	umull	r2, r3, r2, r3
 800b340:	095b      	lsrs	r3, r3, #5
 800b342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b346:	441e      	add	r6, r3
 800b348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b34a:	4618      	mov	r0, r3
 800b34c:	f04f 0100 	mov.w	r1, #0
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	1894      	adds	r4, r2, r2
 800b356:	603c      	str	r4, [r7, #0]
 800b358:	415b      	adcs	r3, r3
 800b35a:	607b      	str	r3, [r7, #4]
 800b35c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b360:	1812      	adds	r2, r2, r0
 800b362:	eb41 0303 	adc.w	r3, r1, r3
 800b366:	f04f 0400 	mov.w	r4, #0
 800b36a:	f04f 0500 	mov.w	r5, #0
 800b36e:	00dd      	lsls	r5, r3, #3
 800b370:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b374:	00d4      	lsls	r4, r2, #3
 800b376:	4622      	mov	r2, r4
 800b378:	462b      	mov	r3, r5
 800b37a:	eb12 0a00 	adds.w	sl, r2, r0
 800b37e:	eb43 0b01 	adc.w	fp, r3, r1
 800b382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	4618      	mov	r0, r3
 800b388:	f04f 0100 	mov.w	r1, #0
 800b38c:	f04f 0200 	mov.w	r2, #0
 800b390:	f04f 0300 	mov.w	r3, #0
 800b394:	008b      	lsls	r3, r1, #2
 800b396:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b39a:	0082      	lsls	r2, r0, #2
 800b39c:	4650      	mov	r0, sl
 800b39e:	4659      	mov	r1, fp
 800b3a0:	f7f5 fc7a 	bl	8000c98 <__aeabi_uldivmod>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4b0e      	ldr	r3, [pc, #56]	; (800b3e4 <UART_SetConfig+0x38c>)
 800b3aa:	fba3 1302 	umull	r1, r3, r3, r2
 800b3ae:	095b      	lsrs	r3, r3, #5
 800b3b0:	2164      	movs	r1, #100	; 0x64
 800b3b2:	fb01 f303 	mul.w	r3, r1, r3
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	011b      	lsls	r3, r3, #4
 800b3ba:	3332      	adds	r3, #50	; 0x32
 800b3bc:	4a09      	ldr	r2, [pc, #36]	; (800b3e4 <UART_SetConfig+0x38c>)
 800b3be:	fba2 2303 	umull	r2, r3, r2, r3
 800b3c2:	095b      	lsrs	r3, r3, #5
 800b3c4:	f003 020f 	and.w	r2, r3, #15
 800b3c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4432      	add	r2, r6
 800b3ce:	609a      	str	r2, [r3, #8]
}
 800b3d0:	bf00      	nop
 800b3d2:	377c      	adds	r7, #124	; 0x7c
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3da:	bf00      	nop
 800b3dc:	40011000 	.word	0x40011000
 800b3e0:	40011400 	.word	0x40011400
 800b3e4:	51eb851f 	.word	0x51eb851f

0800b3e8 <__errno>:
 800b3e8:	4b01      	ldr	r3, [pc, #4]	; (800b3f0 <__errno+0x8>)
 800b3ea:	6818      	ldr	r0, [r3, #0]
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	20000458 	.word	0x20000458

0800b3f4 <__libc_init_array>:
 800b3f4:	b570      	push	{r4, r5, r6, lr}
 800b3f6:	4d0d      	ldr	r5, [pc, #52]	; (800b42c <__libc_init_array+0x38>)
 800b3f8:	4c0d      	ldr	r4, [pc, #52]	; (800b430 <__libc_init_array+0x3c>)
 800b3fa:	1b64      	subs	r4, r4, r5
 800b3fc:	10a4      	asrs	r4, r4, #2
 800b3fe:	2600      	movs	r6, #0
 800b400:	42a6      	cmp	r6, r4
 800b402:	d109      	bne.n	800b418 <__libc_init_array+0x24>
 800b404:	4d0b      	ldr	r5, [pc, #44]	; (800b434 <__libc_init_array+0x40>)
 800b406:	4c0c      	ldr	r4, [pc, #48]	; (800b438 <__libc_init_array+0x44>)
 800b408:	f001 ff1c 	bl	800d244 <_init>
 800b40c:	1b64      	subs	r4, r4, r5
 800b40e:	10a4      	asrs	r4, r4, #2
 800b410:	2600      	movs	r6, #0
 800b412:	42a6      	cmp	r6, r4
 800b414:	d105      	bne.n	800b422 <__libc_init_array+0x2e>
 800b416:	bd70      	pop	{r4, r5, r6, pc}
 800b418:	f855 3b04 	ldr.w	r3, [r5], #4
 800b41c:	4798      	blx	r3
 800b41e:	3601      	adds	r6, #1
 800b420:	e7ee      	b.n	800b400 <__libc_init_array+0xc>
 800b422:	f855 3b04 	ldr.w	r3, [r5], #4
 800b426:	4798      	blx	r3
 800b428:	3601      	adds	r6, #1
 800b42a:	e7f2      	b.n	800b412 <__libc_init_array+0x1e>
 800b42c:	0800d320 	.word	0x0800d320
 800b430:	0800d320 	.word	0x0800d320
 800b434:	0800d320 	.word	0x0800d320
 800b438:	0800d324 	.word	0x0800d324

0800b43c <memcpy>:
 800b43c:	440a      	add	r2, r1
 800b43e:	4291      	cmp	r1, r2
 800b440:	f100 33ff 	add.w	r3, r0, #4294967295
 800b444:	d100      	bne.n	800b448 <memcpy+0xc>
 800b446:	4770      	bx	lr
 800b448:	b510      	push	{r4, lr}
 800b44a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b44e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b452:	4291      	cmp	r1, r2
 800b454:	d1f9      	bne.n	800b44a <memcpy+0xe>
 800b456:	bd10      	pop	{r4, pc}

0800b458 <memset>:
 800b458:	4402      	add	r2, r0
 800b45a:	4603      	mov	r3, r0
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d100      	bne.n	800b462 <memset+0xa>
 800b460:	4770      	bx	lr
 800b462:	f803 1b01 	strb.w	r1, [r3], #1
 800b466:	e7f9      	b.n	800b45c <memset+0x4>

0800b468 <siprintf>:
 800b468:	b40e      	push	{r1, r2, r3}
 800b46a:	b500      	push	{lr}
 800b46c:	b09c      	sub	sp, #112	; 0x70
 800b46e:	ab1d      	add	r3, sp, #116	; 0x74
 800b470:	9002      	str	r0, [sp, #8]
 800b472:	9006      	str	r0, [sp, #24]
 800b474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b478:	4809      	ldr	r0, [pc, #36]	; (800b4a0 <siprintf+0x38>)
 800b47a:	9107      	str	r1, [sp, #28]
 800b47c:	9104      	str	r1, [sp, #16]
 800b47e:	4909      	ldr	r1, [pc, #36]	; (800b4a4 <siprintf+0x3c>)
 800b480:	f853 2b04 	ldr.w	r2, [r3], #4
 800b484:	9105      	str	r1, [sp, #20]
 800b486:	6800      	ldr	r0, [r0, #0]
 800b488:	9301      	str	r3, [sp, #4]
 800b48a:	a902      	add	r1, sp, #8
 800b48c:	f000 f870 	bl	800b570 <_svfiprintf_r>
 800b490:	9b02      	ldr	r3, [sp, #8]
 800b492:	2200      	movs	r2, #0
 800b494:	701a      	strb	r2, [r3, #0]
 800b496:	b01c      	add	sp, #112	; 0x70
 800b498:	f85d eb04 	ldr.w	lr, [sp], #4
 800b49c:	b003      	add	sp, #12
 800b49e:	4770      	bx	lr
 800b4a0:	20000458 	.word	0x20000458
 800b4a4:	ffff0208 	.word	0xffff0208

0800b4a8 <strcpy>:
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4ae:	f803 2b01 	strb.w	r2, [r3], #1
 800b4b2:	2a00      	cmp	r2, #0
 800b4b4:	d1f9      	bne.n	800b4aa <strcpy+0x2>
 800b4b6:	4770      	bx	lr

0800b4b8 <__ssputs_r>:
 800b4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4bc:	688e      	ldr	r6, [r1, #8]
 800b4be:	429e      	cmp	r6, r3
 800b4c0:	4682      	mov	sl, r0
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	4690      	mov	r8, r2
 800b4c6:	461f      	mov	r7, r3
 800b4c8:	d838      	bhi.n	800b53c <__ssputs_r+0x84>
 800b4ca:	898a      	ldrh	r2, [r1, #12]
 800b4cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4d0:	d032      	beq.n	800b538 <__ssputs_r+0x80>
 800b4d2:	6825      	ldr	r5, [r4, #0]
 800b4d4:	6909      	ldr	r1, [r1, #16]
 800b4d6:	eba5 0901 	sub.w	r9, r5, r1
 800b4da:	6965      	ldr	r5, [r4, #20]
 800b4dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	444b      	add	r3, r9
 800b4e8:	106d      	asrs	r5, r5, #1
 800b4ea:	429d      	cmp	r5, r3
 800b4ec:	bf38      	it	cc
 800b4ee:	461d      	movcc	r5, r3
 800b4f0:	0553      	lsls	r3, r2, #21
 800b4f2:	d531      	bpl.n	800b558 <__ssputs_r+0xa0>
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	f000 fb39 	bl	800bb6c <_malloc_r>
 800b4fa:	4606      	mov	r6, r0
 800b4fc:	b950      	cbnz	r0, 800b514 <__ssputs_r+0x5c>
 800b4fe:	230c      	movs	r3, #12
 800b500:	f8ca 3000 	str.w	r3, [sl]
 800b504:	89a3      	ldrh	r3, [r4, #12]
 800b506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b50a:	81a3      	strh	r3, [r4, #12]
 800b50c:	f04f 30ff 	mov.w	r0, #4294967295
 800b510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b514:	6921      	ldr	r1, [r4, #16]
 800b516:	464a      	mov	r2, r9
 800b518:	f7ff ff90 	bl	800b43c <memcpy>
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b526:	81a3      	strh	r3, [r4, #12]
 800b528:	6126      	str	r6, [r4, #16]
 800b52a:	6165      	str	r5, [r4, #20]
 800b52c:	444e      	add	r6, r9
 800b52e:	eba5 0509 	sub.w	r5, r5, r9
 800b532:	6026      	str	r6, [r4, #0]
 800b534:	60a5      	str	r5, [r4, #8]
 800b536:	463e      	mov	r6, r7
 800b538:	42be      	cmp	r6, r7
 800b53a:	d900      	bls.n	800b53e <__ssputs_r+0x86>
 800b53c:	463e      	mov	r6, r7
 800b53e:	4632      	mov	r2, r6
 800b540:	6820      	ldr	r0, [r4, #0]
 800b542:	4641      	mov	r1, r8
 800b544:	f000 faa8 	bl	800ba98 <memmove>
 800b548:	68a3      	ldr	r3, [r4, #8]
 800b54a:	6822      	ldr	r2, [r4, #0]
 800b54c:	1b9b      	subs	r3, r3, r6
 800b54e:	4432      	add	r2, r6
 800b550:	60a3      	str	r3, [r4, #8]
 800b552:	6022      	str	r2, [r4, #0]
 800b554:	2000      	movs	r0, #0
 800b556:	e7db      	b.n	800b510 <__ssputs_r+0x58>
 800b558:	462a      	mov	r2, r5
 800b55a:	f000 fb61 	bl	800bc20 <_realloc_r>
 800b55e:	4606      	mov	r6, r0
 800b560:	2800      	cmp	r0, #0
 800b562:	d1e1      	bne.n	800b528 <__ssputs_r+0x70>
 800b564:	6921      	ldr	r1, [r4, #16]
 800b566:	4650      	mov	r0, sl
 800b568:	f000 fab0 	bl	800bacc <_free_r>
 800b56c:	e7c7      	b.n	800b4fe <__ssputs_r+0x46>
	...

0800b570 <_svfiprintf_r>:
 800b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b574:	4698      	mov	r8, r3
 800b576:	898b      	ldrh	r3, [r1, #12]
 800b578:	061b      	lsls	r3, r3, #24
 800b57a:	b09d      	sub	sp, #116	; 0x74
 800b57c:	4607      	mov	r7, r0
 800b57e:	460d      	mov	r5, r1
 800b580:	4614      	mov	r4, r2
 800b582:	d50e      	bpl.n	800b5a2 <_svfiprintf_r+0x32>
 800b584:	690b      	ldr	r3, [r1, #16]
 800b586:	b963      	cbnz	r3, 800b5a2 <_svfiprintf_r+0x32>
 800b588:	2140      	movs	r1, #64	; 0x40
 800b58a:	f000 faef 	bl	800bb6c <_malloc_r>
 800b58e:	6028      	str	r0, [r5, #0]
 800b590:	6128      	str	r0, [r5, #16]
 800b592:	b920      	cbnz	r0, 800b59e <_svfiprintf_r+0x2e>
 800b594:	230c      	movs	r3, #12
 800b596:	603b      	str	r3, [r7, #0]
 800b598:	f04f 30ff 	mov.w	r0, #4294967295
 800b59c:	e0d1      	b.n	800b742 <_svfiprintf_r+0x1d2>
 800b59e:	2340      	movs	r3, #64	; 0x40
 800b5a0:	616b      	str	r3, [r5, #20]
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a6:	2320      	movs	r3, #32
 800b5a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5b0:	2330      	movs	r3, #48	; 0x30
 800b5b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b75c <_svfiprintf_r+0x1ec>
 800b5b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5ba:	f04f 0901 	mov.w	r9, #1
 800b5be:	4623      	mov	r3, r4
 800b5c0:	469a      	mov	sl, r3
 800b5c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5c6:	b10a      	cbz	r2, 800b5cc <_svfiprintf_r+0x5c>
 800b5c8:	2a25      	cmp	r2, #37	; 0x25
 800b5ca:	d1f9      	bne.n	800b5c0 <_svfiprintf_r+0x50>
 800b5cc:	ebba 0b04 	subs.w	fp, sl, r4
 800b5d0:	d00b      	beq.n	800b5ea <_svfiprintf_r+0x7a>
 800b5d2:	465b      	mov	r3, fp
 800b5d4:	4622      	mov	r2, r4
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4638      	mov	r0, r7
 800b5da:	f7ff ff6d 	bl	800b4b8 <__ssputs_r>
 800b5de:	3001      	adds	r0, #1
 800b5e0:	f000 80aa 	beq.w	800b738 <_svfiprintf_r+0x1c8>
 800b5e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5e6:	445a      	add	r2, fp
 800b5e8:	9209      	str	r2, [sp, #36]	; 0x24
 800b5ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	f000 80a2 	beq.w	800b738 <_svfiprintf_r+0x1c8>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5fe:	f10a 0a01 	add.w	sl, sl, #1
 800b602:	9304      	str	r3, [sp, #16]
 800b604:	9307      	str	r3, [sp, #28]
 800b606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b60a:	931a      	str	r3, [sp, #104]	; 0x68
 800b60c:	4654      	mov	r4, sl
 800b60e:	2205      	movs	r2, #5
 800b610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b614:	4851      	ldr	r0, [pc, #324]	; (800b75c <_svfiprintf_r+0x1ec>)
 800b616:	f7f4 fdeb 	bl	80001f0 <memchr>
 800b61a:	9a04      	ldr	r2, [sp, #16]
 800b61c:	b9d8      	cbnz	r0, 800b656 <_svfiprintf_r+0xe6>
 800b61e:	06d0      	lsls	r0, r2, #27
 800b620:	bf44      	itt	mi
 800b622:	2320      	movmi	r3, #32
 800b624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b628:	0711      	lsls	r1, r2, #28
 800b62a:	bf44      	itt	mi
 800b62c:	232b      	movmi	r3, #43	; 0x2b
 800b62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b632:	f89a 3000 	ldrb.w	r3, [sl]
 800b636:	2b2a      	cmp	r3, #42	; 0x2a
 800b638:	d015      	beq.n	800b666 <_svfiprintf_r+0xf6>
 800b63a:	9a07      	ldr	r2, [sp, #28]
 800b63c:	4654      	mov	r4, sl
 800b63e:	2000      	movs	r0, #0
 800b640:	f04f 0c0a 	mov.w	ip, #10
 800b644:	4621      	mov	r1, r4
 800b646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b64a:	3b30      	subs	r3, #48	; 0x30
 800b64c:	2b09      	cmp	r3, #9
 800b64e:	d94e      	bls.n	800b6ee <_svfiprintf_r+0x17e>
 800b650:	b1b0      	cbz	r0, 800b680 <_svfiprintf_r+0x110>
 800b652:	9207      	str	r2, [sp, #28]
 800b654:	e014      	b.n	800b680 <_svfiprintf_r+0x110>
 800b656:	eba0 0308 	sub.w	r3, r0, r8
 800b65a:	fa09 f303 	lsl.w	r3, r9, r3
 800b65e:	4313      	orrs	r3, r2
 800b660:	9304      	str	r3, [sp, #16]
 800b662:	46a2      	mov	sl, r4
 800b664:	e7d2      	b.n	800b60c <_svfiprintf_r+0x9c>
 800b666:	9b03      	ldr	r3, [sp, #12]
 800b668:	1d19      	adds	r1, r3, #4
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	9103      	str	r1, [sp, #12]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	bfbb      	ittet	lt
 800b672:	425b      	neglt	r3, r3
 800b674:	f042 0202 	orrlt.w	r2, r2, #2
 800b678:	9307      	strge	r3, [sp, #28]
 800b67a:	9307      	strlt	r3, [sp, #28]
 800b67c:	bfb8      	it	lt
 800b67e:	9204      	strlt	r2, [sp, #16]
 800b680:	7823      	ldrb	r3, [r4, #0]
 800b682:	2b2e      	cmp	r3, #46	; 0x2e
 800b684:	d10c      	bne.n	800b6a0 <_svfiprintf_r+0x130>
 800b686:	7863      	ldrb	r3, [r4, #1]
 800b688:	2b2a      	cmp	r3, #42	; 0x2a
 800b68a:	d135      	bne.n	800b6f8 <_svfiprintf_r+0x188>
 800b68c:	9b03      	ldr	r3, [sp, #12]
 800b68e:	1d1a      	adds	r2, r3, #4
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	9203      	str	r2, [sp, #12]
 800b694:	2b00      	cmp	r3, #0
 800b696:	bfb8      	it	lt
 800b698:	f04f 33ff 	movlt.w	r3, #4294967295
 800b69c:	3402      	adds	r4, #2
 800b69e:	9305      	str	r3, [sp, #20]
 800b6a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b76c <_svfiprintf_r+0x1fc>
 800b6a4:	7821      	ldrb	r1, [r4, #0]
 800b6a6:	2203      	movs	r2, #3
 800b6a8:	4650      	mov	r0, sl
 800b6aa:	f7f4 fda1 	bl	80001f0 <memchr>
 800b6ae:	b140      	cbz	r0, 800b6c2 <_svfiprintf_r+0x152>
 800b6b0:	2340      	movs	r3, #64	; 0x40
 800b6b2:	eba0 000a 	sub.w	r0, r0, sl
 800b6b6:	fa03 f000 	lsl.w	r0, r3, r0
 800b6ba:	9b04      	ldr	r3, [sp, #16]
 800b6bc:	4303      	orrs	r3, r0
 800b6be:	3401      	adds	r4, #1
 800b6c0:	9304      	str	r3, [sp, #16]
 800b6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c6:	4826      	ldr	r0, [pc, #152]	; (800b760 <_svfiprintf_r+0x1f0>)
 800b6c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6cc:	2206      	movs	r2, #6
 800b6ce:	f7f4 fd8f 	bl	80001f0 <memchr>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	d038      	beq.n	800b748 <_svfiprintf_r+0x1d8>
 800b6d6:	4b23      	ldr	r3, [pc, #140]	; (800b764 <_svfiprintf_r+0x1f4>)
 800b6d8:	bb1b      	cbnz	r3, 800b722 <_svfiprintf_r+0x1b2>
 800b6da:	9b03      	ldr	r3, [sp, #12]
 800b6dc:	3307      	adds	r3, #7
 800b6de:	f023 0307 	bic.w	r3, r3, #7
 800b6e2:	3308      	adds	r3, #8
 800b6e4:	9303      	str	r3, [sp, #12]
 800b6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6e8:	4433      	add	r3, r6
 800b6ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b6ec:	e767      	b.n	800b5be <_svfiprintf_r+0x4e>
 800b6ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	2001      	movs	r0, #1
 800b6f6:	e7a5      	b.n	800b644 <_svfiprintf_r+0xd4>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	3401      	adds	r4, #1
 800b6fc:	9305      	str	r3, [sp, #20]
 800b6fe:	4619      	mov	r1, r3
 800b700:	f04f 0c0a 	mov.w	ip, #10
 800b704:	4620      	mov	r0, r4
 800b706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b70a:	3a30      	subs	r2, #48	; 0x30
 800b70c:	2a09      	cmp	r2, #9
 800b70e:	d903      	bls.n	800b718 <_svfiprintf_r+0x1a8>
 800b710:	2b00      	cmp	r3, #0
 800b712:	d0c5      	beq.n	800b6a0 <_svfiprintf_r+0x130>
 800b714:	9105      	str	r1, [sp, #20]
 800b716:	e7c3      	b.n	800b6a0 <_svfiprintf_r+0x130>
 800b718:	fb0c 2101 	mla	r1, ip, r1, r2
 800b71c:	4604      	mov	r4, r0
 800b71e:	2301      	movs	r3, #1
 800b720:	e7f0      	b.n	800b704 <_svfiprintf_r+0x194>
 800b722:	ab03      	add	r3, sp, #12
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	462a      	mov	r2, r5
 800b728:	4b0f      	ldr	r3, [pc, #60]	; (800b768 <_svfiprintf_r+0x1f8>)
 800b72a:	a904      	add	r1, sp, #16
 800b72c:	4638      	mov	r0, r7
 800b72e:	f3af 8000 	nop.w
 800b732:	1c42      	adds	r2, r0, #1
 800b734:	4606      	mov	r6, r0
 800b736:	d1d6      	bne.n	800b6e6 <_svfiprintf_r+0x176>
 800b738:	89ab      	ldrh	r3, [r5, #12]
 800b73a:	065b      	lsls	r3, r3, #25
 800b73c:	f53f af2c 	bmi.w	800b598 <_svfiprintf_r+0x28>
 800b740:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b742:	b01d      	add	sp, #116	; 0x74
 800b744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b748:	ab03      	add	r3, sp, #12
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	462a      	mov	r2, r5
 800b74e:	4b06      	ldr	r3, [pc, #24]	; (800b768 <_svfiprintf_r+0x1f8>)
 800b750:	a904      	add	r1, sp, #16
 800b752:	4638      	mov	r0, r7
 800b754:	f000 f87a 	bl	800b84c <_printf_i>
 800b758:	e7eb      	b.n	800b732 <_svfiprintf_r+0x1c2>
 800b75a:	bf00      	nop
 800b75c:	0800d2a4 	.word	0x0800d2a4
 800b760:	0800d2ae 	.word	0x0800d2ae
 800b764:	00000000 	.word	0x00000000
 800b768:	0800b4b9 	.word	0x0800b4b9
 800b76c:	0800d2aa 	.word	0x0800d2aa

0800b770 <_printf_common>:
 800b770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b774:	4616      	mov	r6, r2
 800b776:	4699      	mov	r9, r3
 800b778:	688a      	ldr	r2, [r1, #8]
 800b77a:	690b      	ldr	r3, [r1, #16]
 800b77c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b780:	4293      	cmp	r3, r2
 800b782:	bfb8      	it	lt
 800b784:	4613      	movlt	r3, r2
 800b786:	6033      	str	r3, [r6, #0]
 800b788:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b78c:	4607      	mov	r7, r0
 800b78e:	460c      	mov	r4, r1
 800b790:	b10a      	cbz	r2, 800b796 <_printf_common+0x26>
 800b792:	3301      	adds	r3, #1
 800b794:	6033      	str	r3, [r6, #0]
 800b796:	6823      	ldr	r3, [r4, #0]
 800b798:	0699      	lsls	r1, r3, #26
 800b79a:	bf42      	ittt	mi
 800b79c:	6833      	ldrmi	r3, [r6, #0]
 800b79e:	3302      	addmi	r3, #2
 800b7a0:	6033      	strmi	r3, [r6, #0]
 800b7a2:	6825      	ldr	r5, [r4, #0]
 800b7a4:	f015 0506 	ands.w	r5, r5, #6
 800b7a8:	d106      	bne.n	800b7b8 <_printf_common+0x48>
 800b7aa:	f104 0a19 	add.w	sl, r4, #25
 800b7ae:	68e3      	ldr	r3, [r4, #12]
 800b7b0:	6832      	ldr	r2, [r6, #0]
 800b7b2:	1a9b      	subs	r3, r3, r2
 800b7b4:	42ab      	cmp	r3, r5
 800b7b6:	dc26      	bgt.n	800b806 <_printf_common+0x96>
 800b7b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7bc:	1e13      	subs	r3, r2, #0
 800b7be:	6822      	ldr	r2, [r4, #0]
 800b7c0:	bf18      	it	ne
 800b7c2:	2301      	movne	r3, #1
 800b7c4:	0692      	lsls	r2, r2, #26
 800b7c6:	d42b      	bmi.n	800b820 <_printf_common+0xb0>
 800b7c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7cc:	4649      	mov	r1, r9
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	47c0      	blx	r8
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	d01e      	beq.n	800b814 <_printf_common+0xa4>
 800b7d6:	6823      	ldr	r3, [r4, #0]
 800b7d8:	68e5      	ldr	r5, [r4, #12]
 800b7da:	6832      	ldr	r2, [r6, #0]
 800b7dc:	f003 0306 	and.w	r3, r3, #6
 800b7e0:	2b04      	cmp	r3, #4
 800b7e2:	bf08      	it	eq
 800b7e4:	1aad      	subeq	r5, r5, r2
 800b7e6:	68a3      	ldr	r3, [r4, #8]
 800b7e8:	6922      	ldr	r2, [r4, #16]
 800b7ea:	bf0c      	ite	eq
 800b7ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7f0:	2500      	movne	r5, #0
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	bfc4      	itt	gt
 800b7f6:	1a9b      	subgt	r3, r3, r2
 800b7f8:	18ed      	addgt	r5, r5, r3
 800b7fa:	2600      	movs	r6, #0
 800b7fc:	341a      	adds	r4, #26
 800b7fe:	42b5      	cmp	r5, r6
 800b800:	d11a      	bne.n	800b838 <_printf_common+0xc8>
 800b802:	2000      	movs	r0, #0
 800b804:	e008      	b.n	800b818 <_printf_common+0xa8>
 800b806:	2301      	movs	r3, #1
 800b808:	4652      	mov	r2, sl
 800b80a:	4649      	mov	r1, r9
 800b80c:	4638      	mov	r0, r7
 800b80e:	47c0      	blx	r8
 800b810:	3001      	adds	r0, #1
 800b812:	d103      	bne.n	800b81c <_printf_common+0xac>
 800b814:	f04f 30ff 	mov.w	r0, #4294967295
 800b818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b81c:	3501      	adds	r5, #1
 800b81e:	e7c6      	b.n	800b7ae <_printf_common+0x3e>
 800b820:	18e1      	adds	r1, r4, r3
 800b822:	1c5a      	adds	r2, r3, #1
 800b824:	2030      	movs	r0, #48	; 0x30
 800b826:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b82a:	4422      	add	r2, r4
 800b82c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b830:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b834:	3302      	adds	r3, #2
 800b836:	e7c7      	b.n	800b7c8 <_printf_common+0x58>
 800b838:	2301      	movs	r3, #1
 800b83a:	4622      	mov	r2, r4
 800b83c:	4649      	mov	r1, r9
 800b83e:	4638      	mov	r0, r7
 800b840:	47c0      	blx	r8
 800b842:	3001      	adds	r0, #1
 800b844:	d0e6      	beq.n	800b814 <_printf_common+0xa4>
 800b846:	3601      	adds	r6, #1
 800b848:	e7d9      	b.n	800b7fe <_printf_common+0x8e>
	...

0800b84c <_printf_i>:
 800b84c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b850:	460c      	mov	r4, r1
 800b852:	4691      	mov	r9, r2
 800b854:	7e27      	ldrb	r7, [r4, #24]
 800b856:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b858:	2f78      	cmp	r7, #120	; 0x78
 800b85a:	4680      	mov	r8, r0
 800b85c:	469a      	mov	sl, r3
 800b85e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b862:	d807      	bhi.n	800b874 <_printf_i+0x28>
 800b864:	2f62      	cmp	r7, #98	; 0x62
 800b866:	d80a      	bhi.n	800b87e <_printf_i+0x32>
 800b868:	2f00      	cmp	r7, #0
 800b86a:	f000 80d8 	beq.w	800ba1e <_printf_i+0x1d2>
 800b86e:	2f58      	cmp	r7, #88	; 0x58
 800b870:	f000 80a3 	beq.w	800b9ba <_printf_i+0x16e>
 800b874:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b878:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b87c:	e03a      	b.n	800b8f4 <_printf_i+0xa8>
 800b87e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b882:	2b15      	cmp	r3, #21
 800b884:	d8f6      	bhi.n	800b874 <_printf_i+0x28>
 800b886:	a001      	add	r0, pc, #4	; (adr r0, 800b88c <_printf_i+0x40>)
 800b888:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b88c:	0800b8e5 	.word	0x0800b8e5
 800b890:	0800b8f9 	.word	0x0800b8f9
 800b894:	0800b875 	.word	0x0800b875
 800b898:	0800b875 	.word	0x0800b875
 800b89c:	0800b875 	.word	0x0800b875
 800b8a0:	0800b875 	.word	0x0800b875
 800b8a4:	0800b8f9 	.word	0x0800b8f9
 800b8a8:	0800b875 	.word	0x0800b875
 800b8ac:	0800b875 	.word	0x0800b875
 800b8b0:	0800b875 	.word	0x0800b875
 800b8b4:	0800b875 	.word	0x0800b875
 800b8b8:	0800ba05 	.word	0x0800ba05
 800b8bc:	0800b929 	.word	0x0800b929
 800b8c0:	0800b9e7 	.word	0x0800b9e7
 800b8c4:	0800b875 	.word	0x0800b875
 800b8c8:	0800b875 	.word	0x0800b875
 800b8cc:	0800ba27 	.word	0x0800ba27
 800b8d0:	0800b875 	.word	0x0800b875
 800b8d4:	0800b929 	.word	0x0800b929
 800b8d8:	0800b875 	.word	0x0800b875
 800b8dc:	0800b875 	.word	0x0800b875
 800b8e0:	0800b9ef 	.word	0x0800b9ef
 800b8e4:	680b      	ldr	r3, [r1, #0]
 800b8e6:	1d1a      	adds	r2, r3, #4
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	600a      	str	r2, [r1, #0]
 800b8ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b8f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e0a3      	b.n	800ba40 <_printf_i+0x1f4>
 800b8f8:	6825      	ldr	r5, [r4, #0]
 800b8fa:	6808      	ldr	r0, [r1, #0]
 800b8fc:	062e      	lsls	r6, r5, #24
 800b8fe:	f100 0304 	add.w	r3, r0, #4
 800b902:	d50a      	bpl.n	800b91a <_printf_i+0xce>
 800b904:	6805      	ldr	r5, [r0, #0]
 800b906:	600b      	str	r3, [r1, #0]
 800b908:	2d00      	cmp	r5, #0
 800b90a:	da03      	bge.n	800b914 <_printf_i+0xc8>
 800b90c:	232d      	movs	r3, #45	; 0x2d
 800b90e:	426d      	negs	r5, r5
 800b910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b914:	485e      	ldr	r0, [pc, #376]	; (800ba90 <_printf_i+0x244>)
 800b916:	230a      	movs	r3, #10
 800b918:	e019      	b.n	800b94e <_printf_i+0x102>
 800b91a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b91e:	6805      	ldr	r5, [r0, #0]
 800b920:	600b      	str	r3, [r1, #0]
 800b922:	bf18      	it	ne
 800b924:	b22d      	sxthne	r5, r5
 800b926:	e7ef      	b.n	800b908 <_printf_i+0xbc>
 800b928:	680b      	ldr	r3, [r1, #0]
 800b92a:	6825      	ldr	r5, [r4, #0]
 800b92c:	1d18      	adds	r0, r3, #4
 800b92e:	6008      	str	r0, [r1, #0]
 800b930:	0628      	lsls	r0, r5, #24
 800b932:	d501      	bpl.n	800b938 <_printf_i+0xec>
 800b934:	681d      	ldr	r5, [r3, #0]
 800b936:	e002      	b.n	800b93e <_printf_i+0xf2>
 800b938:	0669      	lsls	r1, r5, #25
 800b93a:	d5fb      	bpl.n	800b934 <_printf_i+0xe8>
 800b93c:	881d      	ldrh	r5, [r3, #0]
 800b93e:	4854      	ldr	r0, [pc, #336]	; (800ba90 <_printf_i+0x244>)
 800b940:	2f6f      	cmp	r7, #111	; 0x6f
 800b942:	bf0c      	ite	eq
 800b944:	2308      	moveq	r3, #8
 800b946:	230a      	movne	r3, #10
 800b948:	2100      	movs	r1, #0
 800b94a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b94e:	6866      	ldr	r6, [r4, #4]
 800b950:	60a6      	str	r6, [r4, #8]
 800b952:	2e00      	cmp	r6, #0
 800b954:	bfa2      	ittt	ge
 800b956:	6821      	ldrge	r1, [r4, #0]
 800b958:	f021 0104 	bicge.w	r1, r1, #4
 800b95c:	6021      	strge	r1, [r4, #0]
 800b95e:	b90d      	cbnz	r5, 800b964 <_printf_i+0x118>
 800b960:	2e00      	cmp	r6, #0
 800b962:	d04d      	beq.n	800ba00 <_printf_i+0x1b4>
 800b964:	4616      	mov	r6, r2
 800b966:	fbb5 f1f3 	udiv	r1, r5, r3
 800b96a:	fb03 5711 	mls	r7, r3, r1, r5
 800b96e:	5dc7      	ldrb	r7, [r0, r7]
 800b970:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b974:	462f      	mov	r7, r5
 800b976:	42bb      	cmp	r3, r7
 800b978:	460d      	mov	r5, r1
 800b97a:	d9f4      	bls.n	800b966 <_printf_i+0x11a>
 800b97c:	2b08      	cmp	r3, #8
 800b97e:	d10b      	bne.n	800b998 <_printf_i+0x14c>
 800b980:	6823      	ldr	r3, [r4, #0]
 800b982:	07df      	lsls	r7, r3, #31
 800b984:	d508      	bpl.n	800b998 <_printf_i+0x14c>
 800b986:	6923      	ldr	r3, [r4, #16]
 800b988:	6861      	ldr	r1, [r4, #4]
 800b98a:	4299      	cmp	r1, r3
 800b98c:	bfde      	ittt	le
 800b98e:	2330      	movle	r3, #48	; 0x30
 800b990:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b994:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b998:	1b92      	subs	r2, r2, r6
 800b99a:	6122      	str	r2, [r4, #16]
 800b99c:	f8cd a000 	str.w	sl, [sp]
 800b9a0:	464b      	mov	r3, r9
 800b9a2:	aa03      	add	r2, sp, #12
 800b9a4:	4621      	mov	r1, r4
 800b9a6:	4640      	mov	r0, r8
 800b9a8:	f7ff fee2 	bl	800b770 <_printf_common>
 800b9ac:	3001      	adds	r0, #1
 800b9ae:	d14c      	bne.n	800ba4a <_printf_i+0x1fe>
 800b9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b4:	b004      	add	sp, #16
 800b9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ba:	4835      	ldr	r0, [pc, #212]	; (800ba90 <_printf_i+0x244>)
 800b9bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b9c0:	6823      	ldr	r3, [r4, #0]
 800b9c2:	680e      	ldr	r6, [r1, #0]
 800b9c4:	061f      	lsls	r7, r3, #24
 800b9c6:	f856 5b04 	ldr.w	r5, [r6], #4
 800b9ca:	600e      	str	r6, [r1, #0]
 800b9cc:	d514      	bpl.n	800b9f8 <_printf_i+0x1ac>
 800b9ce:	07d9      	lsls	r1, r3, #31
 800b9d0:	bf44      	itt	mi
 800b9d2:	f043 0320 	orrmi.w	r3, r3, #32
 800b9d6:	6023      	strmi	r3, [r4, #0]
 800b9d8:	b91d      	cbnz	r5, 800b9e2 <_printf_i+0x196>
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	f023 0320 	bic.w	r3, r3, #32
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	2310      	movs	r3, #16
 800b9e4:	e7b0      	b.n	800b948 <_printf_i+0xfc>
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	f043 0320 	orr.w	r3, r3, #32
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	2378      	movs	r3, #120	; 0x78
 800b9f0:	4828      	ldr	r0, [pc, #160]	; (800ba94 <_printf_i+0x248>)
 800b9f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9f6:	e7e3      	b.n	800b9c0 <_printf_i+0x174>
 800b9f8:	065e      	lsls	r6, r3, #25
 800b9fa:	bf48      	it	mi
 800b9fc:	b2ad      	uxthmi	r5, r5
 800b9fe:	e7e6      	b.n	800b9ce <_printf_i+0x182>
 800ba00:	4616      	mov	r6, r2
 800ba02:	e7bb      	b.n	800b97c <_printf_i+0x130>
 800ba04:	680b      	ldr	r3, [r1, #0]
 800ba06:	6826      	ldr	r6, [r4, #0]
 800ba08:	6960      	ldr	r0, [r4, #20]
 800ba0a:	1d1d      	adds	r5, r3, #4
 800ba0c:	600d      	str	r5, [r1, #0]
 800ba0e:	0635      	lsls	r5, r6, #24
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	d501      	bpl.n	800ba18 <_printf_i+0x1cc>
 800ba14:	6018      	str	r0, [r3, #0]
 800ba16:	e002      	b.n	800ba1e <_printf_i+0x1d2>
 800ba18:	0671      	lsls	r1, r6, #25
 800ba1a:	d5fb      	bpl.n	800ba14 <_printf_i+0x1c8>
 800ba1c:	8018      	strh	r0, [r3, #0]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	6123      	str	r3, [r4, #16]
 800ba22:	4616      	mov	r6, r2
 800ba24:	e7ba      	b.n	800b99c <_printf_i+0x150>
 800ba26:	680b      	ldr	r3, [r1, #0]
 800ba28:	1d1a      	adds	r2, r3, #4
 800ba2a:	600a      	str	r2, [r1, #0]
 800ba2c:	681e      	ldr	r6, [r3, #0]
 800ba2e:	6862      	ldr	r2, [r4, #4]
 800ba30:	2100      	movs	r1, #0
 800ba32:	4630      	mov	r0, r6
 800ba34:	f7f4 fbdc 	bl	80001f0 <memchr>
 800ba38:	b108      	cbz	r0, 800ba3e <_printf_i+0x1f2>
 800ba3a:	1b80      	subs	r0, r0, r6
 800ba3c:	6060      	str	r0, [r4, #4]
 800ba3e:	6863      	ldr	r3, [r4, #4]
 800ba40:	6123      	str	r3, [r4, #16]
 800ba42:	2300      	movs	r3, #0
 800ba44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba48:	e7a8      	b.n	800b99c <_printf_i+0x150>
 800ba4a:	6923      	ldr	r3, [r4, #16]
 800ba4c:	4632      	mov	r2, r6
 800ba4e:	4649      	mov	r1, r9
 800ba50:	4640      	mov	r0, r8
 800ba52:	47d0      	blx	sl
 800ba54:	3001      	adds	r0, #1
 800ba56:	d0ab      	beq.n	800b9b0 <_printf_i+0x164>
 800ba58:	6823      	ldr	r3, [r4, #0]
 800ba5a:	079b      	lsls	r3, r3, #30
 800ba5c:	d413      	bmi.n	800ba86 <_printf_i+0x23a>
 800ba5e:	68e0      	ldr	r0, [r4, #12]
 800ba60:	9b03      	ldr	r3, [sp, #12]
 800ba62:	4298      	cmp	r0, r3
 800ba64:	bfb8      	it	lt
 800ba66:	4618      	movlt	r0, r3
 800ba68:	e7a4      	b.n	800b9b4 <_printf_i+0x168>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	4632      	mov	r2, r6
 800ba6e:	4649      	mov	r1, r9
 800ba70:	4640      	mov	r0, r8
 800ba72:	47d0      	blx	sl
 800ba74:	3001      	adds	r0, #1
 800ba76:	d09b      	beq.n	800b9b0 <_printf_i+0x164>
 800ba78:	3501      	adds	r5, #1
 800ba7a:	68e3      	ldr	r3, [r4, #12]
 800ba7c:	9903      	ldr	r1, [sp, #12]
 800ba7e:	1a5b      	subs	r3, r3, r1
 800ba80:	42ab      	cmp	r3, r5
 800ba82:	dcf2      	bgt.n	800ba6a <_printf_i+0x21e>
 800ba84:	e7eb      	b.n	800ba5e <_printf_i+0x212>
 800ba86:	2500      	movs	r5, #0
 800ba88:	f104 0619 	add.w	r6, r4, #25
 800ba8c:	e7f5      	b.n	800ba7a <_printf_i+0x22e>
 800ba8e:	bf00      	nop
 800ba90:	0800d2b5 	.word	0x0800d2b5
 800ba94:	0800d2c6 	.word	0x0800d2c6

0800ba98 <memmove>:
 800ba98:	4288      	cmp	r0, r1
 800ba9a:	b510      	push	{r4, lr}
 800ba9c:	eb01 0402 	add.w	r4, r1, r2
 800baa0:	d902      	bls.n	800baa8 <memmove+0x10>
 800baa2:	4284      	cmp	r4, r0
 800baa4:	4623      	mov	r3, r4
 800baa6:	d807      	bhi.n	800bab8 <memmove+0x20>
 800baa8:	1e43      	subs	r3, r0, #1
 800baaa:	42a1      	cmp	r1, r4
 800baac:	d008      	beq.n	800bac0 <memmove+0x28>
 800baae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bab6:	e7f8      	b.n	800baaa <memmove+0x12>
 800bab8:	4402      	add	r2, r0
 800baba:	4601      	mov	r1, r0
 800babc:	428a      	cmp	r2, r1
 800babe:	d100      	bne.n	800bac2 <memmove+0x2a>
 800bac0:	bd10      	pop	{r4, pc}
 800bac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800baca:	e7f7      	b.n	800babc <memmove+0x24>

0800bacc <_free_r>:
 800bacc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bace:	2900      	cmp	r1, #0
 800bad0:	d048      	beq.n	800bb64 <_free_r+0x98>
 800bad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bad6:	9001      	str	r0, [sp, #4]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f1a1 0404 	sub.w	r4, r1, #4
 800bade:	bfb8      	it	lt
 800bae0:	18e4      	addlt	r4, r4, r3
 800bae2:	f000 f8d3 	bl	800bc8c <__malloc_lock>
 800bae6:	4a20      	ldr	r2, [pc, #128]	; (800bb68 <_free_r+0x9c>)
 800bae8:	9801      	ldr	r0, [sp, #4]
 800baea:	6813      	ldr	r3, [r2, #0]
 800baec:	4615      	mov	r5, r2
 800baee:	b933      	cbnz	r3, 800bafe <_free_r+0x32>
 800baf0:	6063      	str	r3, [r4, #4]
 800baf2:	6014      	str	r4, [r2, #0]
 800baf4:	b003      	add	sp, #12
 800baf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bafa:	f000 b8cd 	b.w	800bc98 <__malloc_unlock>
 800bafe:	42a3      	cmp	r3, r4
 800bb00:	d90b      	bls.n	800bb1a <_free_r+0x4e>
 800bb02:	6821      	ldr	r1, [r4, #0]
 800bb04:	1862      	adds	r2, r4, r1
 800bb06:	4293      	cmp	r3, r2
 800bb08:	bf04      	itt	eq
 800bb0a:	681a      	ldreq	r2, [r3, #0]
 800bb0c:	685b      	ldreq	r3, [r3, #4]
 800bb0e:	6063      	str	r3, [r4, #4]
 800bb10:	bf04      	itt	eq
 800bb12:	1852      	addeq	r2, r2, r1
 800bb14:	6022      	streq	r2, [r4, #0]
 800bb16:	602c      	str	r4, [r5, #0]
 800bb18:	e7ec      	b.n	800baf4 <_free_r+0x28>
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	b10b      	cbz	r3, 800bb24 <_free_r+0x58>
 800bb20:	42a3      	cmp	r3, r4
 800bb22:	d9fa      	bls.n	800bb1a <_free_r+0x4e>
 800bb24:	6811      	ldr	r1, [r2, #0]
 800bb26:	1855      	adds	r5, r2, r1
 800bb28:	42a5      	cmp	r5, r4
 800bb2a:	d10b      	bne.n	800bb44 <_free_r+0x78>
 800bb2c:	6824      	ldr	r4, [r4, #0]
 800bb2e:	4421      	add	r1, r4
 800bb30:	1854      	adds	r4, r2, r1
 800bb32:	42a3      	cmp	r3, r4
 800bb34:	6011      	str	r1, [r2, #0]
 800bb36:	d1dd      	bne.n	800baf4 <_free_r+0x28>
 800bb38:	681c      	ldr	r4, [r3, #0]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	6053      	str	r3, [r2, #4]
 800bb3e:	4421      	add	r1, r4
 800bb40:	6011      	str	r1, [r2, #0]
 800bb42:	e7d7      	b.n	800baf4 <_free_r+0x28>
 800bb44:	d902      	bls.n	800bb4c <_free_r+0x80>
 800bb46:	230c      	movs	r3, #12
 800bb48:	6003      	str	r3, [r0, #0]
 800bb4a:	e7d3      	b.n	800baf4 <_free_r+0x28>
 800bb4c:	6825      	ldr	r5, [r4, #0]
 800bb4e:	1961      	adds	r1, r4, r5
 800bb50:	428b      	cmp	r3, r1
 800bb52:	bf04      	itt	eq
 800bb54:	6819      	ldreq	r1, [r3, #0]
 800bb56:	685b      	ldreq	r3, [r3, #4]
 800bb58:	6063      	str	r3, [r4, #4]
 800bb5a:	bf04      	itt	eq
 800bb5c:	1949      	addeq	r1, r1, r5
 800bb5e:	6021      	streq	r1, [r4, #0]
 800bb60:	6054      	str	r4, [r2, #4]
 800bb62:	e7c7      	b.n	800baf4 <_free_r+0x28>
 800bb64:	b003      	add	sp, #12
 800bb66:	bd30      	pop	{r4, r5, pc}
 800bb68:	200004ec 	.word	0x200004ec

0800bb6c <_malloc_r>:
 800bb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6e:	1ccd      	adds	r5, r1, #3
 800bb70:	f025 0503 	bic.w	r5, r5, #3
 800bb74:	3508      	adds	r5, #8
 800bb76:	2d0c      	cmp	r5, #12
 800bb78:	bf38      	it	cc
 800bb7a:	250c      	movcc	r5, #12
 800bb7c:	2d00      	cmp	r5, #0
 800bb7e:	4606      	mov	r6, r0
 800bb80:	db01      	blt.n	800bb86 <_malloc_r+0x1a>
 800bb82:	42a9      	cmp	r1, r5
 800bb84:	d903      	bls.n	800bb8e <_malloc_r+0x22>
 800bb86:	230c      	movs	r3, #12
 800bb88:	6033      	str	r3, [r6, #0]
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb8e:	f000 f87d 	bl	800bc8c <__malloc_lock>
 800bb92:	4921      	ldr	r1, [pc, #132]	; (800bc18 <_malloc_r+0xac>)
 800bb94:	680a      	ldr	r2, [r1, #0]
 800bb96:	4614      	mov	r4, r2
 800bb98:	b99c      	cbnz	r4, 800bbc2 <_malloc_r+0x56>
 800bb9a:	4f20      	ldr	r7, [pc, #128]	; (800bc1c <_malloc_r+0xb0>)
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	b923      	cbnz	r3, 800bbaa <_malloc_r+0x3e>
 800bba0:	4621      	mov	r1, r4
 800bba2:	4630      	mov	r0, r6
 800bba4:	f000 f862 	bl	800bc6c <_sbrk_r>
 800bba8:	6038      	str	r0, [r7, #0]
 800bbaa:	4629      	mov	r1, r5
 800bbac:	4630      	mov	r0, r6
 800bbae:	f000 f85d 	bl	800bc6c <_sbrk_r>
 800bbb2:	1c43      	adds	r3, r0, #1
 800bbb4:	d123      	bne.n	800bbfe <_malloc_r+0x92>
 800bbb6:	230c      	movs	r3, #12
 800bbb8:	6033      	str	r3, [r6, #0]
 800bbba:	4630      	mov	r0, r6
 800bbbc:	f000 f86c 	bl	800bc98 <__malloc_unlock>
 800bbc0:	e7e3      	b.n	800bb8a <_malloc_r+0x1e>
 800bbc2:	6823      	ldr	r3, [r4, #0]
 800bbc4:	1b5b      	subs	r3, r3, r5
 800bbc6:	d417      	bmi.n	800bbf8 <_malloc_r+0x8c>
 800bbc8:	2b0b      	cmp	r3, #11
 800bbca:	d903      	bls.n	800bbd4 <_malloc_r+0x68>
 800bbcc:	6023      	str	r3, [r4, #0]
 800bbce:	441c      	add	r4, r3
 800bbd0:	6025      	str	r5, [r4, #0]
 800bbd2:	e004      	b.n	800bbde <_malloc_r+0x72>
 800bbd4:	6863      	ldr	r3, [r4, #4]
 800bbd6:	42a2      	cmp	r2, r4
 800bbd8:	bf0c      	ite	eq
 800bbda:	600b      	streq	r3, [r1, #0]
 800bbdc:	6053      	strne	r3, [r2, #4]
 800bbde:	4630      	mov	r0, r6
 800bbe0:	f000 f85a 	bl	800bc98 <__malloc_unlock>
 800bbe4:	f104 000b 	add.w	r0, r4, #11
 800bbe8:	1d23      	adds	r3, r4, #4
 800bbea:	f020 0007 	bic.w	r0, r0, #7
 800bbee:	1ac2      	subs	r2, r0, r3
 800bbf0:	d0cc      	beq.n	800bb8c <_malloc_r+0x20>
 800bbf2:	1a1b      	subs	r3, r3, r0
 800bbf4:	50a3      	str	r3, [r4, r2]
 800bbf6:	e7c9      	b.n	800bb8c <_malloc_r+0x20>
 800bbf8:	4622      	mov	r2, r4
 800bbfa:	6864      	ldr	r4, [r4, #4]
 800bbfc:	e7cc      	b.n	800bb98 <_malloc_r+0x2c>
 800bbfe:	1cc4      	adds	r4, r0, #3
 800bc00:	f024 0403 	bic.w	r4, r4, #3
 800bc04:	42a0      	cmp	r0, r4
 800bc06:	d0e3      	beq.n	800bbd0 <_malloc_r+0x64>
 800bc08:	1a21      	subs	r1, r4, r0
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	f000 f82e 	bl	800bc6c <_sbrk_r>
 800bc10:	3001      	adds	r0, #1
 800bc12:	d1dd      	bne.n	800bbd0 <_malloc_r+0x64>
 800bc14:	e7cf      	b.n	800bbb6 <_malloc_r+0x4a>
 800bc16:	bf00      	nop
 800bc18:	200004ec 	.word	0x200004ec
 800bc1c:	200004f0 	.word	0x200004f0

0800bc20 <_realloc_r>:
 800bc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc22:	4607      	mov	r7, r0
 800bc24:	4614      	mov	r4, r2
 800bc26:	460e      	mov	r6, r1
 800bc28:	b921      	cbnz	r1, 800bc34 <_realloc_r+0x14>
 800bc2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc2e:	4611      	mov	r1, r2
 800bc30:	f7ff bf9c 	b.w	800bb6c <_malloc_r>
 800bc34:	b922      	cbnz	r2, 800bc40 <_realloc_r+0x20>
 800bc36:	f7ff ff49 	bl	800bacc <_free_r>
 800bc3a:	4625      	mov	r5, r4
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc40:	f000 f830 	bl	800bca4 <_malloc_usable_size_r>
 800bc44:	42a0      	cmp	r0, r4
 800bc46:	d20f      	bcs.n	800bc68 <_realloc_r+0x48>
 800bc48:	4621      	mov	r1, r4
 800bc4a:	4638      	mov	r0, r7
 800bc4c:	f7ff ff8e 	bl	800bb6c <_malloc_r>
 800bc50:	4605      	mov	r5, r0
 800bc52:	2800      	cmp	r0, #0
 800bc54:	d0f2      	beq.n	800bc3c <_realloc_r+0x1c>
 800bc56:	4631      	mov	r1, r6
 800bc58:	4622      	mov	r2, r4
 800bc5a:	f7ff fbef 	bl	800b43c <memcpy>
 800bc5e:	4631      	mov	r1, r6
 800bc60:	4638      	mov	r0, r7
 800bc62:	f7ff ff33 	bl	800bacc <_free_r>
 800bc66:	e7e9      	b.n	800bc3c <_realloc_r+0x1c>
 800bc68:	4635      	mov	r5, r6
 800bc6a:	e7e7      	b.n	800bc3c <_realloc_r+0x1c>

0800bc6c <_sbrk_r>:
 800bc6c:	b538      	push	{r3, r4, r5, lr}
 800bc6e:	4d06      	ldr	r5, [pc, #24]	; (800bc88 <_sbrk_r+0x1c>)
 800bc70:	2300      	movs	r3, #0
 800bc72:	4604      	mov	r4, r0
 800bc74:	4608      	mov	r0, r1
 800bc76:	602b      	str	r3, [r5, #0]
 800bc78:	f7f5 ff5c 	bl	8001b34 <_sbrk>
 800bc7c:	1c43      	adds	r3, r0, #1
 800bc7e:	d102      	bne.n	800bc86 <_sbrk_r+0x1a>
 800bc80:	682b      	ldr	r3, [r5, #0]
 800bc82:	b103      	cbz	r3, 800bc86 <_sbrk_r+0x1a>
 800bc84:	6023      	str	r3, [r4, #0]
 800bc86:	bd38      	pop	{r3, r4, r5, pc}
 800bc88:	200007b0 	.word	0x200007b0

0800bc8c <__malloc_lock>:
 800bc8c:	4801      	ldr	r0, [pc, #4]	; (800bc94 <__malloc_lock+0x8>)
 800bc8e:	f000 b811 	b.w	800bcb4 <__retarget_lock_acquire_recursive>
 800bc92:	bf00      	nop
 800bc94:	200007b8 	.word	0x200007b8

0800bc98 <__malloc_unlock>:
 800bc98:	4801      	ldr	r0, [pc, #4]	; (800bca0 <__malloc_unlock+0x8>)
 800bc9a:	f000 b80c 	b.w	800bcb6 <__retarget_lock_release_recursive>
 800bc9e:	bf00      	nop
 800bca0:	200007b8 	.word	0x200007b8

0800bca4 <_malloc_usable_size_r>:
 800bca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bca8:	1f18      	subs	r0, r3, #4
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	bfbc      	itt	lt
 800bcae:	580b      	ldrlt	r3, [r1, r0]
 800bcb0:	18c0      	addlt	r0, r0, r3
 800bcb2:	4770      	bx	lr

0800bcb4 <__retarget_lock_acquire_recursive>:
 800bcb4:	4770      	bx	lr

0800bcb6 <__retarget_lock_release_recursive>:
 800bcb6:	4770      	bx	lr

0800bcb8 <floor>:
 800bcb8:	ec51 0b10 	vmov	r0, r1, d0
 800bcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bcc4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bcc8:	2e13      	cmp	r6, #19
 800bcca:	ee10 5a10 	vmov	r5, s0
 800bcce:	ee10 8a10 	vmov	r8, s0
 800bcd2:	460c      	mov	r4, r1
 800bcd4:	dc32      	bgt.n	800bd3c <floor+0x84>
 800bcd6:	2e00      	cmp	r6, #0
 800bcd8:	da14      	bge.n	800bd04 <floor+0x4c>
 800bcda:	a333      	add	r3, pc, #204	; (adr r3, 800bda8 <floor+0xf0>)
 800bcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce0:	f7f4 fadc 	bl	800029c <__adddf3>
 800bce4:	2200      	movs	r2, #0
 800bce6:	2300      	movs	r3, #0
 800bce8:	f7f4 ff1e 	bl	8000b28 <__aeabi_dcmpgt>
 800bcec:	b138      	cbz	r0, 800bcfe <floor+0x46>
 800bcee:	2c00      	cmp	r4, #0
 800bcf0:	da57      	bge.n	800bda2 <floor+0xea>
 800bcf2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bcf6:	431d      	orrs	r5, r3
 800bcf8:	d001      	beq.n	800bcfe <floor+0x46>
 800bcfa:	4c2d      	ldr	r4, [pc, #180]	; (800bdb0 <floor+0xf8>)
 800bcfc:	2500      	movs	r5, #0
 800bcfe:	4621      	mov	r1, r4
 800bd00:	4628      	mov	r0, r5
 800bd02:	e025      	b.n	800bd50 <floor+0x98>
 800bd04:	4f2b      	ldr	r7, [pc, #172]	; (800bdb4 <floor+0xfc>)
 800bd06:	4137      	asrs	r7, r6
 800bd08:	ea01 0307 	and.w	r3, r1, r7
 800bd0c:	4303      	orrs	r3, r0
 800bd0e:	d01f      	beq.n	800bd50 <floor+0x98>
 800bd10:	a325      	add	r3, pc, #148	; (adr r3, 800bda8 <floor+0xf0>)
 800bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd16:	f7f4 fac1 	bl	800029c <__adddf3>
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	f7f4 ff03 	bl	8000b28 <__aeabi_dcmpgt>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d0eb      	beq.n	800bcfe <floor+0x46>
 800bd26:	2c00      	cmp	r4, #0
 800bd28:	bfbe      	ittt	lt
 800bd2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bd2e:	fa43 f606 	asrlt.w	r6, r3, r6
 800bd32:	19a4      	addlt	r4, r4, r6
 800bd34:	ea24 0407 	bic.w	r4, r4, r7
 800bd38:	2500      	movs	r5, #0
 800bd3a:	e7e0      	b.n	800bcfe <floor+0x46>
 800bd3c:	2e33      	cmp	r6, #51	; 0x33
 800bd3e:	dd0b      	ble.n	800bd58 <floor+0xa0>
 800bd40:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bd44:	d104      	bne.n	800bd50 <floor+0x98>
 800bd46:	ee10 2a10 	vmov	r2, s0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	f7f4 faa6 	bl	800029c <__adddf3>
 800bd50:	ec41 0b10 	vmov	d0, r0, r1
 800bd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd58:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bd5c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd60:	fa23 f707 	lsr.w	r7, r3, r7
 800bd64:	4207      	tst	r7, r0
 800bd66:	d0f3      	beq.n	800bd50 <floor+0x98>
 800bd68:	a30f      	add	r3, pc, #60	; (adr r3, 800bda8 <floor+0xf0>)
 800bd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6e:	f7f4 fa95 	bl	800029c <__adddf3>
 800bd72:	2200      	movs	r2, #0
 800bd74:	2300      	movs	r3, #0
 800bd76:	f7f4 fed7 	bl	8000b28 <__aeabi_dcmpgt>
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	d0bf      	beq.n	800bcfe <floor+0x46>
 800bd7e:	2c00      	cmp	r4, #0
 800bd80:	da02      	bge.n	800bd88 <floor+0xd0>
 800bd82:	2e14      	cmp	r6, #20
 800bd84:	d103      	bne.n	800bd8e <floor+0xd6>
 800bd86:	3401      	adds	r4, #1
 800bd88:	ea25 0507 	bic.w	r5, r5, r7
 800bd8c:	e7b7      	b.n	800bcfe <floor+0x46>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bd94:	fa03 f606 	lsl.w	r6, r3, r6
 800bd98:	4435      	add	r5, r6
 800bd9a:	4545      	cmp	r5, r8
 800bd9c:	bf38      	it	cc
 800bd9e:	18e4      	addcc	r4, r4, r3
 800bda0:	e7f2      	b.n	800bd88 <floor+0xd0>
 800bda2:	2500      	movs	r5, #0
 800bda4:	462c      	mov	r4, r5
 800bda6:	e7aa      	b.n	800bcfe <floor+0x46>
 800bda8:	8800759c 	.word	0x8800759c
 800bdac:	7e37e43c 	.word	0x7e37e43c
 800bdb0:	bff00000 	.word	0xbff00000
 800bdb4:	000fffff 	.word	0x000fffff

0800bdb8 <log10>:
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	ed2d 8b02 	vpush	{d8}
 800bdbe:	ec55 4b10 	vmov	r4, r5, d0
 800bdc2:	f000 f8f1 	bl	800bfa8 <__ieee754_log10>
 800bdc6:	4b1e      	ldr	r3, [pc, #120]	; (800be40 <log10+0x88>)
 800bdc8:	eeb0 8a40 	vmov.f32	s16, s0
 800bdcc:	eef0 8a60 	vmov.f32	s17, s1
 800bdd0:	f993 3000 	ldrsb.w	r3, [r3]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	d01a      	beq.n	800be0e <log10+0x56>
 800bdd8:	4622      	mov	r2, r4
 800bdda:	462b      	mov	r3, r5
 800bddc:	4620      	mov	r0, r4
 800bdde:	4629      	mov	r1, r5
 800bde0:	f7f4 feac 	bl	8000b3c <__aeabi_dcmpun>
 800bde4:	b998      	cbnz	r0, 800be0e <log10+0x56>
 800bde6:	2200      	movs	r2, #0
 800bde8:	2300      	movs	r3, #0
 800bdea:	4620      	mov	r0, r4
 800bdec:	4629      	mov	r1, r5
 800bdee:	f7f4 fe87 	bl	8000b00 <__aeabi_dcmple>
 800bdf2:	b160      	cbz	r0, 800be0e <log10+0x56>
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	f7f4 fe6c 	bl	8000ad8 <__aeabi_dcmpeq>
 800be00:	b160      	cbz	r0, 800be1c <log10+0x64>
 800be02:	f7ff faf1 	bl	800b3e8 <__errno>
 800be06:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800be38 <log10+0x80>
 800be0a:	2322      	movs	r3, #34	; 0x22
 800be0c:	6003      	str	r3, [r0, #0]
 800be0e:	eeb0 0a48 	vmov.f32	s0, s16
 800be12:	eef0 0a68 	vmov.f32	s1, s17
 800be16:	ecbd 8b02 	vpop	{d8}
 800be1a:	bd38      	pop	{r3, r4, r5, pc}
 800be1c:	f7ff fae4 	bl	800b3e8 <__errno>
 800be20:	ecbd 8b02 	vpop	{d8}
 800be24:	2321      	movs	r3, #33	; 0x21
 800be26:	6003      	str	r3, [r0, #0]
 800be28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be2c:	4805      	ldr	r0, [pc, #20]	; (800be44 <log10+0x8c>)
 800be2e:	f000 bf33 	b.w	800cc98 <nan>
 800be32:	bf00      	nop
 800be34:	f3af 8000 	nop.w
 800be38:	00000000 	.word	0x00000000
 800be3c:	fff00000 	.word	0xfff00000
 800be40:	200004bc 	.word	0x200004bc
 800be44:	0800d2a9 	.word	0x0800d2a9

0800be48 <pow>:
 800be48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be4c:	ec59 8b10 	vmov	r8, r9, d0
 800be50:	ec57 6b11 	vmov	r6, r7, d1
 800be54:	f000 f934 	bl	800c0c0 <__ieee754_pow>
 800be58:	4b4e      	ldr	r3, [pc, #312]	; (800bf94 <pow+0x14c>)
 800be5a:	f993 3000 	ldrsb.w	r3, [r3]
 800be5e:	3301      	adds	r3, #1
 800be60:	ec55 4b10 	vmov	r4, r5, d0
 800be64:	d015      	beq.n	800be92 <pow+0x4a>
 800be66:	4632      	mov	r2, r6
 800be68:	463b      	mov	r3, r7
 800be6a:	4630      	mov	r0, r6
 800be6c:	4639      	mov	r1, r7
 800be6e:	f7f4 fe65 	bl	8000b3c <__aeabi_dcmpun>
 800be72:	b970      	cbnz	r0, 800be92 <pow+0x4a>
 800be74:	4642      	mov	r2, r8
 800be76:	464b      	mov	r3, r9
 800be78:	4640      	mov	r0, r8
 800be7a:	4649      	mov	r1, r9
 800be7c:	f7f4 fe5e 	bl	8000b3c <__aeabi_dcmpun>
 800be80:	2200      	movs	r2, #0
 800be82:	2300      	movs	r3, #0
 800be84:	b148      	cbz	r0, 800be9a <pow+0x52>
 800be86:	4630      	mov	r0, r6
 800be88:	4639      	mov	r1, r7
 800be8a:	f7f4 fe25 	bl	8000ad8 <__aeabi_dcmpeq>
 800be8e:	2800      	cmp	r0, #0
 800be90:	d17d      	bne.n	800bf8e <pow+0x146>
 800be92:	ec45 4b10 	vmov	d0, r4, r5
 800be96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be9a:	4640      	mov	r0, r8
 800be9c:	4649      	mov	r1, r9
 800be9e:	f7f4 fe1b 	bl	8000ad8 <__aeabi_dcmpeq>
 800bea2:	b1e0      	cbz	r0, 800bede <pow+0x96>
 800bea4:	2200      	movs	r2, #0
 800bea6:	2300      	movs	r3, #0
 800bea8:	4630      	mov	r0, r6
 800beaa:	4639      	mov	r1, r7
 800beac:	f7f4 fe14 	bl	8000ad8 <__aeabi_dcmpeq>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	d16c      	bne.n	800bf8e <pow+0x146>
 800beb4:	ec47 6b10 	vmov	d0, r6, r7
 800beb8:	f000 fee1 	bl	800cc7e <finite>
 800bebc:	2800      	cmp	r0, #0
 800bebe:	d0e8      	beq.n	800be92 <pow+0x4a>
 800bec0:	2200      	movs	r2, #0
 800bec2:	2300      	movs	r3, #0
 800bec4:	4630      	mov	r0, r6
 800bec6:	4639      	mov	r1, r7
 800bec8:	f7f4 fe10 	bl	8000aec <__aeabi_dcmplt>
 800becc:	2800      	cmp	r0, #0
 800bece:	d0e0      	beq.n	800be92 <pow+0x4a>
 800bed0:	f7ff fa8a 	bl	800b3e8 <__errno>
 800bed4:	2321      	movs	r3, #33	; 0x21
 800bed6:	6003      	str	r3, [r0, #0]
 800bed8:	2400      	movs	r4, #0
 800beda:	4d2f      	ldr	r5, [pc, #188]	; (800bf98 <pow+0x150>)
 800bedc:	e7d9      	b.n	800be92 <pow+0x4a>
 800bede:	ec45 4b10 	vmov	d0, r4, r5
 800bee2:	f000 fecc 	bl	800cc7e <finite>
 800bee6:	bbb8      	cbnz	r0, 800bf58 <pow+0x110>
 800bee8:	ec49 8b10 	vmov	d0, r8, r9
 800beec:	f000 fec7 	bl	800cc7e <finite>
 800bef0:	b390      	cbz	r0, 800bf58 <pow+0x110>
 800bef2:	ec47 6b10 	vmov	d0, r6, r7
 800bef6:	f000 fec2 	bl	800cc7e <finite>
 800befa:	b368      	cbz	r0, 800bf58 <pow+0x110>
 800befc:	4622      	mov	r2, r4
 800befe:	462b      	mov	r3, r5
 800bf00:	4620      	mov	r0, r4
 800bf02:	4629      	mov	r1, r5
 800bf04:	f7f4 fe1a 	bl	8000b3c <__aeabi_dcmpun>
 800bf08:	b160      	cbz	r0, 800bf24 <pow+0xdc>
 800bf0a:	f7ff fa6d 	bl	800b3e8 <__errno>
 800bf0e:	2321      	movs	r3, #33	; 0x21
 800bf10:	6003      	str	r3, [r0, #0]
 800bf12:	2200      	movs	r2, #0
 800bf14:	2300      	movs	r3, #0
 800bf16:	4610      	mov	r0, r2
 800bf18:	4619      	mov	r1, r3
 800bf1a:	f7f4 fc9f 	bl	800085c <__aeabi_ddiv>
 800bf1e:	4604      	mov	r4, r0
 800bf20:	460d      	mov	r5, r1
 800bf22:	e7b6      	b.n	800be92 <pow+0x4a>
 800bf24:	f7ff fa60 	bl	800b3e8 <__errno>
 800bf28:	2322      	movs	r3, #34	; 0x22
 800bf2a:	6003      	str	r3, [r0, #0]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	2300      	movs	r3, #0
 800bf30:	4640      	mov	r0, r8
 800bf32:	4649      	mov	r1, r9
 800bf34:	f7f4 fdda 	bl	8000aec <__aeabi_dcmplt>
 800bf38:	2400      	movs	r4, #0
 800bf3a:	b158      	cbz	r0, 800bf54 <pow+0x10c>
 800bf3c:	ec47 6b10 	vmov	d0, r6, r7
 800bf40:	f000 feb2 	bl	800cca8 <rint>
 800bf44:	4632      	mov	r2, r6
 800bf46:	ec51 0b10 	vmov	r0, r1, d0
 800bf4a:	463b      	mov	r3, r7
 800bf4c:	f7f4 fdc4 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d0c2      	beq.n	800beda <pow+0x92>
 800bf54:	4d11      	ldr	r5, [pc, #68]	; (800bf9c <pow+0x154>)
 800bf56:	e79c      	b.n	800be92 <pow+0x4a>
 800bf58:	2200      	movs	r2, #0
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	4629      	mov	r1, r5
 800bf60:	f7f4 fdba 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf64:	2800      	cmp	r0, #0
 800bf66:	d094      	beq.n	800be92 <pow+0x4a>
 800bf68:	ec49 8b10 	vmov	d0, r8, r9
 800bf6c:	f000 fe87 	bl	800cc7e <finite>
 800bf70:	2800      	cmp	r0, #0
 800bf72:	d08e      	beq.n	800be92 <pow+0x4a>
 800bf74:	ec47 6b10 	vmov	d0, r6, r7
 800bf78:	f000 fe81 	bl	800cc7e <finite>
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	d088      	beq.n	800be92 <pow+0x4a>
 800bf80:	f7ff fa32 	bl	800b3e8 <__errno>
 800bf84:	2322      	movs	r3, #34	; 0x22
 800bf86:	6003      	str	r3, [r0, #0]
 800bf88:	2400      	movs	r4, #0
 800bf8a:	2500      	movs	r5, #0
 800bf8c:	e781      	b.n	800be92 <pow+0x4a>
 800bf8e:	4d04      	ldr	r5, [pc, #16]	; (800bfa0 <pow+0x158>)
 800bf90:	2400      	movs	r4, #0
 800bf92:	e77e      	b.n	800be92 <pow+0x4a>
 800bf94:	200004bc 	.word	0x200004bc
 800bf98:	fff00000 	.word	0xfff00000
 800bf9c:	7ff00000 	.word	0x7ff00000
 800bfa0:	3ff00000 	.word	0x3ff00000
 800bfa4:	00000000 	.word	0x00000000

0800bfa8 <__ieee754_log10>:
 800bfa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfac:	ec55 4b10 	vmov	r4, r5, d0
 800bfb0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800bfb4:	462b      	mov	r3, r5
 800bfb6:	da2f      	bge.n	800c018 <__ieee754_log10+0x70>
 800bfb8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800bfbc:	4322      	orrs	r2, r4
 800bfbe:	d109      	bne.n	800bfd4 <__ieee754_log10+0x2c>
 800bfc0:	493b      	ldr	r1, [pc, #236]	; (800c0b0 <__ieee754_log10+0x108>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	f7f4 fc48 	bl	800085c <__aeabi_ddiv>
 800bfcc:	ec41 0b10 	vmov	d0, r0, r1
 800bfd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfd4:	2d00      	cmp	r5, #0
 800bfd6:	da09      	bge.n	800bfec <__ieee754_log10+0x44>
 800bfd8:	ee10 2a10 	vmov	r2, s0
 800bfdc:	ee10 0a10 	vmov	r0, s0
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	f7f4 f959 	bl	8000298 <__aeabi_dsub>
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	2300      	movs	r3, #0
 800bfea:	e7ed      	b.n	800bfc8 <__ieee754_log10+0x20>
 800bfec:	4b31      	ldr	r3, [pc, #196]	; (800c0b4 <__ieee754_log10+0x10c>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	4629      	mov	r1, r5
 800bff2:	ee10 0a10 	vmov	r0, s0
 800bff6:	f7f4 fb07 	bl	8000608 <__aeabi_dmul>
 800bffa:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800bffe:	4604      	mov	r4, r0
 800c000:	460d      	mov	r5, r1
 800c002:	460b      	mov	r3, r1
 800c004:	492c      	ldr	r1, [pc, #176]	; (800c0b8 <__ieee754_log10+0x110>)
 800c006:	428b      	cmp	r3, r1
 800c008:	dd08      	ble.n	800c01c <__ieee754_log10+0x74>
 800c00a:	4622      	mov	r2, r4
 800c00c:	462b      	mov	r3, r5
 800c00e:	4620      	mov	r0, r4
 800c010:	4629      	mov	r1, r5
 800c012:	f7f4 f943 	bl	800029c <__adddf3>
 800c016:	e7d9      	b.n	800bfcc <__ieee754_log10+0x24>
 800c018:	2200      	movs	r2, #0
 800c01a:	e7f3      	b.n	800c004 <__ieee754_log10+0x5c>
 800c01c:	1518      	asrs	r0, r3, #20
 800c01e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800c022:	4410      	add	r0, r2
 800c024:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800c028:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800c02c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800c030:	f7f4 fa80 	bl	8000534 <__aeabi_i2d>
 800c034:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800c038:	3303      	adds	r3, #3
 800c03a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800c03e:	ec45 4b10 	vmov	d0, r4, r5
 800c042:	4606      	mov	r6, r0
 800c044:	460f      	mov	r7, r1
 800c046:	f000 ff43 	bl	800ced0 <__ieee754_log>
 800c04a:	a313      	add	r3, pc, #76	; (adr r3, 800c098 <__ieee754_log10+0xf0>)
 800c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c050:	4630      	mov	r0, r6
 800c052:	4639      	mov	r1, r7
 800c054:	ec59 8b10 	vmov	r8, r9, d0
 800c058:	f7f4 fad6 	bl	8000608 <__aeabi_dmul>
 800c05c:	a310      	add	r3, pc, #64	; (adr r3, 800c0a0 <__ieee754_log10+0xf8>)
 800c05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c062:	4604      	mov	r4, r0
 800c064:	460d      	mov	r5, r1
 800c066:	4640      	mov	r0, r8
 800c068:	4649      	mov	r1, r9
 800c06a:	f7f4 facd 	bl	8000608 <__aeabi_dmul>
 800c06e:	4602      	mov	r2, r0
 800c070:	460b      	mov	r3, r1
 800c072:	4620      	mov	r0, r4
 800c074:	4629      	mov	r1, r5
 800c076:	f7f4 f911 	bl	800029c <__adddf3>
 800c07a:	a30b      	add	r3, pc, #44	; (adr r3, 800c0a8 <__ieee754_log10+0x100>)
 800c07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c080:	4604      	mov	r4, r0
 800c082:	460d      	mov	r5, r1
 800c084:	4630      	mov	r0, r6
 800c086:	4639      	mov	r1, r7
 800c088:	f7f4 fabe 	bl	8000608 <__aeabi_dmul>
 800c08c:	4602      	mov	r2, r0
 800c08e:	460b      	mov	r3, r1
 800c090:	4620      	mov	r0, r4
 800c092:	4629      	mov	r1, r5
 800c094:	e7bd      	b.n	800c012 <__ieee754_log10+0x6a>
 800c096:	bf00      	nop
 800c098:	11f12b36 	.word	0x11f12b36
 800c09c:	3d59fef3 	.word	0x3d59fef3
 800c0a0:	1526e50e 	.word	0x1526e50e
 800c0a4:	3fdbcb7b 	.word	0x3fdbcb7b
 800c0a8:	509f6000 	.word	0x509f6000
 800c0ac:	3fd34413 	.word	0x3fd34413
 800c0b0:	c3500000 	.word	0xc3500000
 800c0b4:	43500000 	.word	0x43500000
 800c0b8:	7fefffff 	.word	0x7fefffff
 800c0bc:	00000000 	.word	0x00000000

0800c0c0 <__ieee754_pow>:
 800c0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c4:	ed2d 8b06 	vpush	{d8-d10}
 800c0c8:	b08d      	sub	sp, #52	; 0x34
 800c0ca:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c0ce:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800c0d2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c0d6:	ea56 0100 	orrs.w	r1, r6, r0
 800c0da:	ec53 2b10 	vmov	r2, r3, d0
 800c0de:	f000 84d1 	beq.w	800ca84 <__ieee754_pow+0x9c4>
 800c0e2:	497f      	ldr	r1, [pc, #508]	; (800c2e0 <__ieee754_pow+0x220>)
 800c0e4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c0e8:	428c      	cmp	r4, r1
 800c0ea:	ee10 8a10 	vmov	r8, s0
 800c0ee:	4699      	mov	r9, r3
 800c0f0:	dc09      	bgt.n	800c106 <__ieee754_pow+0x46>
 800c0f2:	d103      	bne.n	800c0fc <__ieee754_pow+0x3c>
 800c0f4:	b97a      	cbnz	r2, 800c116 <__ieee754_pow+0x56>
 800c0f6:	42a6      	cmp	r6, r4
 800c0f8:	dd02      	ble.n	800c100 <__ieee754_pow+0x40>
 800c0fa:	e00c      	b.n	800c116 <__ieee754_pow+0x56>
 800c0fc:	428e      	cmp	r6, r1
 800c0fe:	dc02      	bgt.n	800c106 <__ieee754_pow+0x46>
 800c100:	428e      	cmp	r6, r1
 800c102:	d110      	bne.n	800c126 <__ieee754_pow+0x66>
 800c104:	b178      	cbz	r0, 800c126 <__ieee754_pow+0x66>
 800c106:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c10a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c10e:	ea54 0308 	orrs.w	r3, r4, r8
 800c112:	f000 84b7 	beq.w	800ca84 <__ieee754_pow+0x9c4>
 800c116:	4873      	ldr	r0, [pc, #460]	; (800c2e4 <__ieee754_pow+0x224>)
 800c118:	b00d      	add	sp, #52	; 0x34
 800c11a:	ecbd 8b06 	vpop	{d8-d10}
 800c11e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c122:	f000 bdb9 	b.w	800cc98 <nan>
 800c126:	f1b9 0f00 	cmp.w	r9, #0
 800c12a:	da36      	bge.n	800c19a <__ieee754_pow+0xda>
 800c12c:	496e      	ldr	r1, [pc, #440]	; (800c2e8 <__ieee754_pow+0x228>)
 800c12e:	428e      	cmp	r6, r1
 800c130:	dc51      	bgt.n	800c1d6 <__ieee754_pow+0x116>
 800c132:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800c136:	428e      	cmp	r6, r1
 800c138:	f340 84af 	ble.w	800ca9a <__ieee754_pow+0x9da>
 800c13c:	1531      	asrs	r1, r6, #20
 800c13e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c142:	2914      	cmp	r1, #20
 800c144:	dd0f      	ble.n	800c166 <__ieee754_pow+0xa6>
 800c146:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800c14a:	fa20 fc01 	lsr.w	ip, r0, r1
 800c14e:	fa0c f101 	lsl.w	r1, ip, r1
 800c152:	4281      	cmp	r1, r0
 800c154:	f040 84a1 	bne.w	800ca9a <__ieee754_pow+0x9da>
 800c158:	f00c 0c01 	and.w	ip, ip, #1
 800c15c:	f1cc 0102 	rsb	r1, ip, #2
 800c160:	9100      	str	r1, [sp, #0]
 800c162:	b180      	cbz	r0, 800c186 <__ieee754_pow+0xc6>
 800c164:	e059      	b.n	800c21a <__ieee754_pow+0x15a>
 800c166:	2800      	cmp	r0, #0
 800c168:	d155      	bne.n	800c216 <__ieee754_pow+0x156>
 800c16a:	f1c1 0114 	rsb	r1, r1, #20
 800c16e:	fa46 fc01 	asr.w	ip, r6, r1
 800c172:	fa0c f101 	lsl.w	r1, ip, r1
 800c176:	42b1      	cmp	r1, r6
 800c178:	f040 848c 	bne.w	800ca94 <__ieee754_pow+0x9d4>
 800c17c:	f00c 0c01 	and.w	ip, ip, #1
 800c180:	f1cc 0102 	rsb	r1, ip, #2
 800c184:	9100      	str	r1, [sp, #0]
 800c186:	4959      	ldr	r1, [pc, #356]	; (800c2ec <__ieee754_pow+0x22c>)
 800c188:	428e      	cmp	r6, r1
 800c18a:	d12d      	bne.n	800c1e8 <__ieee754_pow+0x128>
 800c18c:	2f00      	cmp	r7, #0
 800c18e:	da79      	bge.n	800c284 <__ieee754_pow+0x1c4>
 800c190:	4956      	ldr	r1, [pc, #344]	; (800c2ec <__ieee754_pow+0x22c>)
 800c192:	2000      	movs	r0, #0
 800c194:	f7f4 fb62 	bl	800085c <__aeabi_ddiv>
 800c198:	e016      	b.n	800c1c8 <__ieee754_pow+0x108>
 800c19a:	2100      	movs	r1, #0
 800c19c:	9100      	str	r1, [sp, #0]
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	d13b      	bne.n	800c21a <__ieee754_pow+0x15a>
 800c1a2:	494f      	ldr	r1, [pc, #316]	; (800c2e0 <__ieee754_pow+0x220>)
 800c1a4:	428e      	cmp	r6, r1
 800c1a6:	d1ee      	bne.n	800c186 <__ieee754_pow+0xc6>
 800c1a8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c1ac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c1b0:	ea53 0308 	orrs.w	r3, r3, r8
 800c1b4:	f000 8466 	beq.w	800ca84 <__ieee754_pow+0x9c4>
 800c1b8:	4b4d      	ldr	r3, [pc, #308]	; (800c2f0 <__ieee754_pow+0x230>)
 800c1ba:	429c      	cmp	r4, r3
 800c1bc:	dd0d      	ble.n	800c1da <__ieee754_pow+0x11a>
 800c1be:	2f00      	cmp	r7, #0
 800c1c0:	f280 8464 	bge.w	800ca8c <__ieee754_pow+0x9cc>
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	ec41 0b10 	vmov	d0, r0, r1
 800c1cc:	b00d      	add	sp, #52	; 0x34
 800c1ce:	ecbd 8b06 	vpop	{d8-d10}
 800c1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d6:	2102      	movs	r1, #2
 800c1d8:	e7e0      	b.n	800c19c <__ieee754_pow+0xdc>
 800c1da:	2f00      	cmp	r7, #0
 800c1dc:	daf2      	bge.n	800c1c4 <__ieee754_pow+0x104>
 800c1de:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800c1e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c1e6:	e7ef      	b.n	800c1c8 <__ieee754_pow+0x108>
 800c1e8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c1ec:	d104      	bne.n	800c1f8 <__ieee754_pow+0x138>
 800c1ee:	4610      	mov	r0, r2
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	f7f4 fa09 	bl	8000608 <__aeabi_dmul>
 800c1f6:	e7e7      	b.n	800c1c8 <__ieee754_pow+0x108>
 800c1f8:	493e      	ldr	r1, [pc, #248]	; (800c2f4 <__ieee754_pow+0x234>)
 800c1fa:	428f      	cmp	r7, r1
 800c1fc:	d10d      	bne.n	800c21a <__ieee754_pow+0x15a>
 800c1fe:	f1b9 0f00 	cmp.w	r9, #0
 800c202:	db0a      	blt.n	800c21a <__ieee754_pow+0x15a>
 800c204:	ec43 2b10 	vmov	d0, r2, r3
 800c208:	b00d      	add	sp, #52	; 0x34
 800c20a:	ecbd 8b06 	vpop	{d8-d10}
 800c20e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c212:	f000 bc77 	b.w	800cb04 <__ieee754_sqrt>
 800c216:	2100      	movs	r1, #0
 800c218:	9100      	str	r1, [sp, #0]
 800c21a:	ec43 2b10 	vmov	d0, r2, r3
 800c21e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c222:	f000 fd23 	bl	800cc6c <fabs>
 800c226:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c22a:	ec51 0b10 	vmov	r0, r1, d0
 800c22e:	f1b8 0f00 	cmp.w	r8, #0
 800c232:	d12a      	bne.n	800c28a <__ieee754_pow+0x1ca>
 800c234:	b12c      	cbz	r4, 800c242 <__ieee754_pow+0x182>
 800c236:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c2ec <__ieee754_pow+0x22c>
 800c23a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800c23e:	45e6      	cmp	lr, ip
 800c240:	d123      	bne.n	800c28a <__ieee754_pow+0x1ca>
 800c242:	2f00      	cmp	r7, #0
 800c244:	da05      	bge.n	800c252 <__ieee754_pow+0x192>
 800c246:	4602      	mov	r2, r0
 800c248:	460b      	mov	r3, r1
 800c24a:	2000      	movs	r0, #0
 800c24c:	4927      	ldr	r1, [pc, #156]	; (800c2ec <__ieee754_pow+0x22c>)
 800c24e:	f7f4 fb05 	bl	800085c <__aeabi_ddiv>
 800c252:	f1b9 0f00 	cmp.w	r9, #0
 800c256:	dab7      	bge.n	800c1c8 <__ieee754_pow+0x108>
 800c258:	9b00      	ldr	r3, [sp, #0]
 800c25a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c25e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c262:	4323      	orrs	r3, r4
 800c264:	d108      	bne.n	800c278 <__ieee754_pow+0x1b8>
 800c266:	4602      	mov	r2, r0
 800c268:	460b      	mov	r3, r1
 800c26a:	4610      	mov	r0, r2
 800c26c:	4619      	mov	r1, r3
 800c26e:	f7f4 f813 	bl	8000298 <__aeabi_dsub>
 800c272:	4602      	mov	r2, r0
 800c274:	460b      	mov	r3, r1
 800c276:	e78d      	b.n	800c194 <__ieee754_pow+0xd4>
 800c278:	9b00      	ldr	r3, [sp, #0]
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d1a4      	bne.n	800c1c8 <__ieee754_pow+0x108>
 800c27e:	4602      	mov	r2, r0
 800c280:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c284:	4610      	mov	r0, r2
 800c286:	4619      	mov	r1, r3
 800c288:	e79e      	b.n	800c1c8 <__ieee754_pow+0x108>
 800c28a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800c28e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800c292:	950a      	str	r5, [sp, #40]	; 0x28
 800c294:	9d00      	ldr	r5, [sp, #0]
 800c296:	46ac      	mov	ip, r5
 800c298:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c29a:	ea5c 0505 	orrs.w	r5, ip, r5
 800c29e:	d0e4      	beq.n	800c26a <__ieee754_pow+0x1aa>
 800c2a0:	4b15      	ldr	r3, [pc, #84]	; (800c2f8 <__ieee754_pow+0x238>)
 800c2a2:	429e      	cmp	r6, r3
 800c2a4:	f340 80fc 	ble.w	800c4a0 <__ieee754_pow+0x3e0>
 800c2a8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c2ac:	429e      	cmp	r6, r3
 800c2ae:	4b10      	ldr	r3, [pc, #64]	; (800c2f0 <__ieee754_pow+0x230>)
 800c2b0:	dd07      	ble.n	800c2c2 <__ieee754_pow+0x202>
 800c2b2:	429c      	cmp	r4, r3
 800c2b4:	dc0a      	bgt.n	800c2cc <__ieee754_pow+0x20c>
 800c2b6:	2f00      	cmp	r7, #0
 800c2b8:	da84      	bge.n	800c1c4 <__ieee754_pow+0x104>
 800c2ba:	a307      	add	r3, pc, #28	; (adr r3, 800c2d8 <__ieee754_pow+0x218>)
 800c2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c0:	e795      	b.n	800c1ee <__ieee754_pow+0x12e>
 800c2c2:	429c      	cmp	r4, r3
 800c2c4:	dbf7      	blt.n	800c2b6 <__ieee754_pow+0x1f6>
 800c2c6:	4b09      	ldr	r3, [pc, #36]	; (800c2ec <__ieee754_pow+0x22c>)
 800c2c8:	429c      	cmp	r4, r3
 800c2ca:	dd17      	ble.n	800c2fc <__ieee754_pow+0x23c>
 800c2cc:	2f00      	cmp	r7, #0
 800c2ce:	dcf4      	bgt.n	800c2ba <__ieee754_pow+0x1fa>
 800c2d0:	e778      	b.n	800c1c4 <__ieee754_pow+0x104>
 800c2d2:	bf00      	nop
 800c2d4:	f3af 8000 	nop.w
 800c2d8:	8800759c 	.word	0x8800759c
 800c2dc:	7e37e43c 	.word	0x7e37e43c
 800c2e0:	7ff00000 	.word	0x7ff00000
 800c2e4:	0800d2a9 	.word	0x0800d2a9
 800c2e8:	433fffff 	.word	0x433fffff
 800c2ec:	3ff00000 	.word	0x3ff00000
 800c2f0:	3fefffff 	.word	0x3fefffff
 800c2f4:	3fe00000 	.word	0x3fe00000
 800c2f8:	41e00000 	.word	0x41e00000
 800c2fc:	4b64      	ldr	r3, [pc, #400]	; (800c490 <__ieee754_pow+0x3d0>)
 800c2fe:	2200      	movs	r2, #0
 800c300:	f7f3 ffca 	bl	8000298 <__aeabi_dsub>
 800c304:	a356      	add	r3, pc, #344	; (adr r3, 800c460 <__ieee754_pow+0x3a0>)
 800c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30a:	4604      	mov	r4, r0
 800c30c:	460d      	mov	r5, r1
 800c30e:	f7f4 f97b 	bl	8000608 <__aeabi_dmul>
 800c312:	a355      	add	r3, pc, #340	; (adr r3, 800c468 <__ieee754_pow+0x3a8>)
 800c314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c318:	4606      	mov	r6, r0
 800c31a:	460f      	mov	r7, r1
 800c31c:	4620      	mov	r0, r4
 800c31e:	4629      	mov	r1, r5
 800c320:	f7f4 f972 	bl	8000608 <__aeabi_dmul>
 800c324:	4b5b      	ldr	r3, [pc, #364]	; (800c494 <__ieee754_pow+0x3d4>)
 800c326:	4682      	mov	sl, r0
 800c328:	468b      	mov	fp, r1
 800c32a:	2200      	movs	r2, #0
 800c32c:	4620      	mov	r0, r4
 800c32e:	4629      	mov	r1, r5
 800c330:	f7f4 f96a 	bl	8000608 <__aeabi_dmul>
 800c334:	4602      	mov	r2, r0
 800c336:	460b      	mov	r3, r1
 800c338:	a14d      	add	r1, pc, #308	; (adr r1, 800c470 <__ieee754_pow+0x3b0>)
 800c33a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c33e:	f7f3 ffab 	bl	8000298 <__aeabi_dsub>
 800c342:	4622      	mov	r2, r4
 800c344:	462b      	mov	r3, r5
 800c346:	f7f4 f95f 	bl	8000608 <__aeabi_dmul>
 800c34a:	4602      	mov	r2, r0
 800c34c:	460b      	mov	r3, r1
 800c34e:	2000      	movs	r0, #0
 800c350:	4951      	ldr	r1, [pc, #324]	; (800c498 <__ieee754_pow+0x3d8>)
 800c352:	f7f3 ffa1 	bl	8000298 <__aeabi_dsub>
 800c356:	4622      	mov	r2, r4
 800c358:	4680      	mov	r8, r0
 800c35a:	4689      	mov	r9, r1
 800c35c:	462b      	mov	r3, r5
 800c35e:	4620      	mov	r0, r4
 800c360:	4629      	mov	r1, r5
 800c362:	f7f4 f951 	bl	8000608 <__aeabi_dmul>
 800c366:	4602      	mov	r2, r0
 800c368:	460b      	mov	r3, r1
 800c36a:	4640      	mov	r0, r8
 800c36c:	4649      	mov	r1, r9
 800c36e:	f7f4 f94b 	bl	8000608 <__aeabi_dmul>
 800c372:	a341      	add	r3, pc, #260	; (adr r3, 800c478 <__ieee754_pow+0x3b8>)
 800c374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c378:	f7f4 f946 	bl	8000608 <__aeabi_dmul>
 800c37c:	4602      	mov	r2, r0
 800c37e:	460b      	mov	r3, r1
 800c380:	4650      	mov	r0, sl
 800c382:	4659      	mov	r1, fp
 800c384:	f7f3 ff88 	bl	8000298 <__aeabi_dsub>
 800c388:	4602      	mov	r2, r0
 800c38a:	460b      	mov	r3, r1
 800c38c:	4680      	mov	r8, r0
 800c38e:	4689      	mov	r9, r1
 800c390:	4630      	mov	r0, r6
 800c392:	4639      	mov	r1, r7
 800c394:	f7f3 ff82 	bl	800029c <__adddf3>
 800c398:	2400      	movs	r4, #0
 800c39a:	4632      	mov	r2, r6
 800c39c:	463b      	mov	r3, r7
 800c39e:	4620      	mov	r0, r4
 800c3a0:	460d      	mov	r5, r1
 800c3a2:	f7f3 ff79 	bl	8000298 <__aeabi_dsub>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	f7f3 ff73 	bl	8000298 <__aeabi_dsub>
 800c3b2:	9b00      	ldr	r3, [sp, #0]
 800c3b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	4682      	mov	sl, r0
 800c3bc:	468b      	mov	fp, r1
 800c3be:	f040 81f1 	bne.w	800c7a4 <__ieee754_pow+0x6e4>
 800c3c2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c480 <__ieee754_pow+0x3c0>
 800c3c6:	eeb0 8a47 	vmov.f32	s16, s14
 800c3ca:	eef0 8a67 	vmov.f32	s17, s15
 800c3ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c3d2:	2600      	movs	r6, #0
 800c3d4:	4632      	mov	r2, r6
 800c3d6:	463b      	mov	r3, r7
 800c3d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3dc:	f7f3 ff5c 	bl	8000298 <__aeabi_dsub>
 800c3e0:	4622      	mov	r2, r4
 800c3e2:	462b      	mov	r3, r5
 800c3e4:	f7f4 f910 	bl	8000608 <__aeabi_dmul>
 800c3e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3ec:	4680      	mov	r8, r0
 800c3ee:	4689      	mov	r9, r1
 800c3f0:	4650      	mov	r0, sl
 800c3f2:	4659      	mov	r1, fp
 800c3f4:	f7f4 f908 	bl	8000608 <__aeabi_dmul>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4640      	mov	r0, r8
 800c3fe:	4649      	mov	r1, r9
 800c400:	f7f3 ff4c 	bl	800029c <__adddf3>
 800c404:	4632      	mov	r2, r6
 800c406:	463b      	mov	r3, r7
 800c408:	4680      	mov	r8, r0
 800c40a:	4689      	mov	r9, r1
 800c40c:	4620      	mov	r0, r4
 800c40e:	4629      	mov	r1, r5
 800c410:	f7f4 f8fa 	bl	8000608 <__aeabi_dmul>
 800c414:	460b      	mov	r3, r1
 800c416:	4604      	mov	r4, r0
 800c418:	460d      	mov	r5, r1
 800c41a:	4602      	mov	r2, r0
 800c41c:	4649      	mov	r1, r9
 800c41e:	4640      	mov	r0, r8
 800c420:	f7f3 ff3c 	bl	800029c <__adddf3>
 800c424:	4b1d      	ldr	r3, [pc, #116]	; (800c49c <__ieee754_pow+0x3dc>)
 800c426:	4299      	cmp	r1, r3
 800c428:	ec45 4b19 	vmov	d9, r4, r5
 800c42c:	4606      	mov	r6, r0
 800c42e:	460f      	mov	r7, r1
 800c430:	468b      	mov	fp, r1
 800c432:	f340 82fe 	ble.w	800ca32 <__ieee754_pow+0x972>
 800c436:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c43a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c43e:	4303      	orrs	r3, r0
 800c440:	f000 81f0 	beq.w	800c824 <__ieee754_pow+0x764>
 800c444:	a310      	add	r3, pc, #64	; (adr r3, 800c488 <__ieee754_pow+0x3c8>)
 800c446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44a:	ec51 0b18 	vmov	r0, r1, d8
 800c44e:	f7f4 f8db 	bl	8000608 <__aeabi_dmul>
 800c452:	a30d      	add	r3, pc, #52	; (adr r3, 800c488 <__ieee754_pow+0x3c8>)
 800c454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c458:	e6cb      	b.n	800c1f2 <__ieee754_pow+0x132>
 800c45a:	bf00      	nop
 800c45c:	f3af 8000 	nop.w
 800c460:	60000000 	.word	0x60000000
 800c464:	3ff71547 	.word	0x3ff71547
 800c468:	f85ddf44 	.word	0xf85ddf44
 800c46c:	3e54ae0b 	.word	0x3e54ae0b
 800c470:	55555555 	.word	0x55555555
 800c474:	3fd55555 	.word	0x3fd55555
 800c478:	652b82fe 	.word	0x652b82fe
 800c47c:	3ff71547 	.word	0x3ff71547
 800c480:	00000000 	.word	0x00000000
 800c484:	bff00000 	.word	0xbff00000
 800c488:	8800759c 	.word	0x8800759c
 800c48c:	7e37e43c 	.word	0x7e37e43c
 800c490:	3ff00000 	.word	0x3ff00000
 800c494:	3fd00000 	.word	0x3fd00000
 800c498:	3fe00000 	.word	0x3fe00000
 800c49c:	408fffff 	.word	0x408fffff
 800c4a0:	4bd7      	ldr	r3, [pc, #860]	; (800c800 <__ieee754_pow+0x740>)
 800c4a2:	ea03 0309 	and.w	r3, r3, r9
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	b92b      	cbnz	r3, 800c4b6 <__ieee754_pow+0x3f6>
 800c4aa:	4bd6      	ldr	r3, [pc, #856]	; (800c804 <__ieee754_pow+0x744>)
 800c4ac:	f7f4 f8ac 	bl	8000608 <__aeabi_dmul>
 800c4b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c4b4:	460c      	mov	r4, r1
 800c4b6:	1523      	asrs	r3, r4, #20
 800c4b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c4bc:	4413      	add	r3, r2
 800c4be:	9309      	str	r3, [sp, #36]	; 0x24
 800c4c0:	4bd1      	ldr	r3, [pc, #836]	; (800c808 <__ieee754_pow+0x748>)
 800c4c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c4c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c4ca:	429c      	cmp	r4, r3
 800c4cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c4d0:	dd08      	ble.n	800c4e4 <__ieee754_pow+0x424>
 800c4d2:	4bce      	ldr	r3, [pc, #824]	; (800c80c <__ieee754_pow+0x74c>)
 800c4d4:	429c      	cmp	r4, r3
 800c4d6:	f340 8163 	ble.w	800c7a0 <__ieee754_pow+0x6e0>
 800c4da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4dc:	3301      	adds	r3, #1
 800c4de:	9309      	str	r3, [sp, #36]	; 0x24
 800c4e0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c4e4:	2400      	movs	r4, #0
 800c4e6:	00e3      	lsls	r3, r4, #3
 800c4e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4ea:	4bc9      	ldr	r3, [pc, #804]	; (800c810 <__ieee754_pow+0x750>)
 800c4ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4f0:	ed93 7b00 	vldr	d7, [r3]
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	ec53 2b17 	vmov	r2, r3, d7
 800c4fa:	eeb0 8a47 	vmov.f32	s16, s14
 800c4fe:	eef0 8a67 	vmov.f32	s17, s15
 800c502:	4682      	mov	sl, r0
 800c504:	f7f3 fec8 	bl	8000298 <__aeabi_dsub>
 800c508:	4652      	mov	r2, sl
 800c50a:	4606      	mov	r6, r0
 800c50c:	460f      	mov	r7, r1
 800c50e:	462b      	mov	r3, r5
 800c510:	ec51 0b18 	vmov	r0, r1, d8
 800c514:	f7f3 fec2 	bl	800029c <__adddf3>
 800c518:	4602      	mov	r2, r0
 800c51a:	460b      	mov	r3, r1
 800c51c:	2000      	movs	r0, #0
 800c51e:	49bd      	ldr	r1, [pc, #756]	; (800c814 <__ieee754_pow+0x754>)
 800c520:	f7f4 f99c 	bl	800085c <__aeabi_ddiv>
 800c524:	ec41 0b19 	vmov	d9, r0, r1
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	4630      	mov	r0, r6
 800c52e:	4639      	mov	r1, r7
 800c530:	f7f4 f86a 	bl	8000608 <__aeabi_dmul>
 800c534:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c538:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c53c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c540:	2300      	movs	r3, #0
 800c542:	9304      	str	r3, [sp, #16]
 800c544:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c548:	46ab      	mov	fp, r5
 800c54a:	106d      	asrs	r5, r5, #1
 800c54c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c550:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c554:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c558:	2200      	movs	r2, #0
 800c55a:	4640      	mov	r0, r8
 800c55c:	4649      	mov	r1, r9
 800c55e:	4614      	mov	r4, r2
 800c560:	461d      	mov	r5, r3
 800c562:	f7f4 f851 	bl	8000608 <__aeabi_dmul>
 800c566:	4602      	mov	r2, r0
 800c568:	460b      	mov	r3, r1
 800c56a:	4630      	mov	r0, r6
 800c56c:	4639      	mov	r1, r7
 800c56e:	f7f3 fe93 	bl	8000298 <__aeabi_dsub>
 800c572:	ec53 2b18 	vmov	r2, r3, d8
 800c576:	4606      	mov	r6, r0
 800c578:	460f      	mov	r7, r1
 800c57a:	4620      	mov	r0, r4
 800c57c:	4629      	mov	r1, r5
 800c57e:	f7f3 fe8b 	bl	8000298 <__aeabi_dsub>
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	4650      	mov	r0, sl
 800c588:	4659      	mov	r1, fp
 800c58a:	f7f3 fe85 	bl	8000298 <__aeabi_dsub>
 800c58e:	4642      	mov	r2, r8
 800c590:	464b      	mov	r3, r9
 800c592:	f7f4 f839 	bl	8000608 <__aeabi_dmul>
 800c596:	4602      	mov	r2, r0
 800c598:	460b      	mov	r3, r1
 800c59a:	4630      	mov	r0, r6
 800c59c:	4639      	mov	r1, r7
 800c59e:	f7f3 fe7b 	bl	8000298 <__aeabi_dsub>
 800c5a2:	ec53 2b19 	vmov	r2, r3, d9
 800c5a6:	f7f4 f82f 	bl	8000608 <__aeabi_dmul>
 800c5aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5ae:	ec41 0b18 	vmov	d8, r0, r1
 800c5b2:	4610      	mov	r0, r2
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	f7f4 f827 	bl	8000608 <__aeabi_dmul>
 800c5ba:	a37d      	add	r3, pc, #500	; (adr r3, 800c7b0 <__ieee754_pow+0x6f0>)
 800c5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	460d      	mov	r5, r1
 800c5c4:	f7f4 f820 	bl	8000608 <__aeabi_dmul>
 800c5c8:	a37b      	add	r3, pc, #492	; (adr r3, 800c7b8 <__ieee754_pow+0x6f8>)
 800c5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ce:	f7f3 fe65 	bl	800029c <__adddf3>
 800c5d2:	4622      	mov	r2, r4
 800c5d4:	462b      	mov	r3, r5
 800c5d6:	f7f4 f817 	bl	8000608 <__aeabi_dmul>
 800c5da:	a379      	add	r3, pc, #484	; (adr r3, 800c7c0 <__ieee754_pow+0x700>)
 800c5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e0:	f7f3 fe5c 	bl	800029c <__adddf3>
 800c5e4:	4622      	mov	r2, r4
 800c5e6:	462b      	mov	r3, r5
 800c5e8:	f7f4 f80e 	bl	8000608 <__aeabi_dmul>
 800c5ec:	a376      	add	r3, pc, #472	; (adr r3, 800c7c8 <__ieee754_pow+0x708>)
 800c5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f2:	f7f3 fe53 	bl	800029c <__adddf3>
 800c5f6:	4622      	mov	r2, r4
 800c5f8:	462b      	mov	r3, r5
 800c5fa:	f7f4 f805 	bl	8000608 <__aeabi_dmul>
 800c5fe:	a374      	add	r3, pc, #464	; (adr r3, 800c7d0 <__ieee754_pow+0x710>)
 800c600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c604:	f7f3 fe4a 	bl	800029c <__adddf3>
 800c608:	4622      	mov	r2, r4
 800c60a:	462b      	mov	r3, r5
 800c60c:	f7f3 fffc 	bl	8000608 <__aeabi_dmul>
 800c610:	a371      	add	r3, pc, #452	; (adr r3, 800c7d8 <__ieee754_pow+0x718>)
 800c612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c616:	f7f3 fe41 	bl	800029c <__adddf3>
 800c61a:	4622      	mov	r2, r4
 800c61c:	4606      	mov	r6, r0
 800c61e:	460f      	mov	r7, r1
 800c620:	462b      	mov	r3, r5
 800c622:	4620      	mov	r0, r4
 800c624:	4629      	mov	r1, r5
 800c626:	f7f3 ffef 	bl	8000608 <__aeabi_dmul>
 800c62a:	4602      	mov	r2, r0
 800c62c:	460b      	mov	r3, r1
 800c62e:	4630      	mov	r0, r6
 800c630:	4639      	mov	r1, r7
 800c632:	f7f3 ffe9 	bl	8000608 <__aeabi_dmul>
 800c636:	4642      	mov	r2, r8
 800c638:	4604      	mov	r4, r0
 800c63a:	460d      	mov	r5, r1
 800c63c:	464b      	mov	r3, r9
 800c63e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c642:	f7f3 fe2b 	bl	800029c <__adddf3>
 800c646:	ec53 2b18 	vmov	r2, r3, d8
 800c64a:	f7f3 ffdd 	bl	8000608 <__aeabi_dmul>
 800c64e:	4622      	mov	r2, r4
 800c650:	462b      	mov	r3, r5
 800c652:	f7f3 fe23 	bl	800029c <__adddf3>
 800c656:	4642      	mov	r2, r8
 800c658:	4682      	mov	sl, r0
 800c65a:	468b      	mov	fp, r1
 800c65c:	464b      	mov	r3, r9
 800c65e:	4640      	mov	r0, r8
 800c660:	4649      	mov	r1, r9
 800c662:	f7f3 ffd1 	bl	8000608 <__aeabi_dmul>
 800c666:	4b6c      	ldr	r3, [pc, #432]	; (800c818 <__ieee754_pow+0x758>)
 800c668:	2200      	movs	r2, #0
 800c66a:	4606      	mov	r6, r0
 800c66c:	460f      	mov	r7, r1
 800c66e:	f7f3 fe15 	bl	800029c <__adddf3>
 800c672:	4652      	mov	r2, sl
 800c674:	465b      	mov	r3, fp
 800c676:	f7f3 fe11 	bl	800029c <__adddf3>
 800c67a:	9c04      	ldr	r4, [sp, #16]
 800c67c:	460d      	mov	r5, r1
 800c67e:	4622      	mov	r2, r4
 800c680:	460b      	mov	r3, r1
 800c682:	4640      	mov	r0, r8
 800c684:	4649      	mov	r1, r9
 800c686:	f7f3 ffbf 	bl	8000608 <__aeabi_dmul>
 800c68a:	4b63      	ldr	r3, [pc, #396]	; (800c818 <__ieee754_pow+0x758>)
 800c68c:	4680      	mov	r8, r0
 800c68e:	4689      	mov	r9, r1
 800c690:	2200      	movs	r2, #0
 800c692:	4620      	mov	r0, r4
 800c694:	4629      	mov	r1, r5
 800c696:	f7f3 fdff 	bl	8000298 <__aeabi_dsub>
 800c69a:	4632      	mov	r2, r6
 800c69c:	463b      	mov	r3, r7
 800c69e:	f7f3 fdfb 	bl	8000298 <__aeabi_dsub>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	4650      	mov	r0, sl
 800c6a8:	4659      	mov	r1, fp
 800c6aa:	f7f3 fdf5 	bl	8000298 <__aeabi_dsub>
 800c6ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6b2:	f7f3 ffa9 	bl	8000608 <__aeabi_dmul>
 800c6b6:	4622      	mov	r2, r4
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	460f      	mov	r7, r1
 800c6bc:	462b      	mov	r3, r5
 800c6be:	ec51 0b18 	vmov	r0, r1, d8
 800c6c2:	f7f3 ffa1 	bl	8000608 <__aeabi_dmul>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	4639      	mov	r1, r7
 800c6ce:	f7f3 fde5 	bl	800029c <__adddf3>
 800c6d2:	4606      	mov	r6, r0
 800c6d4:	460f      	mov	r7, r1
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	460b      	mov	r3, r1
 800c6da:	4640      	mov	r0, r8
 800c6dc:	4649      	mov	r1, r9
 800c6de:	f7f3 fddd 	bl	800029c <__adddf3>
 800c6e2:	9c04      	ldr	r4, [sp, #16]
 800c6e4:	a33e      	add	r3, pc, #248	; (adr r3, 800c7e0 <__ieee754_pow+0x720>)
 800c6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	460d      	mov	r5, r1
 800c6ee:	f7f3 ff8b 	bl	8000608 <__aeabi_dmul>
 800c6f2:	4642      	mov	r2, r8
 800c6f4:	ec41 0b18 	vmov	d8, r0, r1
 800c6f8:	464b      	mov	r3, r9
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	f7f3 fdcb 	bl	8000298 <__aeabi_dsub>
 800c702:	4602      	mov	r2, r0
 800c704:	460b      	mov	r3, r1
 800c706:	4630      	mov	r0, r6
 800c708:	4639      	mov	r1, r7
 800c70a:	f7f3 fdc5 	bl	8000298 <__aeabi_dsub>
 800c70e:	a336      	add	r3, pc, #216	; (adr r3, 800c7e8 <__ieee754_pow+0x728>)
 800c710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c714:	f7f3 ff78 	bl	8000608 <__aeabi_dmul>
 800c718:	a335      	add	r3, pc, #212	; (adr r3, 800c7f0 <__ieee754_pow+0x730>)
 800c71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71e:	4606      	mov	r6, r0
 800c720:	460f      	mov	r7, r1
 800c722:	4620      	mov	r0, r4
 800c724:	4629      	mov	r1, r5
 800c726:	f7f3 ff6f 	bl	8000608 <__aeabi_dmul>
 800c72a:	4602      	mov	r2, r0
 800c72c:	460b      	mov	r3, r1
 800c72e:	4630      	mov	r0, r6
 800c730:	4639      	mov	r1, r7
 800c732:	f7f3 fdb3 	bl	800029c <__adddf3>
 800c736:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c738:	4b38      	ldr	r3, [pc, #224]	; (800c81c <__ieee754_pow+0x75c>)
 800c73a:	4413      	add	r3, r2
 800c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c740:	f7f3 fdac 	bl	800029c <__adddf3>
 800c744:	4682      	mov	sl, r0
 800c746:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c748:	468b      	mov	fp, r1
 800c74a:	f7f3 fef3 	bl	8000534 <__aeabi_i2d>
 800c74e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c750:	4b33      	ldr	r3, [pc, #204]	; (800c820 <__ieee754_pow+0x760>)
 800c752:	4413      	add	r3, r2
 800c754:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c758:	4606      	mov	r6, r0
 800c75a:	460f      	mov	r7, r1
 800c75c:	4652      	mov	r2, sl
 800c75e:	465b      	mov	r3, fp
 800c760:	ec51 0b18 	vmov	r0, r1, d8
 800c764:	f7f3 fd9a 	bl	800029c <__adddf3>
 800c768:	4642      	mov	r2, r8
 800c76a:	464b      	mov	r3, r9
 800c76c:	f7f3 fd96 	bl	800029c <__adddf3>
 800c770:	4632      	mov	r2, r6
 800c772:	463b      	mov	r3, r7
 800c774:	f7f3 fd92 	bl	800029c <__adddf3>
 800c778:	9c04      	ldr	r4, [sp, #16]
 800c77a:	4632      	mov	r2, r6
 800c77c:	463b      	mov	r3, r7
 800c77e:	4620      	mov	r0, r4
 800c780:	460d      	mov	r5, r1
 800c782:	f7f3 fd89 	bl	8000298 <__aeabi_dsub>
 800c786:	4642      	mov	r2, r8
 800c788:	464b      	mov	r3, r9
 800c78a:	f7f3 fd85 	bl	8000298 <__aeabi_dsub>
 800c78e:	ec53 2b18 	vmov	r2, r3, d8
 800c792:	f7f3 fd81 	bl	8000298 <__aeabi_dsub>
 800c796:	4602      	mov	r2, r0
 800c798:	460b      	mov	r3, r1
 800c79a:	4650      	mov	r0, sl
 800c79c:	4659      	mov	r1, fp
 800c79e:	e606      	b.n	800c3ae <__ieee754_pow+0x2ee>
 800c7a0:	2401      	movs	r4, #1
 800c7a2:	e6a0      	b.n	800c4e6 <__ieee754_pow+0x426>
 800c7a4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c7f8 <__ieee754_pow+0x738>
 800c7a8:	e60d      	b.n	800c3c6 <__ieee754_pow+0x306>
 800c7aa:	bf00      	nop
 800c7ac:	f3af 8000 	nop.w
 800c7b0:	4a454eef 	.word	0x4a454eef
 800c7b4:	3fca7e28 	.word	0x3fca7e28
 800c7b8:	93c9db65 	.word	0x93c9db65
 800c7bc:	3fcd864a 	.word	0x3fcd864a
 800c7c0:	a91d4101 	.word	0xa91d4101
 800c7c4:	3fd17460 	.word	0x3fd17460
 800c7c8:	518f264d 	.word	0x518f264d
 800c7cc:	3fd55555 	.word	0x3fd55555
 800c7d0:	db6fabff 	.word	0xdb6fabff
 800c7d4:	3fdb6db6 	.word	0x3fdb6db6
 800c7d8:	33333303 	.word	0x33333303
 800c7dc:	3fe33333 	.word	0x3fe33333
 800c7e0:	e0000000 	.word	0xe0000000
 800c7e4:	3feec709 	.word	0x3feec709
 800c7e8:	dc3a03fd 	.word	0xdc3a03fd
 800c7ec:	3feec709 	.word	0x3feec709
 800c7f0:	145b01f5 	.word	0x145b01f5
 800c7f4:	be3e2fe0 	.word	0xbe3e2fe0
 800c7f8:	00000000 	.word	0x00000000
 800c7fc:	3ff00000 	.word	0x3ff00000
 800c800:	7ff00000 	.word	0x7ff00000
 800c804:	43400000 	.word	0x43400000
 800c808:	0003988e 	.word	0x0003988e
 800c80c:	000bb679 	.word	0x000bb679
 800c810:	0800d2d8 	.word	0x0800d2d8
 800c814:	3ff00000 	.word	0x3ff00000
 800c818:	40080000 	.word	0x40080000
 800c81c:	0800d2f8 	.word	0x0800d2f8
 800c820:	0800d2e8 	.word	0x0800d2e8
 800c824:	a3b5      	add	r3, pc, #724	; (adr r3, 800cafc <__ieee754_pow+0xa3c>)
 800c826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82a:	4640      	mov	r0, r8
 800c82c:	4649      	mov	r1, r9
 800c82e:	f7f3 fd35 	bl	800029c <__adddf3>
 800c832:	4622      	mov	r2, r4
 800c834:	ec41 0b1a 	vmov	d10, r0, r1
 800c838:	462b      	mov	r3, r5
 800c83a:	4630      	mov	r0, r6
 800c83c:	4639      	mov	r1, r7
 800c83e:	f7f3 fd2b 	bl	8000298 <__aeabi_dsub>
 800c842:	4602      	mov	r2, r0
 800c844:	460b      	mov	r3, r1
 800c846:	ec51 0b1a 	vmov	r0, r1, d10
 800c84a:	f7f4 f96d 	bl	8000b28 <__aeabi_dcmpgt>
 800c84e:	2800      	cmp	r0, #0
 800c850:	f47f adf8 	bne.w	800c444 <__ieee754_pow+0x384>
 800c854:	4aa4      	ldr	r2, [pc, #656]	; (800cae8 <__ieee754_pow+0xa28>)
 800c856:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c85a:	4293      	cmp	r3, r2
 800c85c:	f340 810b 	ble.w	800ca76 <__ieee754_pow+0x9b6>
 800c860:	151b      	asrs	r3, r3, #20
 800c862:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c866:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c86a:	fa4a f303 	asr.w	r3, sl, r3
 800c86e:	445b      	add	r3, fp
 800c870:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c874:	4e9d      	ldr	r6, [pc, #628]	; (800caec <__ieee754_pow+0xa2c>)
 800c876:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c87a:	4116      	asrs	r6, r2
 800c87c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c880:	2000      	movs	r0, #0
 800c882:	ea23 0106 	bic.w	r1, r3, r6
 800c886:	f1c2 0214 	rsb	r2, r2, #20
 800c88a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c88e:	fa4a fa02 	asr.w	sl, sl, r2
 800c892:	f1bb 0f00 	cmp.w	fp, #0
 800c896:	4602      	mov	r2, r0
 800c898:	460b      	mov	r3, r1
 800c89a:	4620      	mov	r0, r4
 800c89c:	4629      	mov	r1, r5
 800c89e:	bfb8      	it	lt
 800c8a0:	f1ca 0a00 	rsblt	sl, sl, #0
 800c8a4:	f7f3 fcf8 	bl	8000298 <__aeabi_dsub>
 800c8a8:	ec41 0b19 	vmov	d9, r0, r1
 800c8ac:	4642      	mov	r2, r8
 800c8ae:	464b      	mov	r3, r9
 800c8b0:	ec51 0b19 	vmov	r0, r1, d9
 800c8b4:	f7f3 fcf2 	bl	800029c <__adddf3>
 800c8b8:	2400      	movs	r4, #0
 800c8ba:	a379      	add	r3, pc, #484	; (adr r3, 800caa0 <__ieee754_pow+0x9e0>)
 800c8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	460d      	mov	r5, r1
 800c8c4:	f7f3 fea0 	bl	8000608 <__aeabi_dmul>
 800c8c8:	ec53 2b19 	vmov	r2, r3, d9
 800c8cc:	4606      	mov	r6, r0
 800c8ce:	460f      	mov	r7, r1
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	4629      	mov	r1, r5
 800c8d4:	f7f3 fce0 	bl	8000298 <__aeabi_dsub>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	460b      	mov	r3, r1
 800c8dc:	4640      	mov	r0, r8
 800c8de:	4649      	mov	r1, r9
 800c8e0:	f7f3 fcda 	bl	8000298 <__aeabi_dsub>
 800c8e4:	a370      	add	r3, pc, #448	; (adr r3, 800caa8 <__ieee754_pow+0x9e8>)
 800c8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ea:	f7f3 fe8d 	bl	8000608 <__aeabi_dmul>
 800c8ee:	a370      	add	r3, pc, #448	; (adr r3, 800cab0 <__ieee754_pow+0x9f0>)
 800c8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f4:	4680      	mov	r8, r0
 800c8f6:	4689      	mov	r9, r1
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	4629      	mov	r1, r5
 800c8fc:	f7f3 fe84 	bl	8000608 <__aeabi_dmul>
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	4640      	mov	r0, r8
 800c906:	4649      	mov	r1, r9
 800c908:	f7f3 fcc8 	bl	800029c <__adddf3>
 800c90c:	4604      	mov	r4, r0
 800c90e:	460d      	mov	r5, r1
 800c910:	4602      	mov	r2, r0
 800c912:	460b      	mov	r3, r1
 800c914:	4630      	mov	r0, r6
 800c916:	4639      	mov	r1, r7
 800c918:	f7f3 fcc0 	bl	800029c <__adddf3>
 800c91c:	4632      	mov	r2, r6
 800c91e:	463b      	mov	r3, r7
 800c920:	4680      	mov	r8, r0
 800c922:	4689      	mov	r9, r1
 800c924:	f7f3 fcb8 	bl	8000298 <__aeabi_dsub>
 800c928:	4602      	mov	r2, r0
 800c92a:	460b      	mov	r3, r1
 800c92c:	4620      	mov	r0, r4
 800c92e:	4629      	mov	r1, r5
 800c930:	f7f3 fcb2 	bl	8000298 <__aeabi_dsub>
 800c934:	4642      	mov	r2, r8
 800c936:	4606      	mov	r6, r0
 800c938:	460f      	mov	r7, r1
 800c93a:	464b      	mov	r3, r9
 800c93c:	4640      	mov	r0, r8
 800c93e:	4649      	mov	r1, r9
 800c940:	f7f3 fe62 	bl	8000608 <__aeabi_dmul>
 800c944:	a35c      	add	r3, pc, #368	; (adr r3, 800cab8 <__ieee754_pow+0x9f8>)
 800c946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94a:	4604      	mov	r4, r0
 800c94c:	460d      	mov	r5, r1
 800c94e:	f7f3 fe5b 	bl	8000608 <__aeabi_dmul>
 800c952:	a35b      	add	r3, pc, #364	; (adr r3, 800cac0 <__ieee754_pow+0xa00>)
 800c954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c958:	f7f3 fc9e 	bl	8000298 <__aeabi_dsub>
 800c95c:	4622      	mov	r2, r4
 800c95e:	462b      	mov	r3, r5
 800c960:	f7f3 fe52 	bl	8000608 <__aeabi_dmul>
 800c964:	a358      	add	r3, pc, #352	; (adr r3, 800cac8 <__ieee754_pow+0xa08>)
 800c966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96a:	f7f3 fc97 	bl	800029c <__adddf3>
 800c96e:	4622      	mov	r2, r4
 800c970:	462b      	mov	r3, r5
 800c972:	f7f3 fe49 	bl	8000608 <__aeabi_dmul>
 800c976:	a356      	add	r3, pc, #344	; (adr r3, 800cad0 <__ieee754_pow+0xa10>)
 800c978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97c:	f7f3 fc8c 	bl	8000298 <__aeabi_dsub>
 800c980:	4622      	mov	r2, r4
 800c982:	462b      	mov	r3, r5
 800c984:	f7f3 fe40 	bl	8000608 <__aeabi_dmul>
 800c988:	a353      	add	r3, pc, #332	; (adr r3, 800cad8 <__ieee754_pow+0xa18>)
 800c98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98e:	f7f3 fc85 	bl	800029c <__adddf3>
 800c992:	4622      	mov	r2, r4
 800c994:	462b      	mov	r3, r5
 800c996:	f7f3 fe37 	bl	8000608 <__aeabi_dmul>
 800c99a:	4602      	mov	r2, r0
 800c99c:	460b      	mov	r3, r1
 800c99e:	4640      	mov	r0, r8
 800c9a0:	4649      	mov	r1, r9
 800c9a2:	f7f3 fc79 	bl	8000298 <__aeabi_dsub>
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	460d      	mov	r5, r1
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	4640      	mov	r0, r8
 800c9b0:	4649      	mov	r1, r9
 800c9b2:	f7f3 fe29 	bl	8000608 <__aeabi_dmul>
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	ec41 0b19 	vmov	d9, r0, r1
 800c9bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	4629      	mov	r1, r5
 800c9c4:	f7f3 fc68 	bl	8000298 <__aeabi_dsub>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	ec51 0b19 	vmov	r0, r1, d9
 800c9d0:	f7f3 ff44 	bl	800085c <__aeabi_ddiv>
 800c9d4:	4632      	mov	r2, r6
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	460d      	mov	r5, r1
 800c9da:	463b      	mov	r3, r7
 800c9dc:	4640      	mov	r0, r8
 800c9de:	4649      	mov	r1, r9
 800c9e0:	f7f3 fe12 	bl	8000608 <__aeabi_dmul>
 800c9e4:	4632      	mov	r2, r6
 800c9e6:	463b      	mov	r3, r7
 800c9e8:	f7f3 fc58 	bl	800029c <__adddf3>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	4629      	mov	r1, r5
 800c9f4:	f7f3 fc50 	bl	8000298 <__aeabi_dsub>
 800c9f8:	4642      	mov	r2, r8
 800c9fa:	464b      	mov	r3, r9
 800c9fc:	f7f3 fc4c 	bl	8000298 <__aeabi_dsub>
 800ca00:	460b      	mov	r3, r1
 800ca02:	4602      	mov	r2, r0
 800ca04:	493a      	ldr	r1, [pc, #232]	; (800caf0 <__ieee754_pow+0xa30>)
 800ca06:	2000      	movs	r0, #0
 800ca08:	f7f3 fc46 	bl	8000298 <__aeabi_dsub>
 800ca0c:	e9cd 0100 	strd	r0, r1, [sp]
 800ca10:	9b01      	ldr	r3, [sp, #4]
 800ca12:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ca16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca1a:	da2f      	bge.n	800ca7c <__ieee754_pow+0x9bc>
 800ca1c:	4650      	mov	r0, sl
 800ca1e:	ed9d 0b00 	vldr	d0, [sp]
 800ca22:	f000 f9cd 	bl	800cdc0 <scalbn>
 800ca26:	ec51 0b10 	vmov	r0, r1, d0
 800ca2a:	ec53 2b18 	vmov	r2, r3, d8
 800ca2e:	f7ff bbe0 	b.w	800c1f2 <__ieee754_pow+0x132>
 800ca32:	4b30      	ldr	r3, [pc, #192]	; (800caf4 <__ieee754_pow+0xa34>)
 800ca34:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ca38:	429e      	cmp	r6, r3
 800ca3a:	f77f af0b 	ble.w	800c854 <__ieee754_pow+0x794>
 800ca3e:	4b2e      	ldr	r3, [pc, #184]	; (800caf8 <__ieee754_pow+0xa38>)
 800ca40:	440b      	add	r3, r1
 800ca42:	4303      	orrs	r3, r0
 800ca44:	d00b      	beq.n	800ca5e <__ieee754_pow+0x99e>
 800ca46:	a326      	add	r3, pc, #152	; (adr r3, 800cae0 <__ieee754_pow+0xa20>)
 800ca48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4c:	ec51 0b18 	vmov	r0, r1, d8
 800ca50:	f7f3 fdda 	bl	8000608 <__aeabi_dmul>
 800ca54:	a322      	add	r3, pc, #136	; (adr r3, 800cae0 <__ieee754_pow+0xa20>)
 800ca56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5a:	f7ff bbca 	b.w	800c1f2 <__ieee754_pow+0x132>
 800ca5e:	4622      	mov	r2, r4
 800ca60:	462b      	mov	r3, r5
 800ca62:	f7f3 fc19 	bl	8000298 <__aeabi_dsub>
 800ca66:	4642      	mov	r2, r8
 800ca68:	464b      	mov	r3, r9
 800ca6a:	f7f4 f853 	bl	8000b14 <__aeabi_dcmpge>
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	f43f aef0 	beq.w	800c854 <__ieee754_pow+0x794>
 800ca74:	e7e7      	b.n	800ca46 <__ieee754_pow+0x986>
 800ca76:	f04f 0a00 	mov.w	sl, #0
 800ca7a:	e717      	b.n	800c8ac <__ieee754_pow+0x7ec>
 800ca7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca80:	4619      	mov	r1, r3
 800ca82:	e7d2      	b.n	800ca2a <__ieee754_pow+0x96a>
 800ca84:	491a      	ldr	r1, [pc, #104]	; (800caf0 <__ieee754_pow+0xa30>)
 800ca86:	2000      	movs	r0, #0
 800ca88:	f7ff bb9e 	b.w	800c1c8 <__ieee754_pow+0x108>
 800ca8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca90:	f7ff bb9a 	b.w	800c1c8 <__ieee754_pow+0x108>
 800ca94:	9000      	str	r0, [sp, #0]
 800ca96:	f7ff bb76 	b.w	800c186 <__ieee754_pow+0xc6>
 800ca9a:	2100      	movs	r1, #0
 800ca9c:	f7ff bb60 	b.w	800c160 <__ieee754_pow+0xa0>
 800caa0:	00000000 	.word	0x00000000
 800caa4:	3fe62e43 	.word	0x3fe62e43
 800caa8:	fefa39ef 	.word	0xfefa39ef
 800caac:	3fe62e42 	.word	0x3fe62e42
 800cab0:	0ca86c39 	.word	0x0ca86c39
 800cab4:	be205c61 	.word	0xbe205c61
 800cab8:	72bea4d0 	.word	0x72bea4d0
 800cabc:	3e663769 	.word	0x3e663769
 800cac0:	c5d26bf1 	.word	0xc5d26bf1
 800cac4:	3ebbbd41 	.word	0x3ebbbd41
 800cac8:	af25de2c 	.word	0xaf25de2c
 800cacc:	3f11566a 	.word	0x3f11566a
 800cad0:	16bebd93 	.word	0x16bebd93
 800cad4:	3f66c16c 	.word	0x3f66c16c
 800cad8:	5555553e 	.word	0x5555553e
 800cadc:	3fc55555 	.word	0x3fc55555
 800cae0:	c2f8f359 	.word	0xc2f8f359
 800cae4:	01a56e1f 	.word	0x01a56e1f
 800cae8:	3fe00000 	.word	0x3fe00000
 800caec:	000fffff 	.word	0x000fffff
 800caf0:	3ff00000 	.word	0x3ff00000
 800caf4:	4090cbff 	.word	0x4090cbff
 800caf8:	3f6f3400 	.word	0x3f6f3400
 800cafc:	652b82fe 	.word	0x652b82fe
 800cb00:	3c971547 	.word	0x3c971547

0800cb04 <__ieee754_sqrt>:
 800cb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb08:	ec55 4b10 	vmov	r4, r5, d0
 800cb0c:	4e56      	ldr	r6, [pc, #344]	; (800cc68 <__ieee754_sqrt+0x164>)
 800cb0e:	43ae      	bics	r6, r5
 800cb10:	ee10 0a10 	vmov	r0, s0
 800cb14:	ee10 3a10 	vmov	r3, s0
 800cb18:	4629      	mov	r1, r5
 800cb1a:	462a      	mov	r2, r5
 800cb1c:	d110      	bne.n	800cb40 <__ieee754_sqrt+0x3c>
 800cb1e:	ee10 2a10 	vmov	r2, s0
 800cb22:	462b      	mov	r3, r5
 800cb24:	f7f3 fd70 	bl	8000608 <__aeabi_dmul>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	4629      	mov	r1, r5
 800cb30:	f7f3 fbb4 	bl	800029c <__adddf3>
 800cb34:	4604      	mov	r4, r0
 800cb36:	460d      	mov	r5, r1
 800cb38:	ec45 4b10 	vmov	d0, r4, r5
 800cb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb40:	2d00      	cmp	r5, #0
 800cb42:	dc10      	bgt.n	800cb66 <__ieee754_sqrt+0x62>
 800cb44:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cb48:	4330      	orrs	r0, r6
 800cb4a:	d0f5      	beq.n	800cb38 <__ieee754_sqrt+0x34>
 800cb4c:	b15d      	cbz	r5, 800cb66 <__ieee754_sqrt+0x62>
 800cb4e:	ee10 2a10 	vmov	r2, s0
 800cb52:	462b      	mov	r3, r5
 800cb54:	ee10 0a10 	vmov	r0, s0
 800cb58:	f7f3 fb9e 	bl	8000298 <__aeabi_dsub>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	f7f3 fe7c 	bl	800085c <__aeabi_ddiv>
 800cb64:	e7e6      	b.n	800cb34 <__ieee754_sqrt+0x30>
 800cb66:	1509      	asrs	r1, r1, #20
 800cb68:	d076      	beq.n	800cc58 <__ieee754_sqrt+0x154>
 800cb6a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cb6e:	07ce      	lsls	r6, r1, #31
 800cb70:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800cb74:	bf5e      	ittt	pl
 800cb76:	0fda      	lsrpl	r2, r3, #31
 800cb78:	005b      	lslpl	r3, r3, #1
 800cb7a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cb7e:	0fda      	lsrs	r2, r3, #31
 800cb80:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800cb84:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cb88:	2000      	movs	r0, #0
 800cb8a:	106d      	asrs	r5, r5, #1
 800cb8c:	005b      	lsls	r3, r3, #1
 800cb8e:	f04f 0e16 	mov.w	lr, #22
 800cb92:	4684      	mov	ip, r0
 800cb94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb98:	eb0c 0401 	add.w	r4, ip, r1
 800cb9c:	4294      	cmp	r4, r2
 800cb9e:	bfde      	ittt	le
 800cba0:	1b12      	suble	r2, r2, r4
 800cba2:	eb04 0c01 	addle.w	ip, r4, r1
 800cba6:	1840      	addle	r0, r0, r1
 800cba8:	0052      	lsls	r2, r2, #1
 800cbaa:	f1be 0e01 	subs.w	lr, lr, #1
 800cbae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cbb2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cbb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cbba:	d1ed      	bne.n	800cb98 <__ieee754_sqrt+0x94>
 800cbbc:	4671      	mov	r1, lr
 800cbbe:	2720      	movs	r7, #32
 800cbc0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cbc4:	4562      	cmp	r2, ip
 800cbc6:	eb04 060e 	add.w	r6, r4, lr
 800cbca:	dc02      	bgt.n	800cbd2 <__ieee754_sqrt+0xce>
 800cbcc:	d113      	bne.n	800cbf6 <__ieee754_sqrt+0xf2>
 800cbce:	429e      	cmp	r6, r3
 800cbd0:	d811      	bhi.n	800cbf6 <__ieee754_sqrt+0xf2>
 800cbd2:	2e00      	cmp	r6, #0
 800cbd4:	eb06 0e04 	add.w	lr, r6, r4
 800cbd8:	da43      	bge.n	800cc62 <__ieee754_sqrt+0x15e>
 800cbda:	f1be 0f00 	cmp.w	lr, #0
 800cbde:	db40      	blt.n	800cc62 <__ieee754_sqrt+0x15e>
 800cbe0:	f10c 0801 	add.w	r8, ip, #1
 800cbe4:	eba2 020c 	sub.w	r2, r2, ip
 800cbe8:	429e      	cmp	r6, r3
 800cbea:	bf88      	it	hi
 800cbec:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cbf0:	1b9b      	subs	r3, r3, r6
 800cbf2:	4421      	add	r1, r4
 800cbf4:	46c4      	mov	ip, r8
 800cbf6:	0052      	lsls	r2, r2, #1
 800cbf8:	3f01      	subs	r7, #1
 800cbfa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cbfe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cc02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc06:	d1dd      	bne.n	800cbc4 <__ieee754_sqrt+0xc0>
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	d006      	beq.n	800cc1a <__ieee754_sqrt+0x116>
 800cc0c:	1c4c      	adds	r4, r1, #1
 800cc0e:	bf13      	iteet	ne
 800cc10:	3101      	addne	r1, #1
 800cc12:	3001      	addeq	r0, #1
 800cc14:	4639      	moveq	r1, r7
 800cc16:	f021 0101 	bicne.w	r1, r1, #1
 800cc1a:	1043      	asrs	r3, r0, #1
 800cc1c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cc20:	0849      	lsrs	r1, r1, #1
 800cc22:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cc26:	07c2      	lsls	r2, r0, #31
 800cc28:	bf48      	it	mi
 800cc2a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cc2e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800cc32:	460c      	mov	r4, r1
 800cc34:	463d      	mov	r5, r7
 800cc36:	e77f      	b.n	800cb38 <__ieee754_sqrt+0x34>
 800cc38:	0ada      	lsrs	r2, r3, #11
 800cc3a:	3815      	subs	r0, #21
 800cc3c:	055b      	lsls	r3, r3, #21
 800cc3e:	2a00      	cmp	r2, #0
 800cc40:	d0fa      	beq.n	800cc38 <__ieee754_sqrt+0x134>
 800cc42:	02d7      	lsls	r7, r2, #11
 800cc44:	d50a      	bpl.n	800cc5c <__ieee754_sqrt+0x158>
 800cc46:	f1c1 0420 	rsb	r4, r1, #32
 800cc4a:	fa23 f404 	lsr.w	r4, r3, r4
 800cc4e:	1e4d      	subs	r5, r1, #1
 800cc50:	408b      	lsls	r3, r1
 800cc52:	4322      	orrs	r2, r4
 800cc54:	1b41      	subs	r1, r0, r5
 800cc56:	e788      	b.n	800cb6a <__ieee754_sqrt+0x66>
 800cc58:	4608      	mov	r0, r1
 800cc5a:	e7f0      	b.n	800cc3e <__ieee754_sqrt+0x13a>
 800cc5c:	0052      	lsls	r2, r2, #1
 800cc5e:	3101      	adds	r1, #1
 800cc60:	e7ef      	b.n	800cc42 <__ieee754_sqrt+0x13e>
 800cc62:	46e0      	mov	r8, ip
 800cc64:	e7be      	b.n	800cbe4 <__ieee754_sqrt+0xe0>
 800cc66:	bf00      	nop
 800cc68:	7ff00000 	.word	0x7ff00000

0800cc6c <fabs>:
 800cc6c:	ec51 0b10 	vmov	r0, r1, d0
 800cc70:	ee10 2a10 	vmov	r2, s0
 800cc74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc78:	ec43 2b10 	vmov	d0, r2, r3
 800cc7c:	4770      	bx	lr

0800cc7e <finite>:
 800cc7e:	b082      	sub	sp, #8
 800cc80:	ed8d 0b00 	vstr	d0, [sp]
 800cc84:	9801      	ldr	r0, [sp, #4]
 800cc86:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cc8a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cc8e:	0fc0      	lsrs	r0, r0, #31
 800cc90:	b002      	add	sp, #8
 800cc92:	4770      	bx	lr
 800cc94:	0000      	movs	r0, r0
	...

0800cc98 <nan>:
 800cc98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cca0 <nan+0x8>
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	00000000 	.word	0x00000000
 800cca4:	7ff80000 	.word	0x7ff80000

0800cca8 <rint>:
 800cca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccaa:	ec51 0b10 	vmov	r0, r1, d0
 800ccae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ccb2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ccb6:	2e13      	cmp	r6, #19
 800ccb8:	ee10 4a10 	vmov	r4, s0
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ccc2:	dc58      	bgt.n	800cd76 <rint+0xce>
 800ccc4:	2e00      	cmp	r6, #0
 800ccc6:	da2b      	bge.n	800cd20 <rint+0x78>
 800ccc8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800cccc:	4302      	orrs	r2, r0
 800ccce:	d023      	beq.n	800cd18 <rint+0x70>
 800ccd0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ccd4:	4302      	orrs	r2, r0
 800ccd6:	4254      	negs	r4, r2
 800ccd8:	4314      	orrs	r4, r2
 800ccda:	0c4b      	lsrs	r3, r1, #17
 800ccdc:	0b24      	lsrs	r4, r4, #12
 800ccde:	045b      	lsls	r3, r3, #17
 800cce0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800cce4:	ea44 0103 	orr.w	r1, r4, r3
 800cce8:	4b32      	ldr	r3, [pc, #200]	; (800cdb4 <rint+0x10c>)
 800ccea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ccee:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	4630      	mov	r0, r6
 800ccf8:	4639      	mov	r1, r7
 800ccfa:	f7f3 facf 	bl	800029c <__adddf3>
 800ccfe:	e9cd 0100 	strd	r0, r1, [sp]
 800cd02:	463b      	mov	r3, r7
 800cd04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd08:	4632      	mov	r2, r6
 800cd0a:	f7f3 fac5 	bl	8000298 <__aeabi_dsub>
 800cd0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd12:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800cd16:	4639      	mov	r1, r7
 800cd18:	ec41 0b10 	vmov	d0, r0, r1
 800cd1c:	b003      	add	sp, #12
 800cd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd20:	4a25      	ldr	r2, [pc, #148]	; (800cdb8 <rint+0x110>)
 800cd22:	4132      	asrs	r2, r6
 800cd24:	ea01 0702 	and.w	r7, r1, r2
 800cd28:	4307      	orrs	r7, r0
 800cd2a:	d0f5      	beq.n	800cd18 <rint+0x70>
 800cd2c:	0851      	lsrs	r1, r2, #1
 800cd2e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800cd32:	4314      	orrs	r4, r2
 800cd34:	d00c      	beq.n	800cd50 <rint+0xa8>
 800cd36:	ea23 0201 	bic.w	r2, r3, r1
 800cd3a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cd3e:	2e13      	cmp	r6, #19
 800cd40:	fa43 f606 	asr.w	r6, r3, r6
 800cd44:	bf0c      	ite	eq
 800cd46:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800cd4a:	2400      	movne	r4, #0
 800cd4c:	ea42 0306 	orr.w	r3, r2, r6
 800cd50:	4918      	ldr	r1, [pc, #96]	; (800cdb4 <rint+0x10c>)
 800cd52:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800cd56:	4622      	mov	r2, r4
 800cd58:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	4629      	mov	r1, r5
 800cd60:	f7f3 fa9c 	bl	800029c <__adddf3>
 800cd64:	e9cd 0100 	strd	r0, r1, [sp]
 800cd68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd6c:	4622      	mov	r2, r4
 800cd6e:	462b      	mov	r3, r5
 800cd70:	f7f3 fa92 	bl	8000298 <__aeabi_dsub>
 800cd74:	e7d0      	b.n	800cd18 <rint+0x70>
 800cd76:	2e33      	cmp	r6, #51	; 0x33
 800cd78:	dd07      	ble.n	800cd8a <rint+0xe2>
 800cd7a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cd7e:	d1cb      	bne.n	800cd18 <rint+0x70>
 800cd80:	ee10 2a10 	vmov	r2, s0
 800cd84:	f7f3 fa8a 	bl	800029c <__adddf3>
 800cd88:	e7c6      	b.n	800cd18 <rint+0x70>
 800cd8a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800cd8e:	f04f 36ff 	mov.w	r6, #4294967295
 800cd92:	40d6      	lsrs	r6, r2
 800cd94:	4230      	tst	r0, r6
 800cd96:	d0bf      	beq.n	800cd18 <rint+0x70>
 800cd98:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800cd9c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800cda0:	bf1f      	itttt	ne
 800cda2:	ea24 0101 	bicne.w	r1, r4, r1
 800cda6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800cdaa:	fa44 f202 	asrne.w	r2, r4, r2
 800cdae:	ea41 0402 	orrne.w	r4, r1, r2
 800cdb2:	e7cd      	b.n	800cd50 <rint+0xa8>
 800cdb4:	0800d308 	.word	0x0800d308
 800cdb8:	000fffff 	.word	0x000fffff
 800cdbc:	00000000 	.word	0x00000000

0800cdc0 <scalbn>:
 800cdc0:	b570      	push	{r4, r5, r6, lr}
 800cdc2:	ec55 4b10 	vmov	r4, r5, d0
 800cdc6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cdca:	4606      	mov	r6, r0
 800cdcc:	462b      	mov	r3, r5
 800cdce:	b99a      	cbnz	r2, 800cdf8 <scalbn+0x38>
 800cdd0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cdd4:	4323      	orrs	r3, r4
 800cdd6:	d036      	beq.n	800ce46 <scalbn+0x86>
 800cdd8:	4b39      	ldr	r3, [pc, #228]	; (800cec0 <scalbn+0x100>)
 800cdda:	4629      	mov	r1, r5
 800cddc:	ee10 0a10 	vmov	r0, s0
 800cde0:	2200      	movs	r2, #0
 800cde2:	f7f3 fc11 	bl	8000608 <__aeabi_dmul>
 800cde6:	4b37      	ldr	r3, [pc, #220]	; (800cec4 <scalbn+0x104>)
 800cde8:	429e      	cmp	r6, r3
 800cdea:	4604      	mov	r4, r0
 800cdec:	460d      	mov	r5, r1
 800cdee:	da10      	bge.n	800ce12 <scalbn+0x52>
 800cdf0:	a32b      	add	r3, pc, #172	; (adr r3, 800cea0 <scalbn+0xe0>)
 800cdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf6:	e03a      	b.n	800ce6e <scalbn+0xae>
 800cdf8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cdfc:	428a      	cmp	r2, r1
 800cdfe:	d10c      	bne.n	800ce1a <scalbn+0x5a>
 800ce00:	ee10 2a10 	vmov	r2, s0
 800ce04:	4620      	mov	r0, r4
 800ce06:	4629      	mov	r1, r5
 800ce08:	f7f3 fa48 	bl	800029c <__adddf3>
 800ce0c:	4604      	mov	r4, r0
 800ce0e:	460d      	mov	r5, r1
 800ce10:	e019      	b.n	800ce46 <scalbn+0x86>
 800ce12:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce16:	460b      	mov	r3, r1
 800ce18:	3a36      	subs	r2, #54	; 0x36
 800ce1a:	4432      	add	r2, r6
 800ce1c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ce20:	428a      	cmp	r2, r1
 800ce22:	dd08      	ble.n	800ce36 <scalbn+0x76>
 800ce24:	2d00      	cmp	r5, #0
 800ce26:	a120      	add	r1, pc, #128	; (adr r1, 800cea8 <scalbn+0xe8>)
 800ce28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce2c:	da1c      	bge.n	800ce68 <scalbn+0xa8>
 800ce2e:	a120      	add	r1, pc, #128	; (adr r1, 800ceb0 <scalbn+0xf0>)
 800ce30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce34:	e018      	b.n	800ce68 <scalbn+0xa8>
 800ce36:	2a00      	cmp	r2, #0
 800ce38:	dd08      	ble.n	800ce4c <scalbn+0x8c>
 800ce3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ce46:	ec45 4b10 	vmov	d0, r4, r5
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}
 800ce4c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ce50:	da19      	bge.n	800ce86 <scalbn+0xc6>
 800ce52:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ce56:	429e      	cmp	r6, r3
 800ce58:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ce5c:	dd0a      	ble.n	800ce74 <scalbn+0xb4>
 800ce5e:	a112      	add	r1, pc, #72	; (adr r1, 800cea8 <scalbn+0xe8>)
 800ce60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1e2      	bne.n	800ce2e <scalbn+0x6e>
 800ce68:	a30f      	add	r3, pc, #60	; (adr r3, 800cea8 <scalbn+0xe8>)
 800ce6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6e:	f7f3 fbcb 	bl	8000608 <__aeabi_dmul>
 800ce72:	e7cb      	b.n	800ce0c <scalbn+0x4c>
 800ce74:	a10a      	add	r1, pc, #40	; (adr r1, 800cea0 <scalbn+0xe0>)
 800ce76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d0b8      	beq.n	800cdf0 <scalbn+0x30>
 800ce7e:	a10e      	add	r1, pc, #56	; (adr r1, 800ceb8 <scalbn+0xf8>)
 800ce80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce84:	e7b4      	b.n	800cdf0 <scalbn+0x30>
 800ce86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce8a:	3236      	adds	r2, #54	; 0x36
 800ce8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ce94:	4620      	mov	r0, r4
 800ce96:	4b0c      	ldr	r3, [pc, #48]	; (800cec8 <scalbn+0x108>)
 800ce98:	2200      	movs	r2, #0
 800ce9a:	e7e8      	b.n	800ce6e <scalbn+0xae>
 800ce9c:	f3af 8000 	nop.w
 800cea0:	c2f8f359 	.word	0xc2f8f359
 800cea4:	01a56e1f 	.word	0x01a56e1f
 800cea8:	8800759c 	.word	0x8800759c
 800ceac:	7e37e43c 	.word	0x7e37e43c
 800ceb0:	8800759c 	.word	0x8800759c
 800ceb4:	fe37e43c 	.word	0xfe37e43c
 800ceb8:	c2f8f359 	.word	0xc2f8f359
 800cebc:	81a56e1f 	.word	0x81a56e1f
 800cec0:	43500000 	.word	0x43500000
 800cec4:	ffff3cb0 	.word	0xffff3cb0
 800cec8:	3c900000 	.word	0x3c900000
 800cecc:	00000000 	.word	0x00000000

0800ced0 <__ieee754_log>:
 800ced0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced4:	ec51 0b10 	vmov	r0, r1, d0
 800ced8:	ed2d 8b04 	vpush	{d8-d9}
 800cedc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800cee0:	b083      	sub	sp, #12
 800cee2:	460d      	mov	r5, r1
 800cee4:	da29      	bge.n	800cf3a <__ieee754_log+0x6a>
 800cee6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ceea:	4303      	orrs	r3, r0
 800ceec:	ee10 2a10 	vmov	r2, s0
 800cef0:	d10c      	bne.n	800cf0c <__ieee754_log+0x3c>
 800cef2:	49cf      	ldr	r1, [pc, #828]	; (800d230 <__ieee754_log+0x360>)
 800cef4:	2200      	movs	r2, #0
 800cef6:	2300      	movs	r3, #0
 800cef8:	2000      	movs	r0, #0
 800cefa:	f7f3 fcaf 	bl	800085c <__aeabi_ddiv>
 800cefe:	ec41 0b10 	vmov	d0, r0, r1
 800cf02:	b003      	add	sp, #12
 800cf04:	ecbd 8b04 	vpop	{d8-d9}
 800cf08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf0c:	2900      	cmp	r1, #0
 800cf0e:	da05      	bge.n	800cf1c <__ieee754_log+0x4c>
 800cf10:	460b      	mov	r3, r1
 800cf12:	f7f3 f9c1 	bl	8000298 <__aeabi_dsub>
 800cf16:	2200      	movs	r2, #0
 800cf18:	2300      	movs	r3, #0
 800cf1a:	e7ee      	b.n	800cefa <__ieee754_log+0x2a>
 800cf1c:	4bc5      	ldr	r3, [pc, #788]	; (800d234 <__ieee754_log+0x364>)
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f7f3 fb72 	bl	8000608 <__aeabi_dmul>
 800cf24:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800cf28:	460d      	mov	r5, r1
 800cf2a:	4ac3      	ldr	r2, [pc, #780]	; (800d238 <__ieee754_log+0x368>)
 800cf2c:	4295      	cmp	r5, r2
 800cf2e:	dd06      	ble.n	800cf3e <__ieee754_log+0x6e>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	f7f3 f9b2 	bl	800029c <__adddf3>
 800cf38:	e7e1      	b.n	800cefe <__ieee754_log+0x2e>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	e7f5      	b.n	800cf2a <__ieee754_log+0x5a>
 800cf3e:	152c      	asrs	r4, r5, #20
 800cf40:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cf44:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cf48:	441c      	add	r4, r3
 800cf4a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800cf4e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800cf52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf56:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800cf5a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800cf5e:	ea42 0105 	orr.w	r1, r2, r5
 800cf62:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800cf66:	2200      	movs	r2, #0
 800cf68:	4bb4      	ldr	r3, [pc, #720]	; (800d23c <__ieee754_log+0x36c>)
 800cf6a:	f7f3 f995 	bl	8000298 <__aeabi_dsub>
 800cf6e:	1cab      	adds	r3, r5, #2
 800cf70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf74:	2b02      	cmp	r3, #2
 800cf76:	4682      	mov	sl, r0
 800cf78:	468b      	mov	fp, r1
 800cf7a:	f04f 0200 	mov.w	r2, #0
 800cf7e:	dc53      	bgt.n	800d028 <__ieee754_log+0x158>
 800cf80:	2300      	movs	r3, #0
 800cf82:	f7f3 fda9 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf86:	b1d0      	cbz	r0, 800cfbe <__ieee754_log+0xee>
 800cf88:	2c00      	cmp	r4, #0
 800cf8a:	f000 8122 	beq.w	800d1d2 <__ieee754_log+0x302>
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f7f3 fad0 	bl	8000534 <__aeabi_i2d>
 800cf94:	a390      	add	r3, pc, #576	; (adr r3, 800d1d8 <__ieee754_log+0x308>)
 800cf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9a:	4606      	mov	r6, r0
 800cf9c:	460f      	mov	r7, r1
 800cf9e:	f7f3 fb33 	bl	8000608 <__aeabi_dmul>
 800cfa2:	a38f      	add	r3, pc, #572	; (adr r3, 800d1e0 <__ieee754_log+0x310>)
 800cfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa8:	4604      	mov	r4, r0
 800cfaa:	460d      	mov	r5, r1
 800cfac:	4630      	mov	r0, r6
 800cfae:	4639      	mov	r1, r7
 800cfb0:	f7f3 fb2a 	bl	8000608 <__aeabi_dmul>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	4620      	mov	r0, r4
 800cfba:	4629      	mov	r1, r5
 800cfbc:	e7ba      	b.n	800cf34 <__ieee754_log+0x64>
 800cfbe:	a38a      	add	r3, pc, #552	; (adr r3, 800d1e8 <__ieee754_log+0x318>)
 800cfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc4:	4650      	mov	r0, sl
 800cfc6:	4659      	mov	r1, fp
 800cfc8:	f7f3 fb1e 	bl	8000608 <__aeabi_dmul>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	460b      	mov	r3, r1
 800cfd0:	2000      	movs	r0, #0
 800cfd2:	499b      	ldr	r1, [pc, #620]	; (800d240 <__ieee754_log+0x370>)
 800cfd4:	f7f3 f960 	bl	8000298 <__aeabi_dsub>
 800cfd8:	4652      	mov	r2, sl
 800cfda:	4606      	mov	r6, r0
 800cfdc:	460f      	mov	r7, r1
 800cfde:	465b      	mov	r3, fp
 800cfe0:	4650      	mov	r0, sl
 800cfe2:	4659      	mov	r1, fp
 800cfe4:	f7f3 fb10 	bl	8000608 <__aeabi_dmul>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	460b      	mov	r3, r1
 800cfec:	4630      	mov	r0, r6
 800cfee:	4639      	mov	r1, r7
 800cff0:	f7f3 fb0a 	bl	8000608 <__aeabi_dmul>
 800cff4:	4606      	mov	r6, r0
 800cff6:	460f      	mov	r7, r1
 800cff8:	b914      	cbnz	r4, 800d000 <__ieee754_log+0x130>
 800cffa:	4632      	mov	r2, r6
 800cffc:	463b      	mov	r3, r7
 800cffe:	e0a2      	b.n	800d146 <__ieee754_log+0x276>
 800d000:	4620      	mov	r0, r4
 800d002:	f7f3 fa97 	bl	8000534 <__aeabi_i2d>
 800d006:	a374      	add	r3, pc, #464	; (adr r3, 800d1d8 <__ieee754_log+0x308>)
 800d008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00c:	4680      	mov	r8, r0
 800d00e:	4689      	mov	r9, r1
 800d010:	f7f3 fafa 	bl	8000608 <__aeabi_dmul>
 800d014:	a372      	add	r3, pc, #456	; (adr r3, 800d1e0 <__ieee754_log+0x310>)
 800d016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01a:	4604      	mov	r4, r0
 800d01c:	460d      	mov	r5, r1
 800d01e:	4640      	mov	r0, r8
 800d020:	4649      	mov	r1, r9
 800d022:	f7f3 faf1 	bl	8000608 <__aeabi_dmul>
 800d026:	e0a7      	b.n	800d178 <__ieee754_log+0x2a8>
 800d028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d02c:	f7f3 f936 	bl	800029c <__adddf3>
 800d030:	4602      	mov	r2, r0
 800d032:	460b      	mov	r3, r1
 800d034:	4650      	mov	r0, sl
 800d036:	4659      	mov	r1, fp
 800d038:	f7f3 fc10 	bl	800085c <__aeabi_ddiv>
 800d03c:	ec41 0b18 	vmov	d8, r0, r1
 800d040:	4620      	mov	r0, r4
 800d042:	f7f3 fa77 	bl	8000534 <__aeabi_i2d>
 800d046:	ec53 2b18 	vmov	r2, r3, d8
 800d04a:	ec41 0b19 	vmov	d9, r0, r1
 800d04e:	ec51 0b18 	vmov	r0, r1, d8
 800d052:	f7f3 fad9 	bl	8000608 <__aeabi_dmul>
 800d056:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800d05a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800d05e:	9301      	str	r3, [sp, #4]
 800d060:	4602      	mov	r2, r0
 800d062:	460b      	mov	r3, r1
 800d064:	4680      	mov	r8, r0
 800d066:	4689      	mov	r9, r1
 800d068:	f7f3 face 	bl	8000608 <__aeabi_dmul>
 800d06c:	a360      	add	r3, pc, #384	; (adr r3, 800d1f0 <__ieee754_log+0x320>)
 800d06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d072:	4606      	mov	r6, r0
 800d074:	460f      	mov	r7, r1
 800d076:	f7f3 fac7 	bl	8000608 <__aeabi_dmul>
 800d07a:	a35f      	add	r3, pc, #380	; (adr r3, 800d1f8 <__ieee754_log+0x328>)
 800d07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d080:	f7f3 f90c 	bl	800029c <__adddf3>
 800d084:	4632      	mov	r2, r6
 800d086:	463b      	mov	r3, r7
 800d088:	f7f3 fabe 	bl	8000608 <__aeabi_dmul>
 800d08c:	a35c      	add	r3, pc, #368	; (adr r3, 800d200 <__ieee754_log+0x330>)
 800d08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d092:	f7f3 f903 	bl	800029c <__adddf3>
 800d096:	4632      	mov	r2, r6
 800d098:	463b      	mov	r3, r7
 800d09a:	f7f3 fab5 	bl	8000608 <__aeabi_dmul>
 800d09e:	a35a      	add	r3, pc, #360	; (adr r3, 800d208 <__ieee754_log+0x338>)
 800d0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a4:	f7f3 f8fa 	bl	800029c <__adddf3>
 800d0a8:	4642      	mov	r2, r8
 800d0aa:	464b      	mov	r3, r9
 800d0ac:	f7f3 faac 	bl	8000608 <__aeabi_dmul>
 800d0b0:	a357      	add	r3, pc, #348	; (adr r3, 800d210 <__ieee754_log+0x340>)
 800d0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b6:	4680      	mov	r8, r0
 800d0b8:	4689      	mov	r9, r1
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	4639      	mov	r1, r7
 800d0be:	f7f3 faa3 	bl	8000608 <__aeabi_dmul>
 800d0c2:	a355      	add	r3, pc, #340	; (adr r3, 800d218 <__ieee754_log+0x348>)
 800d0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c8:	f7f3 f8e8 	bl	800029c <__adddf3>
 800d0cc:	4632      	mov	r2, r6
 800d0ce:	463b      	mov	r3, r7
 800d0d0:	f7f3 fa9a 	bl	8000608 <__aeabi_dmul>
 800d0d4:	a352      	add	r3, pc, #328	; (adr r3, 800d220 <__ieee754_log+0x350>)
 800d0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0da:	f7f3 f8df 	bl	800029c <__adddf3>
 800d0de:	4632      	mov	r2, r6
 800d0e0:	463b      	mov	r3, r7
 800d0e2:	f7f3 fa91 	bl	8000608 <__aeabi_dmul>
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	4649      	mov	r1, r9
 800d0ec:	4640      	mov	r0, r8
 800d0ee:	f7f3 f8d5 	bl	800029c <__adddf3>
 800d0f2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800d0f6:	9b01      	ldr	r3, [sp, #4]
 800d0f8:	3551      	adds	r5, #81	; 0x51
 800d0fa:	431d      	orrs	r5, r3
 800d0fc:	2d00      	cmp	r5, #0
 800d0fe:	4680      	mov	r8, r0
 800d100:	4689      	mov	r9, r1
 800d102:	dd48      	ble.n	800d196 <__ieee754_log+0x2c6>
 800d104:	4b4e      	ldr	r3, [pc, #312]	; (800d240 <__ieee754_log+0x370>)
 800d106:	2200      	movs	r2, #0
 800d108:	4650      	mov	r0, sl
 800d10a:	4659      	mov	r1, fp
 800d10c:	f7f3 fa7c 	bl	8000608 <__aeabi_dmul>
 800d110:	4652      	mov	r2, sl
 800d112:	465b      	mov	r3, fp
 800d114:	f7f3 fa78 	bl	8000608 <__aeabi_dmul>
 800d118:	4602      	mov	r2, r0
 800d11a:	460b      	mov	r3, r1
 800d11c:	4606      	mov	r6, r0
 800d11e:	460f      	mov	r7, r1
 800d120:	4640      	mov	r0, r8
 800d122:	4649      	mov	r1, r9
 800d124:	f7f3 f8ba 	bl	800029c <__adddf3>
 800d128:	ec53 2b18 	vmov	r2, r3, d8
 800d12c:	f7f3 fa6c 	bl	8000608 <__aeabi_dmul>
 800d130:	4680      	mov	r8, r0
 800d132:	4689      	mov	r9, r1
 800d134:	b964      	cbnz	r4, 800d150 <__ieee754_log+0x280>
 800d136:	4602      	mov	r2, r0
 800d138:	460b      	mov	r3, r1
 800d13a:	4630      	mov	r0, r6
 800d13c:	4639      	mov	r1, r7
 800d13e:	f7f3 f8ab 	bl	8000298 <__aeabi_dsub>
 800d142:	4602      	mov	r2, r0
 800d144:	460b      	mov	r3, r1
 800d146:	4650      	mov	r0, sl
 800d148:	4659      	mov	r1, fp
 800d14a:	f7f3 f8a5 	bl	8000298 <__aeabi_dsub>
 800d14e:	e6d6      	b.n	800cefe <__ieee754_log+0x2e>
 800d150:	a321      	add	r3, pc, #132	; (adr r3, 800d1d8 <__ieee754_log+0x308>)
 800d152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d156:	ec51 0b19 	vmov	r0, r1, d9
 800d15a:	f7f3 fa55 	bl	8000608 <__aeabi_dmul>
 800d15e:	a320      	add	r3, pc, #128	; (adr r3, 800d1e0 <__ieee754_log+0x310>)
 800d160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d164:	4604      	mov	r4, r0
 800d166:	460d      	mov	r5, r1
 800d168:	ec51 0b19 	vmov	r0, r1, d9
 800d16c:	f7f3 fa4c 	bl	8000608 <__aeabi_dmul>
 800d170:	4642      	mov	r2, r8
 800d172:	464b      	mov	r3, r9
 800d174:	f7f3 f892 	bl	800029c <__adddf3>
 800d178:	4602      	mov	r2, r0
 800d17a:	460b      	mov	r3, r1
 800d17c:	4630      	mov	r0, r6
 800d17e:	4639      	mov	r1, r7
 800d180:	f7f3 f88a 	bl	8000298 <__aeabi_dsub>
 800d184:	4652      	mov	r2, sl
 800d186:	465b      	mov	r3, fp
 800d188:	f7f3 f886 	bl	8000298 <__aeabi_dsub>
 800d18c:	4602      	mov	r2, r0
 800d18e:	460b      	mov	r3, r1
 800d190:	4620      	mov	r0, r4
 800d192:	4629      	mov	r1, r5
 800d194:	e7d9      	b.n	800d14a <__ieee754_log+0x27a>
 800d196:	4602      	mov	r2, r0
 800d198:	460b      	mov	r3, r1
 800d19a:	4650      	mov	r0, sl
 800d19c:	4659      	mov	r1, fp
 800d19e:	f7f3 f87b 	bl	8000298 <__aeabi_dsub>
 800d1a2:	ec53 2b18 	vmov	r2, r3, d8
 800d1a6:	f7f3 fa2f 	bl	8000608 <__aeabi_dmul>
 800d1aa:	4606      	mov	r6, r0
 800d1ac:	460f      	mov	r7, r1
 800d1ae:	2c00      	cmp	r4, #0
 800d1b0:	f43f af23 	beq.w	800cffa <__ieee754_log+0x12a>
 800d1b4:	a308      	add	r3, pc, #32	; (adr r3, 800d1d8 <__ieee754_log+0x308>)
 800d1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ba:	ec51 0b19 	vmov	r0, r1, d9
 800d1be:	f7f3 fa23 	bl	8000608 <__aeabi_dmul>
 800d1c2:	a307      	add	r3, pc, #28	; (adr r3, 800d1e0 <__ieee754_log+0x310>)
 800d1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c8:	4604      	mov	r4, r0
 800d1ca:	460d      	mov	r5, r1
 800d1cc:	ec51 0b19 	vmov	r0, r1, d9
 800d1d0:	e727      	b.n	800d022 <__ieee754_log+0x152>
 800d1d2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800d228 <__ieee754_log+0x358>
 800d1d6:	e694      	b.n	800cf02 <__ieee754_log+0x32>
 800d1d8:	fee00000 	.word	0xfee00000
 800d1dc:	3fe62e42 	.word	0x3fe62e42
 800d1e0:	35793c76 	.word	0x35793c76
 800d1e4:	3dea39ef 	.word	0x3dea39ef
 800d1e8:	55555555 	.word	0x55555555
 800d1ec:	3fd55555 	.word	0x3fd55555
 800d1f0:	df3e5244 	.word	0xdf3e5244
 800d1f4:	3fc2f112 	.word	0x3fc2f112
 800d1f8:	96cb03de 	.word	0x96cb03de
 800d1fc:	3fc74664 	.word	0x3fc74664
 800d200:	94229359 	.word	0x94229359
 800d204:	3fd24924 	.word	0x3fd24924
 800d208:	55555593 	.word	0x55555593
 800d20c:	3fe55555 	.word	0x3fe55555
 800d210:	d078c69f 	.word	0xd078c69f
 800d214:	3fc39a09 	.word	0x3fc39a09
 800d218:	1d8e78af 	.word	0x1d8e78af
 800d21c:	3fcc71c5 	.word	0x3fcc71c5
 800d220:	9997fa04 	.word	0x9997fa04
 800d224:	3fd99999 	.word	0x3fd99999
	...
 800d230:	c3500000 	.word	0xc3500000
 800d234:	43500000 	.word	0x43500000
 800d238:	7fefffff 	.word	0x7fefffff
 800d23c:	3ff00000 	.word	0x3ff00000
 800d240:	3fe00000 	.word	0x3fe00000

0800d244 <_init>:
 800d244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d246:	bf00      	nop
 800d248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d24a:	bc08      	pop	{r3}
 800d24c:	469e      	mov	lr, r3
 800d24e:	4770      	bx	lr

0800d250 <_fini>:
 800d250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d252:	bf00      	nop
 800d254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d256:	bc08      	pop	{r3}
 800d258:	469e      	mov	lr, r3
 800d25a:	4770      	bx	lr
