
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000998c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08009b2c  08009b2c  00019b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b9c  08009b9c  000204bc  2**0
                  CONTENTS
  4 .ARM          00000008  08009b9c  08009b9c  00019b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ba4  08009ba4  000204bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ba4  08009ba4  00019ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ba8  08009ba8  00019ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004bc  20000000  08009bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200004bc  0800a068  000204bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  0800a068  000206a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc98  00000000  00000000  000204ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029cd  00000000  00000000  0003c184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  0003eb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  0003ff20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018749  00000000  00000000  00041228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167a0  00000000  00000000  00059971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000979e6  00000000  00000000  00070111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107af7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059c8  00000000  00000000  00107b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004bc 	.word	0x200004bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009b14 	.word	0x08009b14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004c0 	.word	0x200004c0
 80001dc:	08009b14 	.word	0x08009b14

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	RangingConfig_e RangingConfig = LONG_RANGE;
 800058e:	2300      	movs	r3, #0
 8000590:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f005 fe01 	bl	8006198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f877 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f9ab 	bl	80008f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059e:	f000 f97f 	bl	80008a0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005a2:	f000 f907 	bl	80007b4 <MX_TIM2_Init>
  MX_I2C1_Init();
 80005a6:	f000 f8d7 	bl	8000758 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  XNUCLEO53L0A1_hi2c = hi2c1;
 80005aa:	4a2d      	ldr	r2, [pc, #180]	; (8000660 <main+0xd8>)
 80005ac:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <main+0xdc>)
 80005ae:	4610      	mov	r0, r2
 80005b0:	4619      	mov	r1, r3
 80005b2:	2354      	movs	r3, #84	; 0x54
 80005b4:	461a      	mov	r2, r3
 80005b6:	f008 fe6f 	bl	8009298 <memcpy>
    	  ResetAndDetectSensor(0);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f005 fdce 	bl	800615c <ResetAndDetectSensor>
    /* Reset and Detect all sensors */
    	  	  ResetAndDetectSensor(0);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f005 fdcb 	bl	800615c <ResetAndDetectSensor>
    	  SetupSingleShot(RangingConfig);//DISTANCE
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f005 fcab 	bl	8005f24 <SetupSingleShot>




  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1); //PWM
 80005ce:	2100      	movs	r1, #0
 80005d0:	4825      	ldr	r0, [pc, #148]	; (8000668 <main+0xe0>)
 80005d2:	f007 fdad 	bl	8008130 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  while(CH1_DC < 65535)
 80005d6:	e00c      	b.n	80005f2 <main+0x6a>
	 	          {
	 	              TIM2->CCR1 = CH1_DC;
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <main+0xe4>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005e0:	635a      	str	r2, [r3, #52]	; 0x34
	 	              CH1_DC += 70;
 80005e2:	4b22      	ldr	r3, [pc, #136]	; (800066c <main+0xe4>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3346      	adds	r3, #70	; 0x46
 80005e8:	4a20      	ldr	r2, [pc, #128]	; (800066c <main+0xe4>)
 80005ea:	6013      	str	r3, [r2, #0]
	 	              HAL_Delay(1);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f005 fe45 	bl	800627c <HAL_Delay>
	  while(CH1_DC < 65535)
 80005f2:	4b1e      	ldr	r3, [pc, #120]	; (800066c <main+0xe4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80005fa:	4293      	cmp	r3, r2
 80005fc:	ddec      	ble.n	80005d8 <main+0x50>
	 	          }
	 	          while(CH1_DC > 0)
 80005fe:	e00c      	b.n	800061a <main+0x92>
	 	          {
	 	              TIM2->CCR1 = CH1_DC;
 8000600:	4b1a      	ldr	r3, [pc, #104]	; (800066c <main+0xe4>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
	 	              CH1_DC -= 70;
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <main+0xe4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	3b46      	subs	r3, #70	; 0x46
 8000610:	4a16      	ldr	r2, [pc, #88]	; (800066c <main+0xe4>)
 8000612:	6013      	str	r3, [r2, #0]
	 	              HAL_Delay(1);				//PWM
 8000614:	2001      	movs	r0, #1
 8000616:	f005 fe31 	bl	800627c <HAL_Delay>
	 	          while(CH1_DC > 0)
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <main+0xe4>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	dcee      	bgt.n	8000600 <main+0x78>
	 	          }
    /* USER CODE BEGIN 3 */
	 	         /* only one sensor */
	 	         	  /* Call All-In-One blocking API function */
	 	         	  	  status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[0],// DISTANCE
 8000622:	4913      	ldr	r1, [pc, #76]	; (8000670 <main+0xe8>)
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <main+0xec>)
 8000626:	f001 fe4b 	bl	80022c0 <VL53L0X_PerformSingleRangingMeasurement>
 800062a:	4603      	mov	r3, r0
 800062c:	461a      	mov	r2, r3
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <main+0xf0>)
 8000630:	601a      	str	r2, [r3, #0]
	 	         	  			  	  	  	  	  	  	  	  	  &RangingMeasurementData);
	 	         	  	  position_courante=RangingMeasurementData.RangeMilliMeter;
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <main+0xe8>)
 8000634:	891a      	ldrh	r2, [r3, #8]
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <main+0xf4>)
 8000638:	801a      	strh	r2, [r3, #0]



	 	         	  	sprintf(msg3, "%hu\r\n",position_courante);
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <main+0xf4>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	490f      	ldr	r1, [pc, #60]	; (8000680 <main+0xf8>)
 8000642:	4810      	ldr	r0, [pc, #64]	; (8000684 <main+0xfc>)
 8000644:	f008 fe3e 	bl	80092c4 <siprintf>


	 	         	  	  if( status ==0 ){
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <main+0xf0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <main+0xce>
	 	         	  		  trace_printf("\r\n%d", position_courante);




	 	         	  		F411_SetDisplayString(msg3);
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <main+0xfc>)
 8000652:	f005 fbab 	bl	8005dac <F411_SetDisplayString>


	 	         	  // Sensor_SetNewRange(&VL53L0XDevs[0],&RangingMeasurementData);
	 	         	  }
	 	         	  	HAL_Delay(1000);
 8000656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065a:	f005 fe0f 	bl	800627c <HAL_Delay>
	  while(CH1_DC < 65535)
 800065e:	e7c8      	b.n	80005f2 <main+0x6a>
 8000660:	2000061c 	.word	0x2000061c
 8000664:	200004f8 	.word	0x200004f8
 8000668:	2000054c 	.word	0x2000054c
 800066c:	200004e0 	.word	0x200004e0
 8000670:	20000670 	.word	0x20000670
 8000674:	200002c0 	.word	0x200002c0
 8000678:	200004d8 	.word	0x200004d8
 800067c:	200004dc 	.word	0x200004dc
 8000680:	08009b2c 	.word	0x08009b2c
 8000684:	200004f4 	.word	0x200004f4

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f008 fe0c 	bl	80092b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b27      	ldr	r3, [pc, #156]	; (8000750 <SystemClock_Config+0xc8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a26      	ldr	r2, [pc, #152]	; (8000750 <SystemClock_Config+0xc8>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <SystemClock_Config+0xc8>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b21      	ldr	r3, [pc, #132]	; (8000754 <SystemClock_Config+0xcc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a20      	ldr	r2, [pc, #128]	; (8000754 <SystemClock_Config+0xcc>)
 80006d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <SystemClock_Config+0xcc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f8:	2308      	movs	r3, #8
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006fc:	2348      	movs	r3, #72	; 0x48
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f006 fff3 	bl	80076f8 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000718:	f000 f95c 	bl	80009d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2102      	movs	r1, #2
 8000738:	4618      	mov	r0, r3
 800073a:	f007 fa55 	bl	8007be8 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000744:	f000 f946 	bl	80009d4 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3750      	adds	r7, #80	; 0x50
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2C1_Init+0x50>)
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_I2C1_Init+0x54>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_I2C1_Init+0x58>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000796:	f006 f819 	bl	80067cc <HAL_I2C_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a0:	f000 f918 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200004f8 	.word	0x200004f8
 80007ac:	40005400 	.word	0x40005400
 80007b0:	000186a0 	.word	0x000186a0

080007b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08e      	sub	sp, #56	; 0x38
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
 80007e0:	615a      	str	r2, [r3, #20]
 80007e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e4:	4b2d      	ldr	r3, [pc, #180]	; (800089c <MX_TIM2_Init+0xe8>)
 80007e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007ec:	4b2b      	ldr	r3, [pc, #172]	; (800089c <MX_TIM2_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	4b2a      	ldr	r3, [pc, #168]	; (800089c <MX_TIM2_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007f8:	4b28      	ldr	r3, [pc, #160]	; (800089c <MX_TIM2_Init+0xe8>)
 80007fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b26      	ldr	r3, [pc, #152]	; (800089c <MX_TIM2_Init+0xe8>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <MX_TIM2_Init+0xe8>)
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800080c:	4823      	ldr	r0, [pc, #140]	; (800089c <MX_TIM2_Init+0xe8>)
 800080e:	f007 fbe7 	bl	8007fe0 <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000818:	f000 f8dc 	bl	80009d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000826:	4619      	mov	r1, r3
 8000828:	481c      	ldr	r0, [pc, #112]	; (800089c <MX_TIM2_Init+0xe8>)
 800082a:	f007 fdf3 	bl	8008414 <HAL_TIM_ConfigClockSource>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000834:	f000 f8ce 	bl	80009d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000838:	4818      	ldr	r0, [pc, #96]	; (800089c <MX_TIM2_Init+0xe8>)
 800083a:	f007 fc20 	bl	800807e <HAL_TIM_PWM_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000844:	f000 f8c6 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	4619      	mov	r1, r3
 8000856:	4811      	ldr	r0, [pc, #68]	; (800089c <MX_TIM2_Init+0xe8>)
 8000858:	f008 f970 	bl	8008b3c <HAL_TIMEx_MasterConfigSynchronization>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000862:	f000 f8b7 	bl	80009d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000866:	2360      	movs	r3, #96	; 0x60
 8000868:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2200      	movs	r2, #0
 800087a:	4619      	mov	r1, r3
 800087c:	4807      	ldr	r0, [pc, #28]	; (800089c <MX_TIM2_Init+0xe8>)
 800087e:	f007 fd07 	bl	8008290 <HAL_TIM_PWM_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000888:	f000 f8a4 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800088c:	4803      	ldr	r0, [pc, #12]	; (800089c <MX_TIM2_Init+0xe8>)
 800088e:	f000 f937 	bl	8000b00 <HAL_TIM_MspPostInit>

}
 8000892:	bf00      	nop
 8000894:	3738      	adds	r7, #56	; 0x38
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000054c 	.word	0x2000054c

080008a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <MX_USART2_UART_Init+0x50>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008d8:	f008 f99e 	bl	8008c18 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008e2:	f000 f877 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000594 	.word	0x20000594
 80008f0:	40004400 	.word	0x40004400

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <MX_GPIO_Init+0xd4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a2d      	ldr	r2, [pc, #180]	; (80009c8 <MX_GPIO_Init+0xd4>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <MX_GPIO_Init+0xd4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <MX_GPIO_Init+0xd4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a26      	ldr	r2, [pc, #152]	; (80009c8 <MX_GPIO_Init+0xd4>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_GPIO_Init+0xd4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <MX_GPIO_Init+0xd4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a1f      	ldr	r2, [pc, #124]	; (80009c8 <MX_GPIO_Init+0xd4>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_GPIO_Init+0xd4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_GPIO_Init+0xd4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a18      	ldr	r2, [pc, #96]	; (80009c8 <MX_GPIO_Init+0xd4>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_GPIO_Init+0xd4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|RESET_VL53_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000980:	4812      	ldr	r0, [pc, #72]	; (80009cc <MX_GPIO_Init+0xd8>)
 8000982:	f005 ff09 	bl	8006798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800098c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_GPIO_Init+0xdc>)
 800099e:	f005 fd77 	bl	8006490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 RESET_VL53_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|RESET_VL53_Pin;
 80009a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0xd8>)
 80009bc:	f005 fd68 	bl	8006490 <HAL_GPIO_Init>

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020800 	.word	0x40020800

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a1e:	2007      	movs	r0, #7
 8000a20:	f005 fd02 	bl	8006428 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <HAL_I2C_MspInit+0x84>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d12c      	bne.n	8000aac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a74:	2312      	movs	r3, #18
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a80:	2304      	movs	r3, #4
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480c      	ldr	r0, [pc, #48]	; (8000abc <HAL_I2C_MspInit+0x8c>)
 8000a8c:	f005 fd00 	bl	8006490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400

08000ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad0:	d10d      	bne.n	8000aee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_TIM_Base_MspInit+0x3c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_TIM_Base_MspInit+0x3c>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_TIM_Base_MspInit+0x3c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b20:	d11d      	bne.n	8000b5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_TIM_MspPostInit+0x68>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <HAL_TIM_MspPostInit+0x68>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_TIM_MspPostInit+0x68>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b3e:	2320      	movs	r3, #32
 8000b40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4619      	mov	r1, r3
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <HAL_TIM_MspPostInit+0x6c>)
 8000b5a:	f005 fc99 	bl	8006490 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <HAL_UART_MspInit+0x84>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d12b      	bne.n	8000bea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <HAL_UART_MspInit+0x8c>)
 8000be6:	f005 fc53 	bl	8006490 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	; 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40004400 	.word	0x40004400
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020000 	.word	0x40020000

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <MemManage_Handler+0x4>

08000c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4c:	f005 faf6 	bl	800623c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f008 fade 	bl	8009244 <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20020000 	.word	0x20020000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	200004e4 	.word	0x200004e4
 8000cbc:	200006a0 	.word	0x200006a0

08000cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cea:	490e      	ldr	r1, [pc, #56]	; (8000d24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d00:	4c0b      	ldr	r4, [pc, #44]	; (8000d30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d0e:	f7ff ffd7 	bl	8000cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d12:	f008 fa9d 	bl	8009250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d16:	f7ff fc37 	bl	8000588 <main>
  bx  lr    
 8000d1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	200004bc 	.word	0x200004bc
  ldr r2, =_sidata
 8000d28:	08009bac 	.word	0x08009bac
  ldr r2, =_sbss
 8000d2c:	200004bc 	.word	0x200004bc
  ldr r4, =_ebss
 8000d30:	200006a0 	.word	0x200006a0

08000d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC_IRQHandler>

08000d36 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b084      	sub	sp, #16
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8000d44:	6839      	ldr	r1, [r7, #0]
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f001 fcbb 	bl	80026c2 <VL53L0X_get_offset_calibration_data_micro_meter>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8000d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	085b      	lsrs	r3, r3, #1
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	218a      	movs	r1, #138	; 0x8a
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f004 feb4 	bl	8005ae4 <VL53L0X_WrByte>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8000d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8000d8c:	b5b0      	push	{r4, r5, r7, lr}
 8000d8e:	b096      	sub	sp, #88	; 0x58
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8000d9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d107      	bne.n	8000db2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2188      	movs	r1, #136	; 0x88
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f004 fe9c 	bl	8005ae4 <VL53L0X_WrByte>
 8000dac:	4603      	mov	r3, r0
 8000dae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dc0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000dca:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a9e      	ldr	r2, [pc, #632]	; (800104c <VL53L0X_DataInit+0x2c0>)
 8000dd2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a9d      	ldr	r2, [pc, #628]	; (8001050 <VL53L0X_DataInit+0x2c4>)
 8000dda:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4619      	mov	r1, r3
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 fab4 	bl	8001358 <VL53L0X_GetDeviceParameters>
 8000df0:	4603      	mov	r3, r0
 8000df2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8000df6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d112      	bne.n	8000e24 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8000e02:	2300      	movs	r3, #0
 8000e04:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f103 0410 	add.w	r4, r3, #16
 8000e0c:	f107 0510 	add.w	r5, r7, #16
 8000e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2264      	movs	r2, #100	; 0x64
 8000e28:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000e32:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e3c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8000e46:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f004 fe44 	bl	8005ae4 <VL53L0X_WrByte>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e64:	4313      	orrs	r3, r2
 8000e66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	21ff      	movs	r1, #255	; 0xff
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f004 fe38 	bl	8005ae4 <VL53L0X_WrByte>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f004 fe2c 	bl	8005ae4 <VL53L0X_WrByte>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e94:	4313      	orrs	r3, r2
 8000e96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8000e9a:	f107 030f 	add.w	r3, r7, #15
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	2191      	movs	r1, #145	; 0x91
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f004 fea0 	bl	8005be8 <VL53L0X_RdByte>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	461a      	mov	r2, r3
 8000eac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f004 fe0e 	bl	8005ae4 <VL53L0X_WrByte>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	461a      	mov	r2, r3
 8000ecc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	21ff      	movs	r1, #255	; 0xff
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f004 fe02 	bl	8005ae4 <VL53L0X_WrByte>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f004 fdf6 	bl	8005ae4 <VL53L0X_WrByte>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000f00:	4313      	orrs	r3, r2
 8000f02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000f06:	2300      	movs	r3, #0
 8000f08:	653b      	str	r3, [r7, #80]	; 0x50
 8000f0a:	e014      	b.n	8000f36 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8000f0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d114      	bne.n	8000f3e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8000f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 fd27 	bl	8001970 <VL53L0X_SetLimitCheckEnable>
 8000f22:	4603      	mov	r3, r0
 8000f24:	461a      	mov	r2, r3
 8000f26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f32:	3301      	adds	r3, #1
 8000f34:	653b      	str	r3, [r7, #80]	; 0x50
 8000f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f38:	2b05      	cmp	r3, #5
 8000f3a:	dde7      	ble.n	8000f0c <VL53L0X_DataInit+0x180>
 8000f3c:	e000      	b.n	8000f40 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8000f3e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8000f40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d107      	bne.n	8000f58 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 fd0f 	bl	8001970 <VL53L0X_SetLimitCheckEnable>
 8000f52:	4603      	mov	r3, r0
 8000f54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8000f58:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d107      	bne.n	8000f70 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000f60:	2200      	movs	r2, #0
 8000f62:	2103      	movs	r1, #3
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 fd03 	bl	8001970 <VL53L0X_SetLimitCheckEnable>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8000f70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d107      	bne.n	8000f88 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 fcf7 	bl	8001970 <VL53L0X_SetLimitCheckEnable>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8000f88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d107      	bne.n	8000fa0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000f90:	2200      	movs	r2, #0
 8000f92:	2105      	movs	r1, #5
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 fceb 	bl	8001970 <VL53L0X_SetLimitCheckEnable>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8000fa0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d108      	bne.n	8000fba <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000fa8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8000fac:	2100      	movs	r1, #0
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 fd8e 	bl	8001ad0 <VL53L0X_SetLimitCheckValue>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8000fba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d108      	bne.n	8000fd4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000fc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 fd81 	bl	8001ad0 <VL53L0X_SetLimitCheckValue>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000fd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d108      	bne.n	8000fee <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000fdc:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 fd74 	bl	8001ad0 <VL53L0X_SetLimitCheckValue>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000fee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d107      	bne.n	8001006 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 fd68 	bl	8001ad0 <VL53L0X_SetLimitCheckValue>
 8001000:	4603      	mov	r3, r0
 8001002:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001006:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10f      	bne.n	800102e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	22ff      	movs	r2, #255	; 0xff
 8001012:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001016:	22ff      	movs	r2, #255	; 0xff
 8001018:	2101      	movs	r1, #1
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f004 fd62 	bl	8005ae4 <VL53L0X_WrByte>
 8001020:	4603      	mov	r3, r0
 8001022:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800102e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001032:	2b00      	cmp	r3, #0
 8001034:	d103      	bne.n	800103e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800103e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001042:	4618      	mov	r0, r3
 8001044:	3758      	adds	r7, #88	; 0x58
 8001046:	46bd      	mov	sp, r7
 8001048:	bdb0      	pop	{r4, r5, r7, pc}
 800104a:	bf00      	nop
 800104c:	00016b85 	.word	0x00016b85
 8001050:	000970a4 	.word	0x000970a4

08001054 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8001054:	b5b0      	push	{r4, r5, r7, lr}
 8001056:	b09e      	sub	sp, #120	; 0x78
 8001058:	af02      	add	r7, sp, #8
 800105a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	2240      	movs	r2, #64	; 0x40
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f008 f922 	bl	80092b4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8001090:	2101      	movs	r1, #1
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f002 fa6b 	bl	800356e <VL53L0X_get_info_from_device>
 8001098:	4603      	mov	r3, r0
 800109a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80010a4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80010ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80010b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d80d      	bhi.n	80010d4 <VL53L0X_StaticInit+0x80>
 80010b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d102      	bne.n	80010c6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80010c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010c2:	2b20      	cmp	r3, #32
 80010c4:	d806      	bhi.n	80010d4 <VL53L0X_StaticInit+0x80>
 80010c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10e      	bne.n	80010ec <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80010ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010d0:	2b0c      	cmp	r3, #12
 80010d2:	d90b      	bls.n	80010ec <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80010d4:	f107 0218 	add.w	r2, r7, #24
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f001 fcea 	bl	8002ab8 <VL53L0X_perform_ref_spad_management>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80010ea:	e009      	b.n	8001100 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80010ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010f0:	461a      	mov	r2, r3
 80010f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f001 feeb 	bl	8002ed0 <VL53L0X_set_reference_spads>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8001100:	4b94      	ldr	r3, [pc, #592]	; (8001354 <VL53L0X_StaticInit+0x300>)
 8001102:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8001104:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10f      	bne.n	800112c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8001112:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8001116:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800111a:	2b00      	cmp	r3, #0
 800111c:	d104      	bne.n	8001128 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001124:	66bb      	str	r3, [r7, #104]	; 0x68
 8001126:	e001      	b.n	800112c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8001128:	4b8a      	ldr	r3, [pc, #552]	; (8001354 <VL53L0X_StaticInit+0x300>)
 800112a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800112c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001130:	2b00      	cmp	r3, #0
 8001132:	d106      	bne.n	8001142 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8001134:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f003 fdbe 	bl	8004cb8 <VL53L0X_load_tuning_settings>
 800113c:	4603      	mov	r3, r0
 800113e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8001142:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10a      	bne.n	8001160 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800114a:	2300      	movs	r3, #0
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2304      	movs	r3, #4
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f001 f8e3 	bl	8002320 <VL53L0X_SetGpioConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001160:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001164:	2b00      	cmp	r3, #0
 8001166:	d121      	bne.n	80011ac <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001168:	2201      	movs	r2, #1
 800116a:	21ff      	movs	r1, #255	; 0xff
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f004 fcb9 	bl	8005ae4 <VL53L0X_WrByte>
 8001172:	4603      	mov	r3, r0
 8001174:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8001178:	f107 031a 	add.w	r3, r7, #26
 800117c:	461a      	mov	r2, r3
 800117e:	2184      	movs	r1, #132	; 0x84
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f004 fd5b 	bl	8005c3c <VL53L0X_RdWord>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118e:	4313      	orrs	r3, r2
 8001190:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001194:	2200      	movs	r2, #0
 8001196:	21ff      	movs	r1, #255	; 0xff
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f004 fca3 	bl	8005ae4 <VL53L0X_WrByte>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011a6:	4313      	orrs	r3, r2
 80011a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80011ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d105      	bne.n	80011c0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80011b4:	8b7b      	ldrh	r3, [r7, #26]
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	461a      	mov	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80011c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d108      	bne.n	80011da <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f8c2 	bl	8001358 <VL53L0X_GetDeviceParameters>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80011da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d110      	bne.n	8001204 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80011e2:	f107 0319 	add.w	r3, r7, #25
 80011e6:	4619      	mov	r1, r3
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f984 	bl	80014f6 <VL53L0X_GetFractionEnable>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80011f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d103      	bne.n	8001204 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80011fc:	7e7a      	ldrb	r2, [r7, #25]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8001204:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001208:	2b00      	cmp	r3, #0
 800120a:	d10e      	bne.n	800122a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f103 0410 	add.w	r4, r3, #16
 8001212:	f107 051c 	add.w	r5, r7, #28
 8001216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001222:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800122a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800122e:	2b00      	cmp	r3, #0
 8001230:	d111      	bne.n	8001256 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8001232:	f107 0319 	add.w	r3, r7, #25
 8001236:	461a      	mov	r2, r3
 8001238:	2101      	movs	r1, #1
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f004 fcd4 	bl	8005be8 <VL53L0X_RdByte>
 8001240:	4603      	mov	r3, r0
 8001242:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8001246:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800124a:	2b00      	cmp	r3, #0
 800124c:	d103      	bne.n	8001256 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800124e:	7e7a      	ldrb	r2, [r7, #25]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8001256:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800125a:	2b00      	cmp	r3, #0
 800125c:	d107      	bne.n	800126e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f9bc 	bl	80015e0 <VL53L0X_SetSequenceStepEnable>
 8001268:	4603      	mov	r3, r0
 800126a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800126e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001272:	2b00      	cmp	r3, #0
 8001274:	d107      	bne.n	8001286 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001276:	2200      	movs	r2, #0
 8001278:	2102      	movs	r1, #2
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f9b0 	bl	80015e0 <VL53L0X_SetSequenceStepEnable>
 8001280:	4603      	mov	r3, r0
 8001282:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8001286:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800128a:	2b00      	cmp	r3, #0
 800128c:	d103      	bne.n	8001296 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2203      	movs	r2, #3
 8001292:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8001296:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800129e:	f107 0313 	add.w	r3, r7, #19
 80012a2:	461a      	mov	r2, r3
 80012a4:	2100      	movs	r1, #0
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f982 	bl	80015b0 <VL53L0X_GetVcselPulsePeriod>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80012b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d103      	bne.n	80012c2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80012ba:	7cfa      	ldrb	r2, [r7, #19]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80012c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d109      	bne.n	80012de <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80012ca:	f107 0313 	add.w	r3, r7, #19
 80012ce:	461a      	mov	r2, r3
 80012d0:	2101      	movs	r1, #1
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 f96c 	bl	80015b0 <VL53L0X_GetVcselPulsePeriod>
 80012d8:	4603      	mov	r3, r0
 80012da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80012de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d103      	bne.n	80012ee <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80012e6:	7cfa      	ldrb	r2, [r7, #19]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80012ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d109      	bne.n	800130a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	461a      	mov	r2, r3
 80012fc:	2103      	movs	r1, #3
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f002 feb6 	bl	8004070 <get_sequence_step_timeout>
 8001304:	4603      	mov	r3, r0
 8001306:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800130a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800130e:	2b00      	cmp	r3, #0
 8001310:	d103      	bne.n	800131a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800131a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800131e:	2b00      	cmp	r3, #0
 8001320:	d109      	bne.n	8001336 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	461a      	mov	r2, r3
 8001328:	2104      	movs	r1, #4
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f002 fea0 	bl	8004070 <get_sequence_step_timeout>
 8001330:	4603      	mov	r3, r0
 8001332:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001336:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800133a:	2b00      	cmp	r3, #0
 800133c:	d103      	bne.n	8001346 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001346:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800134a:	4618      	mov	r0, r3
 800134c:	3770      	adds	r7, #112	; 0x70
 800134e:	46bd      	mov	sp, r7
 8001350:	bdb0      	pop	{r4, r5, r7, pc}
 8001352:	bf00      	nop
 8001354:	20000004 	.word	0x20000004

08001358 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001362:	2300      	movs	r3, #0
 8001364:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f8b0 	bl	80014d0 <VL53L0X_GetDeviceMode>
 8001370:	4603      	mov	r3, r0
 8001372:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8001374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d107      	bne.n	800138c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	3308      	adds	r3, #8
 8001380:	4619      	mov	r1, r3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fa78 	bl	8001878 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8001388:	4603      	mov	r3, r0
 800138a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800138c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	2200      	movs	r2, #0
 8001398:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800139a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d107      	bne.n	80013b2 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	3310      	adds	r3, #16
 80013a6:	4619      	mov	r1, r3
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 faae 	bl	800190a <VL53L0X_GetXTalkCompensationRateMegaCps>
 80013ae:	4603      	mov	r3, r0
 80013b0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80013b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d107      	bne.n	80013ca <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	3314      	adds	r3, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff fcb8 	bl	8000d36 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d134      	bne.n	800143c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	e02a      	b.n	800142e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80013d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d12a      	bne.n	8001436 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	b299      	uxth	r1, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	3308      	adds	r3, #8
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	4413      	add	r3, r2
 80013ee:	3304      	adds	r3, #4
 80013f0:	461a      	mov	r2, r3
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fbce 	bl	8001b94 <VL53L0X_GetLimitCheckValue>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	4313      	orrs	r3, r2
 8001400:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8001402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d117      	bne.n	800143a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	b299      	uxth	r1, r3
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3318      	adds	r3, #24
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	4413      	add	r3, r2
 8001416:	461a      	mov	r2, r3
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fb35 	bl	8001a88 <VL53L0X_GetLimitCheckEnable>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	4313      	orrs	r3, r2
 8001426:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	3301      	adds	r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	2b05      	cmp	r3, #5
 8001432:	ddd1      	ble.n	80013d8 <VL53L0X_GetDeviceParameters+0x80>
 8001434:	e002      	b.n	800143c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8001436:	bf00      	nop
 8001438:	e000      	b.n	800143c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800143a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800143c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d107      	bne.n	8001454 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	333c      	adds	r3, #60	; 0x3c
 8001448:	4619      	mov	r1, r3
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fc30 	bl	8001cb0 <VL53L0X_GetWrapAroundCheckEnable>
 8001450:	4603      	mov	r3, r0
 8001452:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8001454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d107      	bne.n	800146c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	3304      	adds	r3, #4
 8001460:	4619      	mov	r1, r3
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f879 	bl	800155a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8001468:	4603      	mov	r3, r0
 800146a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800146c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	2b15      	cmp	r3, #21
 800148c:	bf8c      	ite	hi
 800148e:	2201      	movhi	r2, #1
 8001490:	2200      	movls	r2, #0
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	2a00      	cmp	r2, #0
 8001496:	d10e      	bne.n	80014b6 <VL53L0X_SetDeviceMode+0x3e>
 8001498:	2201      	movs	r2, #1
 800149a:	409a      	lsls	r2, r3
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <VL53L0X_SetDeviceMode+0x54>)
 800149e:	4013      	ands	r3, r2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf14      	ite	ne
 80014a4:	2301      	movne	r3, #1
 80014a6:	2300      	moveq	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	78fa      	ldrb	r2, [r7, #3]
 80014b2:	741a      	strb	r2, [r3, #16]
		break;
 80014b4:	e001      	b.n	80014ba <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80014b6:	23f8      	movs	r3, #248	; 0xf8
 80014b8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	0030000b 	.word	0x0030000b

080014d0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80014da:	2300      	movs	r3, #0
 80014dc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7c1a      	ldrb	r2, [r3, #16]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	2109      	movs	r1, #9
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f004 fb6d 	bl	8005be8 <VL53L0X_RdByte>
 800150e:	4603      	mov	r3, r0
 8001510:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8001512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d106      	bne.n	8001528 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	b2da      	uxtb	r2, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001528:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f003 fa26 	bl	8004996 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800154a:	4603      	mov	r3, r0
 800154c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8001568:	6839      	ldr	r1, [r7, #0]
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f003 faf3 	bl	8004b56 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8001570:	4603      	mov	r3, r0
 8001572:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8001574:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
 800158c:	4613      	mov	r3, r2
 800158e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8001594:	78ba      	ldrb	r2, [r7, #2]
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	4619      	mov	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f002 ff3b 	bl	8004416 <VL53L0X_set_vcsel_pulse_period>
 80015a0:	4603      	mov	r3, r0
 80015a2:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80015a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	460b      	mov	r3, r1
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80015be:	2300      	movs	r3, #0
 80015c0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80015c2:	7afb      	ldrb	r3, [r7, #11]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	4619      	mov	r1, r3
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f003 f9ad 	bl	8004928 <VL53L0X_get_vcsel_pulse_period>
 80015ce:	4603      	mov	r3, r0
 80015d0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80015d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	70fb      	strb	r3, [r7, #3]
 80015ec:	4613      	mov	r3, r2
 80015ee:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80015fc:	f107 030f 	add.w	r3, r7, #15
 8001600:	461a      	mov	r2, r3
 8001602:	2101      	movs	r1, #1
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f004 faef 	bl	8005be8 <VL53L0X_RdByte>
 800160a:	4603      	mov	r3, r0
 800160c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8001612:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d15a      	bne.n	80016d0 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800161a:	78bb      	ldrb	r3, [r7, #2]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d12b      	bne.n	8001678 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	2b04      	cmp	r3, #4
 8001624:	d825      	bhi.n	8001672 <VL53L0X_SetSequenceStepEnable+0x92>
 8001626:	a201      	add	r2, pc, #4	; (adr r2, 800162c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8001628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162c:	08001641 	.word	0x08001641
 8001630:	0800164b 	.word	0x0800164b
 8001634:	08001655 	.word	0x08001655
 8001638:	0800165f 	.word	0x0800165f
 800163c:	08001669 	.word	0x08001669
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8001640:	7dbb      	ldrb	r3, [r7, #22]
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	75bb      	strb	r3, [r7, #22]
				break;
 8001648:	e043      	b.n	80016d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800164a:	7dbb      	ldrb	r3, [r7, #22]
 800164c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001650:	75bb      	strb	r3, [r7, #22]
				break;
 8001652:	e03e      	b.n	80016d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8001654:	7dbb      	ldrb	r3, [r7, #22]
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	75bb      	strb	r3, [r7, #22]
				break;
 800165c:	e039      	b.n	80016d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800165e:	7dbb      	ldrb	r3, [r7, #22]
 8001660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001664:	75bb      	strb	r3, [r7, #22]
				break;
 8001666:	e034      	b.n	80016d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8001668:	7dbb      	ldrb	r3, [r7, #22]
 800166a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800166e:	75bb      	strb	r3, [r7, #22]
				break;
 8001670:	e02f      	b.n	80016d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001672:	23fc      	movs	r3, #252	; 0xfc
 8001674:	75fb      	strb	r3, [r7, #23]
 8001676:	e02c      	b.n	80016d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	2b04      	cmp	r3, #4
 800167c:	d825      	bhi.n	80016ca <VL53L0X_SetSequenceStepEnable+0xea>
 800167e:	a201      	add	r2, pc, #4	; (adr r2, 8001684 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8001680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001684:	08001699 	.word	0x08001699
 8001688:	080016a3 	.word	0x080016a3
 800168c:	080016ad 	.word	0x080016ad
 8001690:	080016b7 	.word	0x080016b7
 8001694:	080016c1 	.word	0x080016c1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8001698:	7dbb      	ldrb	r3, [r7, #22]
 800169a:	f023 0310 	bic.w	r3, r3, #16
 800169e:	75bb      	strb	r3, [r7, #22]
				break;
 80016a0:	e017      	b.n	80016d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80016a2:	7dbb      	ldrb	r3, [r7, #22]
 80016a4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80016a8:	75bb      	strb	r3, [r7, #22]
				break;
 80016aa:	e012      	b.n	80016d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80016ac:	7dbb      	ldrb	r3, [r7, #22]
 80016ae:	f023 0304 	bic.w	r3, r3, #4
 80016b2:	75bb      	strb	r3, [r7, #22]
				break;
 80016b4:	e00d      	b.n	80016d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80016b6:	7dbb      	ldrb	r3, [r7, #22]
 80016b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016bc:	75bb      	strb	r3, [r7, #22]
				break;
 80016be:	e008      	b.n	80016d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80016c0:	7dbb      	ldrb	r3, [r7, #22]
 80016c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016c6:	75bb      	strb	r3, [r7, #22]
				break;
 80016c8:	e003      	b.n	80016d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80016ca:	23fc      	movs	r3, #252	; 0xfc
 80016cc:	75fb      	strb	r3, [r7, #23]
 80016ce:	e000      	b.n	80016d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80016d0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	7dba      	ldrb	r2, [r7, #22]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d01e      	beq.n	8001718 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80016da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d107      	bne.n	80016f2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80016e2:	7dbb      	ldrb	r3, [r7, #22]
 80016e4:	461a      	mov	r2, r3
 80016e6:	2101      	movs	r1, #1
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f004 f9fb 	bl	8005ae4 <VL53L0X_WrByte>
 80016ee:	4603      	mov	r3, r0
 80016f0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80016f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d103      	bne.n	8001702 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7dba      	ldrb	r2, [r7, #22]
 80016fe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8001702:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d106      	bne.n	8001718 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001710:	6939      	ldr	r1, [r7, #16]
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ff0e 	bl	8001534 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8001718:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	460b      	mov	r3, r1
 8001730:	72fb      	strb	r3, [r7, #11]
 8001732:	4613      	mov	r3, r2
 8001734:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001736:	2300      	movs	r3, #0
 8001738:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8001740:	7afb      	ldrb	r3, [r7, #11]
 8001742:	2b04      	cmp	r3, #4
 8001744:	d836      	bhi.n	80017b4 <sequence_step_enabled+0x90>
 8001746:	a201      	add	r2, pc, #4	; (adr r2, 800174c <sequence_step_enabled+0x28>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	08001761 	.word	0x08001761
 8001750:	08001773 	.word	0x08001773
 8001754:	08001785 	.word	0x08001785
 8001758:	08001797 	.word	0x08001797
 800175c:	080017a9 	.word	0x080017a9
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8001760:	7abb      	ldrb	r3, [r7, #10]
 8001762:	111b      	asrs	r3, r3, #4
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	b2da      	uxtb	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	701a      	strb	r2, [r3, #0]
		break;
 8001770:	e022      	b.n	80017b8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8001772:	7abb      	ldrb	r3, [r7, #10]
 8001774:	10db      	asrs	r3, r3, #3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	b2da      	uxtb	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	701a      	strb	r2, [r3, #0]
		break;
 8001782:	e019      	b.n	80017b8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8001784:	7abb      	ldrb	r3, [r7, #10]
 8001786:	109b      	asrs	r3, r3, #2
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	b2da      	uxtb	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	701a      	strb	r2, [r3, #0]
		break;
 8001794:	e010      	b.n	80017b8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8001796:	7abb      	ldrb	r3, [r7, #10]
 8001798:	119b      	asrs	r3, r3, #6
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	701a      	strb	r2, [r3, #0]
		break;
 80017a6:	e007      	b.n	80017b8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80017a8:	7abb      	ldrb	r3, [r7, #10]
 80017aa:	09db      	lsrs	r3, r3, #7
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	701a      	strb	r2, [r3, #0]
		break;
 80017b2:	e001      	b.n	80017b8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80017b4:	23fc      	movs	r3, #252	; 0xfc
 80017b6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80017b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	371c      	adds	r7, #28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80017da:	f107 030e 	add.w	r3, r7, #14
 80017de:	461a      	mov	r2, r3
 80017e0:	2101      	movs	r1, #1
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f004 fa00 	bl	8005be8 <VL53L0X_RdByte>
 80017e8:	4603      	mov	r3, r0
 80017ea:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80017ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d107      	bne.n	8001804 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80017f4:	7bba      	ldrb	r2, [r7, #14]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2100      	movs	r1, #0
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ff92 	bl	8001724 <sequence_step_enabled>
 8001800:	4603      	mov	r3, r0
 8001802:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d108      	bne.n	800181e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800180c:	7bba      	ldrb	r2, [r7, #14]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	3302      	adds	r3, #2
 8001812:	2101      	movs	r1, #1
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff85 	bl	8001724 <sequence_step_enabled>
 800181a:	4603      	mov	r3, r0
 800181c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d108      	bne.n	8001838 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8001826:	7bba      	ldrb	r2, [r7, #14]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	2102      	movs	r1, #2
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff78 	bl	8001724 <sequence_step_enabled>
 8001834:	4603      	mov	r3, r0
 8001836:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d108      	bne.n	8001852 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8001840:	7bba      	ldrb	r2, [r7, #14]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	3303      	adds	r3, #3
 8001846:	2103      	movs	r1, #3
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff6b 	bl	8001724 <sequence_step_enabled>
 800184e:	4603      	mov	r3, r0
 8001850:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d108      	bne.n	800186c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800185a:	7bba      	ldrb	r2, [r7, #14]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	3304      	adds	r3, #4
 8001860:	2104      	movs	r1, #4
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ff5e 	bl	8001724 <sequence_step_enabled>
 8001868:	4603      	mov	r3, r0
 800186a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800186c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001882:	2300      	movs	r3, #0
 8001884:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	461a      	mov	r2, r3
 800188c:	21f8      	movs	r1, #248	; 0xf8
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f004 f9d4 	bl	8005c3c <VL53L0X_RdWord>
 8001894:	4603      	mov	r3, r0
 8001896:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8001898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80018a0:	f107 0308 	add.w	r3, r7, #8
 80018a4:	461a      	mov	r2, r3
 80018a6:	2104      	movs	r1, #4
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f004 f9ff 	bl	8005cac <VL53L0X_RdDWord>
 80018ae:	4603      	mov	r3, r0
 80018b0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10c      	bne.n	80018d4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80018ba:	89bb      	ldrh	r3, [r7, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	89ba      	ldrh	r2, [r7, #12]
 80018c4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80018d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7f1b      	ldrb	r3, [r3, #28]
 80018f2:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	7bba      	ldrb	r2, [r7, #14]
 80018f8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80018fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001914:	2300      	movs	r3, #0
 8001916:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8001918:	f107 030e 	add.w	r3, r7, #14
 800191c:	461a      	mov	r2, r3
 800191e:	2120      	movs	r1, #32
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f004 f98b 	bl	8005c3c <VL53L0X_RdWord>
 8001926:	4603      	mov	r3, r0
 8001928:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800192a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d118      	bne.n	8001964 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8001932:	89fb      	ldrh	r3, [r7, #14]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	771a      	strb	r2, [r3, #28]
 800194a:	e00b      	b.n	8001964 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800194c:	89fb      	ldrh	r3, [r7, #14]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001964:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
 800197c:	4613      	mov	r3, r2
 800197e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001980:	2300      	movs	r3, #0
 8001982:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001990:	887b      	ldrh	r3, [r7, #2]
 8001992:	2b05      	cmp	r3, #5
 8001994:	d902      	bls.n	800199c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001996:	23fc      	movs	r3, #252	; 0xfc
 8001998:	75fb      	strb	r3, [r7, #23]
 800199a:	e05b      	b.n	8001a54 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800199c:	787b      	ldrb	r3, [r7, #1]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d106      	bne.n	80019b0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80019aa:	2301      	movs	r3, #1
 80019ac:	73bb      	strb	r3, [r7, #14]
 80019ae:	e00a      	b.n	80019c6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	330c      	adds	r3, #12
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80019c2:	2301      	movs	r3, #1
 80019c4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	2b05      	cmp	r3, #5
 80019ca:	d841      	bhi.n	8001a50 <VL53L0X_SetLimitCheckEnable+0xe0>
 80019cc:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <VL53L0X_SetLimitCheckEnable+0x64>)
 80019ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d2:	bf00      	nop
 80019d4:	080019ed 	.word	0x080019ed
 80019d8:	080019f7 	.word	0x080019f7
 80019dc:	08001a0d 	.word	0x08001a0d
 80019e0:	08001a17 	.word	0x08001a17
 80019e4:	08001a21 	.word	0x08001a21
 80019e8:	08001a39 	.word	0x08001a39

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7bfa      	ldrb	r2, [r7, #15]
 80019f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80019f4:	e02e      	b.n	8001a54 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	2144      	movs	r1, #68	; 0x44
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f004 f893 	bl	8005b2c <VL53L0X_WrWord>
 8001a06:	4603      	mov	r3, r0
 8001a08:	75fb      	strb	r3, [r7, #23]

			break;
 8001a0a:	e023      	b.n	8001a54 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8001a14:	e01e      	b.n	8001a54 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7bfa      	ldrb	r2, [r7, #15]
 8001a1a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8001a1e:	e019      	b.n	8001a54 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8001a20:	7bbb      	ldrb	r3, [r7, #14]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8001a26:	7b7b      	ldrb	r3, [r7, #13]
 8001a28:	22fe      	movs	r2, #254	; 0xfe
 8001a2a:	2160      	movs	r1, #96	; 0x60
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f004 f8a7 	bl	8005b80 <VL53L0X_UpdateByte>
 8001a32:	4603      	mov	r3, r0
 8001a34:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8001a36:	e00d      	b.n	8001a54 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8001a38:	7bbb      	ldrb	r3, [r7, #14]
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8001a3e:	7b7b      	ldrb	r3, [r7, #13]
 8001a40:	22ef      	movs	r2, #239	; 0xef
 8001a42:	2160      	movs	r1, #96	; 0x60
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f004 f89b 	bl	8005b80 <VL53L0X_UpdateByte>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8001a4e:	e001      	b.n	8001a54 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001a50:	23fc      	movs	r3, #252	; 0xfc
 8001a52:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001a54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10f      	bne.n	8001a7c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8001a5c:	787b      	ldrb	r3, [r7, #1]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	4413      	add	r3, r2
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001a6e:	e005      	b.n	8001a7c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001a70:	887b      	ldrh	r3, [r7, #2]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001a7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	460b      	mov	r3, r1
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001a9a:	897b      	ldrh	r3, [r7, #10]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d905      	bls.n	8001aac <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001aa0:	23fc      	movs	r3, #252	; 0xfc
 8001aa2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	e008      	b.n	8001abe <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001aac:	897b      	ldrh	r3, [r7, #10]
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ab6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7dba      	ldrb	r2, [r7, #22]
 8001abc:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	371c      	adds	r7, #28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8001ae2:	897b      	ldrh	r3, [r7, #10]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001aec:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8001aee:	7dbb      	ldrb	r3, [r7, #22]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d107      	bne.n	8001b04 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001af4:	897b      	ldrh	r3, [r7, #10]
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	330c      	adds	r3, #12
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	e040      	b.n	8001b86 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8001b04:	897b      	ldrh	r3, [r7, #10]
 8001b06:	2b05      	cmp	r3, #5
 8001b08:	d830      	bhi.n	8001b6c <VL53L0X_SetLimitCheckValue+0x9c>
 8001b0a:	a201      	add	r2, pc, #4	; (adr r2, 8001b10 <VL53L0X_SetLimitCheckValue+0x40>)
 8001b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b10:	08001b29 	.word	0x08001b29
 8001b14:	08001b31 	.word	0x08001b31
 8001b18:	08001b47 	.word	0x08001b47
 8001b1c:	08001b4f 	.word	0x08001b4f
 8001b20:	08001b57 	.word	0x08001b57
 8001b24:	08001b57 	.word	0x08001b57

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8001b2e:	e01f      	b.n	8001b70 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	2144      	movs	r1, #68	; 0x44
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f003 fff6 	bl	8005b2c <VL53L0X_WrWord>
 8001b40:	4603      	mov	r3, r0
 8001b42:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8001b44:	e014      	b.n	8001b70 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8001b4c:	e010      	b.n	8001b70 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8001b54:	e00c      	b.n	8001b70 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2164      	movs	r1, #100	; 0x64
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f003 ffe3 	bl	8005b2c <VL53L0X_WrWord>
 8001b66:	4603      	mov	r3, r0
 8001b68:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8001b6a:	e001      	b.n	8001b70 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001b6c:	23fc      	movs	r3, #252	; 0xfc
 8001b6e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8001b70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d106      	bne.n	8001b86 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	330c      	adds	r3, #12
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001b86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop

08001b94 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8001baa:	897b      	ldrh	r3, [r7, #10]
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	d847      	bhi.n	8001c40 <VL53L0X_GetLimitCheckValue+0xac>
 8001bb0:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <VL53L0X_GetLimitCheckValue+0x24>)
 8001bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	08001bd1 	.word	0x08001bd1
 8001bbc:	08001bdd 	.word	0x08001bdd
 8001bc0:	08001c03 	.word	0x08001c03
 8001bc4:	08001c0f 	.word	0x08001c0f
 8001bc8:	08001c1b 	.word	0x08001c1b
 8001bcc:	08001c1b 	.word	0x08001c1b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	77bb      	strb	r3, [r7, #30]
		break;
 8001bda:	e033      	b.n	8001c44 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8001bdc:	f107 0316 	add.w	r3, r7, #22
 8001be0:	461a      	mov	r2, r3
 8001be2:	2144      	movs	r1, #68	; 0x44
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f004 f829 	bl	8005c3c <VL53L0X_RdWord>
 8001bea:	4603      	mov	r3, r0
 8001bec:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8001bee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001bf6:	8afb      	ldrh	r3, [r7, #22]
 8001bf8:	025b      	lsls	r3, r3, #9
 8001bfa:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	77bb      	strb	r3, [r7, #30]
		break;
 8001c00:	e020      	b.n	8001c44 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	77bb      	strb	r3, [r7, #30]
		break;
 8001c0c:	e01a      	b.n	8001c44 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	77bb      	strb	r3, [r7, #30]
		break;
 8001c18:	e014      	b.n	8001c44 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8001c1a:	f107 0316 	add.w	r3, r7, #22
 8001c1e:	461a      	mov	r2, r3
 8001c20:	2164      	movs	r1, #100	; 0x64
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f004 f80a 	bl	8005c3c <VL53L0X_RdWord>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8001c2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001c34:	8afb      	ldrh	r3, [r7, #22]
 8001c36:	025b      	lsls	r3, r3, #9
 8001c38:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	77bb      	strb	r3, [r7, #30]
		break;
 8001c3e:	e001      	b.n	8001c44 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001c40:	23fc      	movs	r3, #252	; 0xfc
 8001c42:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001c44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d12a      	bne.n	8001ca2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8001c4c:	7fbb      	ldrb	r3, [r7, #30]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d124      	bne.n	8001c9c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d110      	bne.n	8001c7a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8001c58:	897b      	ldrh	r3, [r7, #10]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001c6c:	897b      	ldrh	r3, [r7, #10]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4413      	add	r3, r2
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001c78:	e013      	b.n	8001ca2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001c80:	897b      	ldrh	r3, [r7, #10]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	330c      	adds	r3, #12
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001c8e:	897b      	ldrh	r3, [r7, #10]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001c9a:	e002      	b.n	8001ca2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001ca2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3720      	adds	r7, #32
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop

08001cb0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8001cbe:	f107 030e 	add.w	r3, r7, #14
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f003 ff8e 	bl	8005be8 <VL53L0X_RdByte>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8001cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10e      	bne.n	8001cf6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8001cd8:	7bba      	ldrb	r2, [r7, #14]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8001ce0:	7bbb      	ldrb	r3, [r7, #14]
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	da03      	bge.n	8001cf0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	e002      	b.n	8001cf6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d104      	bne.n	8001d08 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8001d20:	f107 030e 	add.w	r3, r7, #14
 8001d24:	4619      	mov	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff fbd2 	bl	80014d0 <VL53L0X_GetDeviceMode>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8001d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d107      	bne.n	8001d48 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8001d38:	7bbb      	ldrb	r3, [r7, #14]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d104      	bne.n	8001d48 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f898 	bl	8001e74 <VL53L0X_StartMeasurement>
 8001d44:	4603      	mov	r3, r0
 8001d46:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8001d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d104      	bne.n	8001d5a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f001 fb3f 	bl	80033d4 <VL53L0X_measurement_poll_for_completion>
 8001d56:	4603      	mov	r3, r0
 8001d58:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8001d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8001d62:	7bbb      	ldrb	r3, [r7, #14]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d103      	bne.n	8001d70 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8001d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f001 fae1 	bl	800335a <VL53L0X_perform_ref_calibration>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8001d9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8001dbe:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8001dc0:	7dbb      	ldrb	r3, [r7, #22]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d005      	beq.n	8001dd2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8001dc6:	7dbb      	ldrb	r3, [r7, #22]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d002      	beq.n	8001dd2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8001dcc:	7dbb      	ldrb	r3, [r7, #22]
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d147      	bne.n	8001e62 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	f107 0210 	add.w	r2, r7, #16
 8001dda:	2101      	movs	r1, #1
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fbc3 	bl	8002568 <VL53L0X_GetInterruptThresholds>
 8001de2:	4603      	mov	r3, r0
 8001de4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8001dec:	d803      	bhi.n	8001df6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8001dee:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8001df0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8001df4:	d935      	bls.n	8001e62 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8001df6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d131      	bne.n	8001e62 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d006      	beq.n	8001e12 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8001e04:	491a      	ldr	r1, [pc, #104]	; (8001e70 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f002 ff56 	bl	8004cb8 <VL53L0X_load_tuning_settings>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	75fb      	strb	r3, [r7, #23]
 8001e10:	e027      	b.n	8001e62 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8001e12:	2204      	movs	r2, #4
 8001e14:	21ff      	movs	r1, #255	; 0xff
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f003 fe64 	bl	8005ae4 <VL53L0X_WrByte>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2170      	movs	r1, #112	; 0x70
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f003 fe5a 	bl	8005ae4 <VL53L0X_WrByte>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	21ff      	movs	r1, #255	; 0xff
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f003 fe50 	bl	8005ae4 <VL53L0X_WrByte>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461a      	mov	r2, r3
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2180      	movs	r1, #128	; 0x80
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f003 fe46 	bl	8005ae4 <VL53L0X_WrByte>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8001e62:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200000f8 	.word	0x200000f8

08001e74 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8001e84:	f107 030e 	add.w	r3, r7, #14
 8001e88:	4619      	mov	r1, r3
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fb20 	bl	80014d0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001e90:	2201      	movs	r2, #1
 8001e92:	2180      	movs	r1, #128	; 0x80
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f003 fe25 	bl	8005ae4 <VL53L0X_WrByte>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	21ff      	movs	r1, #255	; 0xff
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f003 fe1e 	bl	8005ae4 <VL53L0X_WrByte>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f003 fe17 	bl	8005ae4 <VL53L0X_WrByte>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2191      	movs	r1, #145	; 0x91
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f003 fe0d 	bl	8005ae4 <VL53L0X_WrByte>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001ece:	2201      	movs	r2, #1
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f003 fe06 	bl	8005ae4 <VL53L0X_WrByte>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001edc:	2200      	movs	r2, #0
 8001ede:	21ff      	movs	r1, #255	; 0xff
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f003 fdff 	bl	8005ae4 <VL53L0X_WrByte>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f003 fdf8 	bl	8005ae4 <VL53L0X_WrByte>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8001ef8:	7bbb      	ldrb	r3, [r7, #14]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d054      	beq.n	8001fa8 <VL53L0X_StartMeasurement+0x134>
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	dc6c      	bgt.n	8001fdc <VL53L0X_StartMeasurement+0x168>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <VL53L0X_StartMeasurement+0x98>
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d034      	beq.n	8001f74 <VL53L0X_StartMeasurement+0x100>
 8001f0a:	e067      	b.n	8001fdc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2100      	movs	r1, #0
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f003 fde7 	bl	8005ae4 <VL53L0X_WrByte>
 8001f16:	4603      	mov	r3, r0
 8001f18:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8001f1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d15d      	bne.n	8001fe2 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8001f30:	f107 030d 	add.w	r3, r7, #13
 8001f34:	461a      	mov	r2, r3
 8001f36:	2100      	movs	r1, #0
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f003 fe55 	bl	8005be8 <VL53L0X_RdByte>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	3301      	adds	r3, #1
 8001f46:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8001f48:	7b7a      	ldrb	r2, [r7, #13]
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d107      	bne.n	8001f66 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8001f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d103      	bne.n	8001f66 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f64:	d3e1      	bcc.n	8001f2a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f6c:	d339      	bcc.n	8001fe2 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8001f6e:	23f9      	movs	r3, #249	; 0xf9
 8001f70:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8001f72:	e036      	b.n	8001fe2 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8001f74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ff12 	bl	8001da8 <VL53L0X_CheckAndLoadInterruptSettings>
 8001f84:	4603      	mov	r3, r0
 8001f86:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8001f88:	2202      	movs	r2, #2
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f003 fda9 	bl	8005ae4 <VL53L0X_WrByte>
 8001f92:	4603      	mov	r3, r0
 8001f94:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8001f96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d123      	bne.n	8001fe6 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8001fa6:	e01e      	b.n	8001fe6 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8001fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fef8 	bl	8001da8 <VL53L0X_CheckAndLoadInterruptSettings>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f003 fd8f 	bl	8005ae4 <VL53L0X_WrByte>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8001fca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10b      	bne.n	8001fea <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8001fda:	e006      	b.n	8001fea <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8001fdc:	23f8      	movs	r3, #248	; 0xf8
 8001fde:	75fb      	strb	r3, [r7, #23]
 8001fe0:	e004      	b.n	8001fec <VL53L0X_StartMeasurement+0x178>
		break;
 8001fe2:	bf00      	nop
 8001fe4:	e002      	b.n	8001fec <VL53L0X_StartMeasurement+0x178>
		break;
 8001fe6:	bf00      	nop
 8001fe8:	e000      	b.n	8001fec <VL53L0X_StartMeasurement+0x178>
		break;
 8001fea:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8001fec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002002:	2300      	movs	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800200c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800200e:	7bbb      	ldrb	r3, [r7, #14]
 8002010:	2b04      	cmp	r3, #4
 8002012:	d112      	bne.n	800203a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8002014:	f107 0308 	add.w	r3, r7, #8
 8002018:	4619      	mov	r1, r3
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fb1a 	bl	8002654 <VL53L0X_GetInterruptMaskStatus>
 8002020:	4603      	mov	r3, r0
 8002022:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b04      	cmp	r3, #4
 8002028:	d103      	bne.n	8002032 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e01c      	b.n	800206c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	e018      	b.n	800206c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800203a:	f107 030d 	add.w	r3, r7, #13
 800203e:	461a      	mov	r2, r3
 8002040:	2114      	movs	r1, #20
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f003 fdd0 	bl	8005be8 <VL53L0X_RdByte>
 8002048:	4603      	mov	r3, r0
 800204a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800204c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10b      	bne.n	800206c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8002054:	7b7b      	ldrb	r3, [r7, #13]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
 8002064:	e002      	b.n	800206c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800206c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b096      	sub	sp, #88	; 0x58
 800207c:	af02      	add	r7, sp, #8
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002082:	2300      	movs	r3, #0
 8002084:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8002088:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800208c:	230c      	movs	r3, #12
 800208e:	2114      	movs	r1, #20
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f003 fcfb 	bl	8005a8c <VL53L0X_ReadMulti>
 8002096:	4603      	mov	r3, r0
 8002098:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800209c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f040 80d1 	bne.w	8002248 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2200      	movs	r2, #0
 80020aa:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80020b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2200      	movs	r2, #0
 80020cc:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80020ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020dc:	b29b      	uxth	r3, r3
 80020de:	4413      	add	r3, r2
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020ea:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80020ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8002102:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002106:	025b      	lsls	r3, r3, #9
 8002108:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800210e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002112:	b29b      	uxth	r3, r3
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	b29a      	uxth	r2, r3
 8002118:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800211c:	b29b      	uxth	r3, r3
 800211e:	4413      	add	r3, r2
 8002120:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800212a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800212c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002130:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800213a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8002142:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8002146:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002148:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800214c:	d046      	beq.n	80021dc <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800214e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002150:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800215c:	4a57      	ldr	r2, [pc, #348]	; (80022bc <VL53L0X_GetRangingMeasurementData+0x244>)
 800215e:	fb82 1203 	smull	r1, r2, r2, r3
 8002162:	1192      	asrs	r2, r2, #6
 8002164:	17db      	asrs	r3, r3, #31
 8002166:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8002168:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7f1b      	ldrb	r3, [r3, #28]
 8002176:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800217a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800217e:	2b00      	cmp	r3, #0
 8002180:	d02c      	beq.n	80021dc <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8002182:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002184:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002188:	fb02 f303 	mul.w	r3, r2, r3
 800218c:	121a      	asrs	r2, r3, #8
					<= 0) {
 800218e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8002190:	429a      	cmp	r2, r3
 8002192:	d10d      	bne.n	80021b0 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8002194:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002198:	2b00      	cmp	r3, #0
 800219a:	d004      	beq.n	80021a6 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800219c:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80021a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80021a4:	e016      	b.n	80021d4 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80021a6:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80021aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80021ae:	e011      	b.n	80021d4 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80021b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80021b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021b6:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80021ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80021bc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80021c4:	121b      	asrs	r3, r3, #8
 80021c6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80021c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ca:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80021d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80021d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021d8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80021dc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00d      	beq.n	8002200 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80021e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80021f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	019b      	lsls	r3, r3, #6
 80021f8:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	75da      	strb	r2, [r3, #23]
 80021fe:	e006      	b.n	800220e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002206:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2200      	movs	r2, #0
 800220c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800220e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002212:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8002216:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	4613      	mov	r3, r2
 8002222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f003 f9e5 	bl	80055f4 <VL53L0X_get_pal_range_status>
 800222a:	4603      	mov	r3, r0
 800222c:	461a      	mov	r2, r3
 800222e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002232:	4313      	orrs	r3, r2
 8002234:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8002238:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800223c:	2b00      	cmp	r3, #0
 800223e:	d103      	bne.n	8002248 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8002240:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002248:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800224c:	2b00      	cmp	r3, #0
 800224e:	d12f      	bne.n	80022b0 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f107 040c 	add.w	r4, r7, #12
 8002256:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800225a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800225e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002262:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800226a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8002270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8002278:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800227e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8002284:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800228a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8002290:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8002296:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80022a0:	f107 050c 	add.w	r5, r7, #12
 80022a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80022b0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3750      	adds	r7, #80	; 0x50
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bdb0      	pop	{r4, r5, r7, pc}
 80022bc:	10624dd3 	.word	0x10624dd3

080022c0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80022ce:	2100      	movs	r1, #0
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff f8d1 	bl	8001478 <VL53L0X_SetDeviceMode>
 80022d6:	4603      	mov	r3, r0
 80022d8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80022da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d104      	bne.n	80022ec <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff fd16 	bl	8001d14 <VL53L0X_PerformSingleMeasurement>
 80022e8:	4603      	mov	r3, r0
 80022ea:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80022ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff febe 	bl	8002078 <VL53L0X_GetRangingMeasurementData>
 80022fc:	4603      	mov	r3, r0
 80022fe:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8002300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d105      	bne.n	8002314 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002308:	2100      	movs	r1, #0
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f962 	bl	80025d4 <VL53L0X_ClearInterruptMask>
 8002310:	4603      	mov	r3, r0
 8002312:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8002314:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	4608      	mov	r0, r1
 800232a:	4611      	mov	r1, r2
 800232c:	461a      	mov	r2, r3
 800232e:	4603      	mov	r3, r0
 8002330:	70fb      	strb	r3, [r7, #3]
 8002332:	460b      	mov	r3, r1
 8002334:	70bb      	strb	r3, [r7, #2]
 8002336:	4613      	mov	r3, r2
 8002338:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800233e:	78fb      	ldrb	r3, [r7, #3]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8002344:	23f6      	movs	r3, #246	; 0xf6
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e107      	b.n	800255a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800234a:	78bb      	ldrb	r3, [r7, #2]
 800234c:	2b14      	cmp	r3, #20
 800234e:	d110      	bne.n	8002372 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8002350:	7e3b      	ldrb	r3, [r7, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8002356:	2310      	movs	r3, #16
 8002358:	73bb      	strb	r3, [r7, #14]
 800235a:	e001      	b.n	8002360 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800235c:	2301      	movs	r3, #1
 800235e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8002360:	7bbb      	ldrb	r3, [r7, #14]
 8002362:	461a      	mov	r2, r3
 8002364:	2184      	movs	r1, #132	; 0x84
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f003 fbbc 	bl	8005ae4 <VL53L0X_WrByte>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	e0f3      	b.n	800255a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8002372:	78bb      	ldrb	r3, [r7, #2]
 8002374:	2b15      	cmp	r3, #21
 8002376:	f040 8097 	bne.w	80024a8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800237a:	2201      	movs	r2, #1
 800237c:	21ff      	movs	r1, #255	; 0xff
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f003 fbb0 	bl	8005ae4 <VL53L0X_WrByte>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	4313      	orrs	r3, r2
 800238c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f003 fba6 	bl	8005ae4 <VL53L0X_WrByte>
 8002398:	4603      	mov	r3, r0
 800239a:	461a      	mov	r2, r3
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	4313      	orrs	r3, r2
 80023a0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80023a2:	2200      	movs	r2, #0
 80023a4:	21ff      	movs	r1, #255	; 0xff
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f003 fb9c 	bl	8005ae4 <VL53L0X_WrByte>
 80023ac:	4603      	mov	r3, r0
 80023ae:	461a      	mov	r2, r3
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80023b6:	2201      	movs	r2, #1
 80023b8:	2180      	movs	r1, #128	; 0x80
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f003 fb92 	bl	8005ae4 <VL53L0X_WrByte>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461a      	mov	r2, r3
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80023ca:	2202      	movs	r2, #2
 80023cc:	2185      	movs	r1, #133	; 0x85
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f003 fb88 	bl	8005ae4 <VL53L0X_WrByte>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461a      	mov	r2, r3
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	4313      	orrs	r3, r2
 80023dc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80023de:	2204      	movs	r2, #4
 80023e0:	21ff      	movs	r1, #255	; 0xff
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f003 fb7e 	bl	8005ae4 <VL53L0X_WrByte>
 80023e8:	4603      	mov	r3, r0
 80023ea:	461a      	mov	r2, r3
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80023f2:	2200      	movs	r2, #0
 80023f4:	21cd      	movs	r1, #205	; 0xcd
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f003 fb74 	bl	8005ae4 <VL53L0X_WrByte>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461a      	mov	r2, r3
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	4313      	orrs	r3, r2
 8002404:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8002406:	2211      	movs	r2, #17
 8002408:	21cc      	movs	r1, #204	; 0xcc
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f003 fb6a 	bl	8005ae4 <VL53L0X_WrByte>
 8002410:	4603      	mov	r3, r0
 8002412:	461a      	mov	r2, r3
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	4313      	orrs	r3, r2
 8002418:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800241a:	2207      	movs	r2, #7
 800241c:	21ff      	movs	r1, #255	; 0xff
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f003 fb60 	bl	8005ae4 <VL53L0X_WrByte>
 8002424:	4603      	mov	r3, r0
 8002426:	461a      	mov	r2, r3
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	4313      	orrs	r3, r2
 800242c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800242e:	2200      	movs	r2, #0
 8002430:	21be      	movs	r1, #190	; 0xbe
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f003 fb56 	bl	8005ae4 <VL53L0X_WrByte>
 8002438:	4603      	mov	r3, r0
 800243a:	461a      	mov	r2, r3
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	4313      	orrs	r3, r2
 8002440:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8002442:	2206      	movs	r2, #6
 8002444:	21ff      	movs	r1, #255	; 0xff
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f003 fb4c 	bl	8005ae4 <VL53L0X_WrByte>
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	4313      	orrs	r3, r2
 8002454:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8002456:	2209      	movs	r2, #9
 8002458:	21cc      	movs	r1, #204	; 0xcc
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f003 fb42 	bl	8005ae4 <VL53L0X_WrByte>
 8002460:	4603      	mov	r3, r0
 8002462:	461a      	mov	r2, r3
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	4313      	orrs	r3, r2
 8002468:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800246a:	2200      	movs	r2, #0
 800246c:	21ff      	movs	r1, #255	; 0xff
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f003 fb38 	bl	8005ae4 <VL53L0X_WrByte>
 8002474:	4603      	mov	r3, r0
 8002476:	461a      	mov	r2, r3
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	4313      	orrs	r3, r2
 800247c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800247e:	2201      	movs	r2, #1
 8002480:	21ff      	movs	r1, #255	; 0xff
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f003 fb2e 	bl	8005ae4 <VL53L0X_WrByte>
 8002488:	4603      	mov	r3, r0
 800248a:	461a      	mov	r2, r3
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	4313      	orrs	r3, r2
 8002490:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f003 fb24 	bl	8005ae4 <VL53L0X_WrByte>
 800249c:	4603      	mov	r3, r0
 800249e:	461a      	mov	r2, r3
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	73fb      	strb	r3, [r7, #15]
 80024a6:	e058      	b.n	800255a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80024a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d121      	bne.n	80024f4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80024b0:	787b      	ldrb	r3, [r7, #1]
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d81b      	bhi.n	80024ee <VL53L0X_SetGpioConfig+0x1ce>
 80024b6:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <VL53L0X_SetGpioConfig+0x19c>)
 80024b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024bc:	080024d1 	.word	0x080024d1
 80024c0:	080024d7 	.word	0x080024d7
 80024c4:	080024dd 	.word	0x080024dd
 80024c8:	080024e3 	.word	0x080024e3
 80024cc:	080024e9 	.word	0x080024e9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73bb      	strb	r3, [r7, #14]
				break;
 80024d4:	e00f      	b.n	80024f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73bb      	strb	r3, [r7, #14]
				break;
 80024da:	e00c      	b.n	80024f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80024dc:	2302      	movs	r3, #2
 80024de:	73bb      	strb	r3, [r7, #14]
				break;
 80024e0:	e009      	b.n	80024f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80024e2:	2303      	movs	r3, #3
 80024e4:	73bb      	strb	r3, [r7, #14]
				break;
 80024e6:	e006      	b.n	80024f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80024e8:	2304      	movs	r3, #4
 80024ea:	73bb      	strb	r3, [r7, #14]
				break;
 80024ec:	e003      	b.n	80024f6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80024ee:	23f5      	movs	r3, #245	; 0xf5
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e000      	b.n	80024f6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80024f4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80024f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d107      	bne.n	800250e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80024fe:	7bbb      	ldrb	r3, [r7, #14]
 8002500:	461a      	mov	r2, r3
 8002502:	210a      	movs	r1, #10
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f003 faed 	bl	8005ae4 <VL53L0X_WrByte>
 800250a:	4603      	mov	r3, r0
 800250c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800250e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10f      	bne.n	8002536 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8002516:	7e3b      	ldrb	r3, [r7, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	73bb      	strb	r3, [r7, #14]
 8002520:	e001      	b.n	8002526 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8002522:	2310      	movs	r3, #16
 8002524:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8002526:	7bbb      	ldrb	r3, [r7, #14]
 8002528:	22ef      	movs	r2, #239	; 0xef
 800252a:	2184      	movs	r1, #132	; 0x84
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f003 fb27 	bl	8005b80 <VL53L0X_UpdateByte>
 8002532:	4603      	mov	r3, r0
 8002534:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8002536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d103      	bne.n	8002546 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	787a      	ldrb	r2, [r7, #1]
 8002542:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d105      	bne.n	800255a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800254e:	2100      	movs	r1, #0
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f83f 	bl	80025d4 <VL53L0X_ClearInterruptMask>
 8002556:	4603      	mov	r3, r0
 8002558:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop

08002568 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	460b      	mov	r3, r1
 8002576:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002578:	2300      	movs	r3, #0
 800257a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	461a      	mov	r2, r3
 8002582:	210e      	movs	r1, #14
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f003 fb59 	bl	8005c3c <VL53L0X_RdWord>
 800258a:	4603      	mov	r3, r0
 800258c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800258e:	8abb      	ldrh	r3, [r7, #20]
 8002590:	045b      	lsls	r3, r3, #17
 8002592:	461a      	mov	r2, r3
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <VL53L0X_GetInterruptThresholds+0x68>)
 8002596:	4013      	ands	r3, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800259c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10f      	bne.n	80025c4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	461a      	mov	r2, r3
 80025aa:	210c      	movs	r1, #12
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f003 fb45 	bl	8005c3c <VL53L0X_RdWord>
 80025b2:	4603      	mov	r3, r0
 80025b4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80025b6:	8abb      	ldrh	r3, [r7, #20]
 80025b8:	045b      	lsls	r3, r3, #17
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <VL53L0X_GetInterruptThresholds+0x68>)
 80025be:	4013      	ands	r3, r2
		*pThresholdHigh =
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80025c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	1ffe0000 	.word	0x1ffe0000

080025d4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025de:	2300      	movs	r3, #0
 80025e0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80025e6:	2201      	movs	r2, #1
 80025e8:	210b      	movs	r1, #11
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f003 fa7a 	bl	8005ae4 <VL53L0X_WrByte>
 80025f0:	4603      	mov	r3, r0
 80025f2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80025f4:	2200      	movs	r2, #0
 80025f6:	210b      	movs	r1, #11
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f003 fa73 	bl	8005ae4 <VL53L0X_WrByte>
 80025fe:	4603      	mov	r3, r0
 8002600:	461a      	mov	r2, r3
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	4313      	orrs	r3, r2
 8002606:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8002608:	f107 030d 	add.w	r3, r7, #13
 800260c:	461a      	mov	r2, r3
 800260e:	2113      	movs	r1, #19
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f003 fae9 	bl	8005be8 <VL53L0X_RdByte>
 8002616:	4603      	mov	r3, r0
 8002618:	461a      	mov	r2, r3
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	4313      	orrs	r3, r2
 800261e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8002620:	7bbb      	ldrb	r3, [r7, #14]
 8002622:	3301      	adds	r3, #1
 8002624:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8002626:	7b7b      	ldrb	r3, [r7, #13]
 8002628:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800262c:	2b00      	cmp	r3, #0
 800262e:	d006      	beq.n	800263e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8002630:	7bbb      	ldrb	r3, [r7, #14]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d803      	bhi.n	800263e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8002636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0d3      	beq.n	80025e6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800263e:	7bbb      	ldrb	r3, [r7, #14]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8002644:	23f4      	movs	r3, #244	; 0xf4
 8002646:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002648:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8002662:	f107 030e 	add.w	r3, r7, #14
 8002666:	461a      	mov	r2, r3
 8002668:	2113      	movs	r1, #19
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f003 fabc 	bl	8005be8 <VL53L0X_RdByte>
 8002670:	4603      	mov	r3, r0
 8002672:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8002674:	7bbb      	ldrb	r3, [r7, #14]
 8002676:	f003 0207 	and.w	r2, r3, #7
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800267e:	7bbb      	ldrb	r3, [r7, #14]
 8002680:	f003 0318 	and.w	r3, r3, #24
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8002688:	23fa      	movs	r3, #250	; 0xfa
 800268a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800268c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fa03 	bl	8002ab8 <VL53L0X_perform_ref_spad_management>
 80026b2:	4603      	mov	r3, r0
 80026b4:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80026b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80026d0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80026d4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80026d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026da:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80026dc:	f107 0308 	add.w	r3, r7, #8
 80026e0:	461a      	mov	r2, r3
 80026e2:	2128      	movs	r1, #40	; 0x28
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f003 faa9 	bl	8005c3c <VL53L0X_RdWord>
 80026ea:	4603      	mov	r3, r0
 80026ec:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80026ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d11e      	bne.n	8002734 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80026f6:	893b      	ldrh	r3, [r7, #8]
 80026f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8002700:	893b      	ldrh	r3, [r7, #8]
 8002702:	461a      	mov	r2, r3
 8002704:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002708:	429a      	cmp	r2, r3
 800270a:	dd0b      	ble.n	8002724 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800270c:	893a      	ldrh	r2, [r7, #8]
 800270e:	897b      	ldrh	r3, [r7, #10]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	b29b      	uxth	r3, r3
 8002714:	b21b      	sxth	r3, r3
 8002716:	461a      	mov	r2, r3
					* 250;
 8002718:	23fa      	movs	r3, #250	; 0xfa
 800271a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e007      	b.n	8002734 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8002724:	893b      	ldrh	r3, [r7, #8]
 8002726:	b21b      	sxth	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	23fa      	movs	r3, #250	; 0xfa
 800272c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8002734:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8002740:	b480      	push	{r7}
 8002742:	b08b      	sub	sp, #44	; 0x2c
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800274e:	2308      	movs	r3, #8
 8002750:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f04f 32ff 	mov.w	r2, #4294967295
 800275c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002770:	69b9      	ldr	r1, [r7, #24]
 8002772:	fb01 f202 	mul.w	r2, r1, r2
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
 800277e:	e030      	b.n	80027e2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	4413      	add	r3, r2
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800278e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	429a      	cmp	r2, r3
 8002794:	d11e      	bne.n	80027d4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8002796:	7ffa      	ldrb	r2, [r7, #31]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	fa42 f303 	asr.w	r3, r2, r3
 800279e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80027a4:	e016      	b.n	80027d4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80027a6:	7ffb      	ldrb	r3, [r7, #31]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00b      	beq.n	80027c8 <get_next_good_spad+0x88>
				success = 1;
 80027b0:	2301      	movs	r3, #1
 80027b2:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	fb02 f203 	mul.w	r2, r2, r3
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	4413      	add	r3, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	601a      	str	r2, [r3, #0]
				break;
 80027c6:	e009      	b.n	80027dc <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80027c8:	7ffb      	ldrb	r3, [r7, #31]
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	3301      	adds	r3, #1
 80027d2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80027d4:	6a3a      	ldr	r2, [r7, #32]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d3e4      	bcc.n	80027a6 <get_next_good_spad+0x66>
				coarseIndex++) {
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	3301      	adds	r3, #1
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80027e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d202      	bcs.n	80027f0 <get_next_good_spad+0xb0>
 80027ea:	7fbb      	ldrb	r3, [r7, #30]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0c7      	beq.n	8002780 <get_next_good_spad+0x40>
		}
	}
}
 80027f0:	bf00      	nop
 80027f2:	372c      	adds	r7, #44	; 0x2c
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	099b      	lsrs	r3, r3, #6
 800280c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800280e:	4a07      	ldr	r2, [pc, #28]	; (800282c <is_aperture+0x30>)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <is_aperture+0x22>
		isAperture = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	200002b0 	.word	0x200002b0

08002830 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	; 0x24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800283c:	2300      	movs	r3, #0
 800283e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8002840:	2308      	movs	r3, #8
 8002842:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	fbb3 f2f2 	udiv	r2, r3, r2
 8002856:	69b9      	ldr	r1, [r7, #24]
 8002858:	fb01 f202 	mul.w	r2, r1, r2
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	429a      	cmp	r2, r3
 8002866:	d302      	bcc.n	800286e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002868:	23ce      	movs	r3, #206	; 0xce
 800286a:	77fb      	strb	r3, [r7, #31]
 800286c:	e010      	b.n	8002890 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	4413      	add	r3, r2
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	b25a      	sxtb	r2, r3
 8002878:	2101      	movs	r1, #1
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	b25b      	sxtb	r3, r3
 8002882:	4313      	orrs	r3, r2
 8002884:	b259      	sxtb	r1, r3
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	4413      	add	r3, r2
 800288c:	b2ca      	uxtb	r2, r1
 800288e:	701a      	strb	r2, [r3, #0]

	return status;
 8002890:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3724      	adds	r7, #36	; 0x24
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80028aa:	2306      	movs	r3, #6
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	21b0      	movs	r1, #176	; 0xb0
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f003 f8bb 	bl	8005a2c <VL53L0X_WriteMulti>
 80028b6:	4603      	mov	r3, r0
 80028b8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80028ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80028d0:	2306      	movs	r3, #6
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	21b0      	movs	r1, #176	; 0xb0
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f003 f8d8 	bl	8005a8c <VL53L0X_ReadMulti>
 80028dc:	4603      	mov	r3, r0
 80028de:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80028e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08c      	sub	sp, #48	; 0x30
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	460b      	mov	r3, r1
 80028fa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8002902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002904:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8002906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002908:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800290a:	2300      	movs	r3, #0
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
 800290e:	e02b      	b.n	8002968 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	6a3a      	ldr	r2, [r7, #32]
 8002916:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff11 	bl	8002740 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d103      	bne.n	800292e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002926:	23ce      	movs	r3, #206	; 0xce
 8002928:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800292c:	e020      	b.n	8002970 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	461a      	mov	r2, r3
 8002932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002934:	4413      	add	r3, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ff60 	bl	80027fc <is_aperture>
 800293c:	4603      	mov	r3, r0
 800293e:	461a      	mov	r2, r3
 8002940:	7afb      	ldrb	r3, [r7, #11]
 8002942:	4293      	cmp	r3, r2
 8002944:	d003      	beq.n	800294e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002946:	23ce      	movs	r3, #206	; 0xce
 8002948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800294c:	e010      	b.n	8002970 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8002952:	6a3a      	ldr	r2, [r7, #32]
 8002954:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002956:	6838      	ldr	r0, [r7, #0]
 8002958:	f7ff ff6a 	bl	8002830 <enable_spad_bit>
		currentSpad++;
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	3301      	adds	r3, #1
 8002960:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	3301      	adds	r3, #1
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
 8002968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800296a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800296c:	429a      	cmp	r2, r3
 800296e:	d3cf      	bcc.n	8002910 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8002970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002972:	6a3a      	ldr	r2, [r7, #32]
 8002974:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8002976:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800297e:	6839      	ldr	r1, [r7, #0]
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f7ff ff8d 	bl	80028a0 <set_ref_spad_map>
 8002986:	4603      	mov	r3, r0
 8002988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800298c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002990:	2b00      	cmp	r3, #0
 8002992:	d121      	bne.n	80029d8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	4619      	mov	r1, r3
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f7ff ff93 	bl	80028c6 <get_ref_spad_map>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80029aa:	e011      	b.n	80029d0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	4413      	add	r3, r2
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	f107 0114 	add.w	r1, r7, #20
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	440b      	add	r3, r1
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d003      	beq.n	80029ca <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80029c2:	23ce      	movs	r3, #206	; 0xce
 80029c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80029c8:	e006      	b.n	80029d8 <enable_ref_spads+0xec>
			}
			i++;
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	3301      	adds	r3, #1
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80029d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d3e9      	bcc.n	80029ac <enable_ref_spads+0xc0>
		}
	}
	return status;
 80029d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3730      	adds	r7, #48	; 0x30
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002a00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8002a04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d107      	bne.n	8002a1c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8002a0c:	22c0      	movs	r2, #192	; 0xc0
 8002a0e:	2101      	movs	r1, #1
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f003 f867 	bl	8005ae4 <VL53L0X_WrByte>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8002a1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d108      	bne.n	8002a36 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8002a24:	f107 0308 	add.w	r3, r7, #8
 8002a28:	4619      	mov	r1, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fc48 	bl	80022c0 <VL53L0X_PerformSingleRangingMeasurement>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8002a36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d107      	bne.n	8002a4e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002a3e:	2201      	movs	r2, #1
 8002a40:	21ff      	movs	r1, #255	; 0xff
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f003 f84e 	bl	8005ae4 <VL53L0X_WrByte>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8002a4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d107      	bne.n	8002a66 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	21b6      	movs	r1, #182	; 0xb6
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f003 f8ee 	bl	8005c3c <VL53L0X_RdWord>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8002a66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d107      	bne.n	8002a7e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	21ff      	movs	r1, #255	; 0xff
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f003 f836 	bl	8005ae4 <VL53L0X_WrByte>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8002a7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d112      	bne.n	8002aac <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002a86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f003 f828 	bl	8005ae4 <VL53L0X_WrByte>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8002a9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d104      	bne.n	8002aac <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002aa8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8002aac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3728      	adds	r7, #40	; 0x28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b09d      	sub	sp, #116	; 0x74
 8002abc:	af06      	add	r7, sp, #24
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8002aca:	23b4      	movs	r3, #180	; 0xb4
 8002acc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8002ad4:	232c      	movs	r3, #44	; 0x2c
 8002ad6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8002ae4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002ae8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8002af2:	2306      	movs	r3, #6
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8002b1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b22:	e009      	b.n	8002b38 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8002b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b34:	3301      	adds	r3, #1
 8002b36:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d3f1      	bcc.n	8002b24 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002b40:	2201      	movs	r2, #1
 8002b42:	21ff      	movs	r1, #255	; 0xff
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f002 ffcd 	bl	8005ae4 <VL53L0X_WrByte>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8002b50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d107      	bne.n	8002b68 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8002b58:	2200      	movs	r2, #0
 8002b5a:	214f      	movs	r1, #79	; 0x4f
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f002 ffc1 	bl	8005ae4 <VL53L0X_WrByte>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8002b68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d107      	bne.n	8002b80 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8002b70:	222c      	movs	r2, #44	; 0x2c
 8002b72:	214e      	movs	r1, #78	; 0x4e
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f002 ffb5 	bl	8005ae4 <VL53L0X_WrByte>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8002b80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d107      	bne.n	8002b98 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	21ff      	movs	r1, #255	; 0xff
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f002 ffa9 	bl	8005ae4 <VL53L0X_WrByte>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8002b98:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d109      	bne.n	8002bb4 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8002ba0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	21b6      	movs	r1, #182	; 0xb6
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f002 ff9b 	bl	8005ae4 <VL53L0X_WrByte>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8002bb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d107      	bne.n	8002bcc <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2180      	movs	r1, #128	; 0x80
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f002 ff8f 	bl	8005ae4 <VL53L0X_WrByte>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8002bcc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8002bd4:	f107 0210 	add.w	r2, r7, #16
 8002bd8:	f107 0111 	add.w	r1, r7, #17
 8002bdc:	2300      	movs	r3, #0
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fbbb 	bl	800335a <VL53L0X_perform_ref_calibration>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8002bea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d121      	bne.n	8002c36 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8002bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8002bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c00:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8002c0e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002c12:	f107 0218 	add.w	r2, r7, #24
 8002c16:	9204      	str	r2, [sp, #16]
 8002c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c1a:	9203      	str	r2, [sp, #12]
 8002c1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c1e:	9202      	str	r2, [sp, #8]
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	4623      	mov	r3, r4
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7ff fe5e 	bl	80028ec <enable_ref_spads>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002c36:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d174      	bne.n	8002d28 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8002c42:	f107 0312 	add.w	r3, r7, #18
 8002c46:	4619      	mov	r1, r3
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7ff fecb 	bl	80029e4 <perform_ref_signal_measurement>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8002c54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d161      	bne.n	8002d20 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8002c5c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8002c5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d25d      	bcs.n	8002d20 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8002c64:	2300      	movs	r3, #0
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c68:	e009      	b.n	8002c7e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8002c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d3f1      	bcc.n	8002c6a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8002c86:	e002      	b.n	8002c8e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8002c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8002c8e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c94:	4413      	add	r3, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fdb0 	bl	80027fc <is_aperture>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8002ca2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d3ee      	bcc.n	8002c88 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8002caa:	2301      	movs	r3, #1
 8002cac:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8002cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8002cbe:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002cc2:	f107 0218 	add.w	r2, r7, #24
 8002cc6:	9204      	str	r2, [sp, #16]
 8002cc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cca:	9203      	str	r2, [sp, #12]
 8002ccc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cce:	9202      	str	r2, [sp, #8]
 8002cd0:	9301      	str	r3, [sp, #4]
 8002cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	4623      	mov	r3, r4
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f7ff fe06 	bl	80028ec <enable_ref_spads>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8002ce6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d11b      	bne.n	8002d26 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8002cf2:	f107 0312 	add.w	r3, r7, #18
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f7ff fe73 	bl	80029e4 <perform_ref_signal_measurement>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8002d04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10c      	bne.n	8002d26 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8002d0c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8002d0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d208      	bcs.n	8002d26 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8002d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8002d1e:	e002      	b.n	8002d26 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d24:	e000      	b.n	8002d28 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8002d26:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8002d28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f040 80af 	bne.w	8002e90 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8002d32:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8002d34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002d36:	429a      	cmp	r2, r3
 8002d38:	f240 80aa 	bls.w	8002e90 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8002d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8002d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d44:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8002d4c:	f107 031c 	add.w	r3, r7, #28
 8002d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d52:	4618      	mov	r0, r3
 8002d54:	f006 faa0 	bl	8009298 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8002d58:	8a7b      	ldrh	r3, [r7, #18]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bfb8      	it	lt
 8002d64:	425b      	neglt	r3, r3
 8002d66:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8002d6e:	e086      	b.n	8002e7e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8002d76:	f107 0314 	add.w	r3, r7, #20
 8002d7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d7e:	f7ff fcdf 	bl	8002740 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d103      	bne.n	8002d92 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002d8a:	23ce      	movs	r3, #206	; 0xce
 8002d8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8002d90:	e07e      	b.n	8002e90 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8002d92:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4413      	add	r3, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fd2e 	bl	80027fc <is_aperture>
 8002da0:	4603      	mov	r3, r0
 8002da2:	461a      	mov	r2, r3
 8002da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d003      	beq.n	8002db2 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8002db0:	e06e      	b.n	8002e90 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8002db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db4:	3301      	adds	r3, #1
 8002db6:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8002dc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fd32 	bl	8002830 <enable_spad_bit>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8002dd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10c      	bne.n	8002df4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8002dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ddc:	3301      	adds	r3, #1
 8002dde:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8002de6:	4619      	mov	r1, r3
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f7ff fd59 	bl	80028a0 <set_ref_spad_map>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8002df4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d146      	bne.n	8002e8a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8002dfc:	f107 0312 	add.w	r3, r7, #18
 8002e00:	4619      	mov	r1, r3
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f7ff fdee 	bl	80029e4 <perform_ref_signal_measurement>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8002e0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d13b      	bne.n	8002e8e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8002e16:	8a7b      	ldrh	r3, [r7, #18]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	bfb8      	it	lt
 8002e22:	425b      	neglt	r3, r3
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8002e26:	8a7b      	ldrh	r3, [r7, #18]
 8002e28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d21c      	bcs.n	8002e68 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d914      	bls.n	8002e60 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8002e36:	f107 031c 	add.w	r3, r7, #28
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f7ff fd2f 	bl	80028a0 <set_ref_spad_map>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8002e4e:	f107 011c 	add.w	r1, r7, #28
 8002e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e54:	4618      	mov	r0, r3
 8002e56:	f006 fa1f 	bl	8009298 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8002e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002e66:	e00a      	b.n	8002e7e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8002e72:	f107 031c 	add.w	r3, r7, #28
 8002e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f006 fa0d 	bl	8009298 <memcpy>
		while (!complete) {
 8002e7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f43f af74 	beq.w	8002d70 <VL53L0X_perform_ref_spad_management+0x2b8>
 8002e88:	e002      	b.n	8002e90 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8002e8a:	bf00      	nop
 8002e8c:	e000      	b.n	8002e90 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8002e8e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002e90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d115      	bne.n	8002ec4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e9c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002ea4:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8002ec4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	375c      	adds	r7, #92	; 0x5c
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd90      	pop	{r4, r7, pc}

08002ed0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b093      	sub	sp, #76	; 0x4c
 8002ed4:	af06      	add	r7, sp, #24
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	4613      	mov	r3, r2
 8002edc:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8002ee8:	23b4      	movs	r3, #180	; 0xb4
 8002eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8002eee:	2306      	movs	r3, #6
 8002ef0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8002ef2:	232c      	movs	r3, #44	; 0x2c
 8002ef4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	21ff      	movs	r1, #255	; 0xff
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f002 fdf2 	bl	8005ae4 <VL53L0X_WrByte>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8002f06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d107      	bne.n	8002f1e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8002f0e:	2200      	movs	r2, #0
 8002f10:	214f      	movs	r1, #79	; 0x4f
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f002 fde6 	bl	8005ae4 <VL53L0X_WrByte>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8002f1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d107      	bne.n	8002f36 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8002f26:	222c      	movs	r2, #44	; 0x2c
 8002f28:	214e      	movs	r1, #78	; 0x4e
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f002 fdda 	bl	8005ae4 <VL53L0X_WrByte>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8002f36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	21ff      	movs	r1, #255	; 0xff
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f002 fdce 	bl	8005ae4 <VL53L0X_WrByte>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8002f4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8002f56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	21b6      	movs	r1, #182	; 0xb6
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f002 fdc0 	bl	8005ae4 <VL53L0X_WrByte>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6e:	e009      	b.n	8002f84 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	3301      	adds	r3, #1
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d3f1      	bcc.n	8002f70 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d011      	beq.n	8002fb6 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8002f92:	e002      	b.n	8002f9a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	3301      	adds	r3, #1
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8002f9a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	4413      	add	r3, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fc2a 	bl	80027fc <is_aperture>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d103      	bne.n	8002fb6 <VL53L0X_set_reference_spads+0xe6>
 8002fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d3ee      	bcc.n	8002f94 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8002fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fc6:	79f9      	ldrb	r1, [r7, #7]
 8002fc8:	f107 0214 	add.w	r2, r7, #20
 8002fcc:	9204      	str	r2, [sp, #16]
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	9203      	str	r2, [sp, #12]
 8002fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fd4:	9202      	str	r2, [sp, #8]
 8002fd6:	9301      	str	r3, [sp, #4]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	4623      	mov	r3, r4
 8002fde:	4602      	mov	r2, r0
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f7ff fc83 	bl	80028ec <enable_ref_spads>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8002fec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10c      	bne.n	800300e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	79fa      	ldrb	r2, [r7, #7]
 800300a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800300e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003012:	4618      	mov	r0, r3
 8003014:	3734      	adds	r7, #52	; 0x34
 8003016:	46bd      	mov	sp, r7
 8003018:	bd90      	pop	{r4, r7, pc}

0800301a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800302a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	2100      	movs	r1, #0
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f002 fd50 	bl	8005ae4 <VL53L0X_WrByte>
 8003044:	4603      	mov	r3, r0
 8003046:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8003048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d104      	bne.n	800305a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f9bf 	bl	80033d4 <VL53L0X_measurement_poll_for_completion>
 8003056:	4603      	mov	r3, r0
 8003058:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800305a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d105      	bne.n	800306e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003062:	2100      	movs	r1, #0
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff fab5 	bl	80025d4 <VL53L0X_ClearInterruptMask>
 800306a:	4603      	mov	r3, r0
 800306c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800306e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8003076:	2200      	movs	r2, #0
 8003078:	2100      	movs	r1, #0
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f002 fd32 	bl	8005ae4 <VL53L0X_WrByte>
 8003080:	4603      	mov	r3, r0
 8003082:	73fb      	strb	r3, [r7, #15]

	return Status;
 8003084:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	4608      	mov	r0, r1
 800309a:	4611      	mov	r1, r2
 800309c:	461a      	mov	r2, r3
 800309e:	4603      	mov	r3, r0
 80030a0:	70fb      	strb	r3, [r7, #3]
 80030a2:	460b      	mov	r3, r1
 80030a4:	70bb      	strb	r3, [r7, #2]
 80030a6:	4613      	mov	r3, r2
 80030a8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80030b2:	2201      	movs	r2, #1
 80030b4:	21ff      	movs	r1, #255	; 0xff
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f002 fd14 	bl	8005ae4 <VL53L0X_WrByte>
 80030bc:	4603      	mov	r3, r0
 80030be:	461a      	mov	r2, r3
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2100      	movs	r1, #0
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f002 fd0a 	bl	8005ae4 <VL53L0X_WrByte>
 80030d0:	4603      	mov	r3, r0
 80030d2:	461a      	mov	r2, r3
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80030da:	2200      	movs	r2, #0
 80030dc:	21ff      	movs	r1, #255	; 0xff
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f002 fd00 	bl	8005ae4 <VL53L0X_WrByte>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01e      	beq.n	8003132 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80030f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d009      	beq.n	8003110 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	21cb      	movs	r1, #203	; 0xcb
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f002 fd71 	bl	8005be8 <VL53L0X_RdByte>
 8003106:	4603      	mov	r3, r0
 8003108:	461a      	mov	r2, r3
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	4313      	orrs	r3, r2
 800310e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8003110:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003114:	2b00      	cmp	r3, #0
 8003116:	d02a      	beq.n	800316e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8003118:	f107 030e 	add.w	r3, r7, #14
 800311c:	461a      	mov	r2, r3
 800311e:	21ee      	movs	r1, #238	; 0xee
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f002 fd61 	bl	8005be8 <VL53L0X_RdByte>
 8003126:	4603      	mov	r3, r0
 8003128:	461a      	mov	r2, r3
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	4313      	orrs	r3, r2
 800312e:	73fb      	strb	r3, [r7, #15]
 8003130:	e01d      	b.n	800316e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8003132:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800313a:	78bb      	ldrb	r3, [r7, #2]
 800313c:	461a      	mov	r2, r3
 800313e:	21cb      	movs	r1, #203	; 0xcb
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f002 fccf 	bl	8005ae4 <VL53L0X_WrByte>
 8003146:	4603      	mov	r3, r0
 8003148:	461a      	mov	r2, r3
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	4313      	orrs	r3, r2
 800314e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8003150:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8003158:	787b      	ldrb	r3, [r7, #1]
 800315a:	2280      	movs	r2, #128	; 0x80
 800315c:	21ee      	movs	r1, #238	; 0xee
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f002 fd0e 	bl	8005b80 <VL53L0X_UpdateByte>
 8003164:	4603      	mov	r3, r0
 8003166:	461a      	mov	r2, r3
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	4313      	orrs	r3, r2
 800316c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800316e:	2201      	movs	r2, #1
 8003170:	21ff      	movs	r1, #255	; 0xff
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f002 fcb6 	bl	8005ae4 <VL53L0X_WrByte>
 8003178:	4603      	mov	r3, r0
 800317a:	461a      	mov	r2, r3
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	4313      	orrs	r3, r2
 8003180:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003182:	2201      	movs	r2, #1
 8003184:	2100      	movs	r1, #0
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f002 fcac 	bl	8005ae4 <VL53L0X_WrByte>
 800318c:	4603      	mov	r3, r0
 800318e:	461a      	mov	r2, r3
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	4313      	orrs	r3, r2
 8003194:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003196:	2200      	movs	r2, #0
 8003198:	21ff      	movs	r1, #255	; 0xff
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f002 fca2 	bl	8005ae4 <VL53L0X_WrByte>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461a      	mov	r2, r3
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80031aa:	7bbb      	ldrb	r3, [r7, #14]
 80031ac:	f023 0310 	bic.w	r3, r3, #16
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	701a      	strb	r2, [r3, #0]

	return Status;
 80031b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b08a      	sub	sp, #40	; 0x28
 80031c6:	af04      	add	r7, sp, #16
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	4611      	mov	r1, r2
 80031ce:	461a      	mov	r2, r3
 80031d0:	460b      	mov	r3, r1
 80031d2:	71fb      	strb	r3, [r7, #7]
 80031d4:	4613      	mov	r3, r2
 80031d6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031d8:	2300      	movs	r3, #0
 80031da:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80031ec:	79bb      	ldrb	r3, [r7, #6]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80031f8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80031fa:	2201      	movs	r2, #1
 80031fc:	2101      	movs	r1, #1
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f002 fc70 	bl	8005ae4 <VL53L0X_WrByte>
 8003204:	4603      	mov	r3, r0
 8003206:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8003208:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d105      	bne.n	800321c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8003210:	2140      	movs	r1, #64	; 0x40
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f7ff ff01 	bl	800301a <VL53L0X_perform_single_ref_calibration>
 8003218:	4603      	mov	r3, r0
 800321a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800321c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d115      	bne.n	8003250 <VL53L0X_perform_vhv_calibration+0x8e>
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d112      	bne.n	8003250 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800322a:	7d39      	ldrb	r1, [r7, #20]
 800322c:	7d7a      	ldrb	r2, [r7, #21]
 800322e:	2300      	movs	r3, #0
 8003230:	9303      	str	r3, [sp, #12]
 8003232:	2301      	movs	r3, #1
 8003234:	9302      	str	r3, [sp, #8]
 8003236:	f107 0313 	add.w	r3, r7, #19
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	460b      	mov	r3, r1
 8003242:	2101      	movs	r1, #1
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7ff ff23 	bl	8003090 <VL53L0X_ref_calibration_io>
 800324a:	4603      	mov	r3, r0
 800324c:	75fb      	strb	r3, [r7, #23]
 800324e:	e002      	b.n	8003256 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2200      	movs	r2, #0
 8003254:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8003256:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d112      	bne.n	8003284 <VL53L0X_perform_vhv_calibration+0xc2>
 800325e:	79bb      	ldrb	r3, [r7, #6]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00f      	beq.n	8003284 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003264:	7dbb      	ldrb	r3, [r7, #22]
 8003266:	461a      	mov	r2, r3
 8003268:	2101      	movs	r1, #1
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f002 fc3a 	bl	8005ae4 <VL53L0X_WrByte>
 8003270:	4603      	mov	r3, r0
 8003272:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8003274:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d103      	bne.n	8003284 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	7dba      	ldrb	r2, [r7, #22]
 8003280:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8003284:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	; 0x28
 8003294:	af04      	add	r7, sp, #16
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	4611      	mov	r1, r2
 800329c:	461a      	mov	r2, r3
 800329e:	460b      	mov	r3, r1
 80032a0:	71fb      	strb	r3, [r7, #7]
 80032a2:	4613      	mov	r3, r2
 80032a4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80032ae:	2300      	movs	r3, #0
 80032b0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80032b6:	79bb      	ldrb	r3, [r7, #6]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80032c2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80032c4:	2202      	movs	r2, #2
 80032c6:	2101      	movs	r1, #1
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f002 fc0b 	bl	8005ae4 <VL53L0X_WrByte>
 80032ce:	4603      	mov	r3, r0
 80032d0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80032d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d105      	bne.n	80032e6 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80032da:	2100      	movs	r1, #0
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f7ff fe9c 	bl	800301a <VL53L0X_perform_single_ref_calibration>
 80032e2:	4603      	mov	r3, r0
 80032e4:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80032e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d115      	bne.n	800331a <VL53L0X_perform_phase_calibration+0x8a>
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d112      	bne.n	800331a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80032f4:	7d39      	ldrb	r1, [r7, #20]
 80032f6:	7d7a      	ldrb	r2, [r7, #21]
 80032f8:	2301      	movs	r3, #1
 80032fa:	9303      	str	r3, [sp, #12]
 80032fc:	2300      	movs	r3, #0
 80032fe:	9302      	str	r3, [sp, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	f107 0313 	add.w	r3, r7, #19
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	460b      	mov	r3, r1
 800330c:	2101      	movs	r1, #1
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f7ff febe 	bl	8003090 <VL53L0X_ref_calibration_io>
 8003314:	4603      	mov	r3, r0
 8003316:	75fb      	strb	r3, [r7, #23]
 8003318:	e002      	b.n	8003320 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8003320:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d112      	bne.n	800334e <VL53L0X_perform_phase_calibration+0xbe>
 8003328:	79bb      	ldrb	r3, [r7, #6]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00f      	beq.n	800334e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800332e:	7dbb      	ldrb	r3, [r7, #22]
 8003330:	461a      	mov	r2, r3
 8003332:	2101      	movs	r1, #1
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f002 fbd5 	bl	8005ae4 <VL53L0X_WrByte>
 800333a:	4603      	mov	r3, r0
 800333c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800333e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	7dba      	ldrb	r2, [r7, #22]
 800334a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800334e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003368:	2300      	movs	r3, #0
 800336a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003376:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	2300      	movs	r3, #0
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f7ff ff1f 	bl	80031c2 <VL53L0X_perform_vhv_calibration>
 8003384:	4603      	mov	r3, r0
 8003386:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003388:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d107      	bne.n	80033a0 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	2300      	movs	r3, #0
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f7ff ff7a 	bl	8003290 <VL53L0X_perform_phase_calibration>
 800339c:	4603      	mov	r3, r0
 800339e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80033a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10f      	bne.n	80033c8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80033a8:	7dbb      	ldrb	r3, [r7, #22]
 80033aa:	461a      	mov	r2, r3
 80033ac:	2101      	movs	r1, #1
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f002 fb98 	bl	8005ae4 <VL53L0X_WrByte>
 80033b4:	4603      	mov	r3, r0
 80033b6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80033b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d103      	bne.n	80033c8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	7dba      	ldrb	r2, [r7, #22]
 80033c4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80033c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033dc:	2300      	movs	r3, #0
 80033de:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80033e8:	f107 030f 	add.w	r3, r7, #15
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fe fe02 	bl	8001ff8 <VL53L0X_GetMeasurementDataReady>
 80033f4:	4603      	mov	r3, r0
 80033f6:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80033f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d110      	bne.n	8003422 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d00f      	beq.n	8003426 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	3301      	adds	r3, #1
 800340a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003412:	d302      	bcc.n	800341a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8003414:	23f9      	movs	r3, #249	; 0xf9
 8003416:	75fb      	strb	r3, [r7, #23]
			break;
 8003418:	e006      	b.n	8003428 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f002 fc82 	bl	8005d24 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8003420:	e7e2      	b.n	80033e8 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8003426:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8003428:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	3301      	adds	r3, #1
 8003446:	b2db      	uxtb	r3, r3
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800345a:	b480      	push	{r7}
 800345c:	b085      	sub	sp, #20
 800345e:	af00      	add	r7, sp, #0
 8003460:	4603      	mov	r3, r0
 8003462:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	085b      	lsrs	r3, r3, #1
 800346c:	b2db      	uxtb	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800348c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003490:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8003492:	e002      	b.n	800349a <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d8f8      	bhi.n	8003494 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80034a2:	e017      	b.n	80034d4 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4413      	add	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d30b      	bcc.n	80034c8 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4413      	add	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	4413      	add	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e002      	b.n	80034ce <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	089b      	lsrs	r3, r3, #2
 80034d2:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e4      	bne.n	80034a4 <VL53L0X_isqrt+0x24>
	}

	return res;
 80034da:	68fb      	ldr	r3, [r7, #12]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80034f4:	2200      	movs	r2, #0
 80034f6:	2183      	movs	r1, #131	; 0x83
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f002 faf3 	bl	8005ae4 <VL53L0X_WrByte>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	4313      	orrs	r3, r2
 8003506:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8003508:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d11e      	bne.n	800354e <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8003514:	f107 030f 	add.w	r3, r7, #15
 8003518:	461a      	mov	r2, r3
 800351a:	2183      	movs	r1, #131	; 0x83
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f002 fb63 	bl	8005be8 <VL53L0X_RdByte>
 8003522:	4603      	mov	r3, r0
 8003524:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10a      	bne.n	8003542 <VL53L0X_device_read_strobe+0x5a>
 800352c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d106      	bne.n	8003542 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	3301      	adds	r3, #1
 8003538:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003540:	d3e8      	bcc.n	8003514 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003548:	d301      	bcc.n	800354e <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800354a:	23f9      	movs	r3, #249	; 0xf9
 800354c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800354e:	2201      	movs	r2, #1
 8003550:	2183      	movs	r1, #131	; 0x83
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f002 fac6 	bl	8005ae4 <VL53L0X_WrByte>
 8003558:	4603      	mov	r3, r0
 800355a:	461a      	mov	r2, r3
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	4313      	orrs	r3, r2
 8003560:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8003562:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b098      	sub	sp, #96	; 0x60
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	460b      	mov	r3, r1
 8003578:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800357a:	2300      	movs	r3, #0
 800357c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8003580:	2300      	movs	r3, #0
 8003582:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800359e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80035a2:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80035b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80035ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035be:	2b07      	cmp	r3, #7
 80035c0:	f000 8408 	beq.w	8003dd4 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80035c4:	2201      	movs	r2, #1
 80035c6:	2180      	movs	r1, #128	; 0x80
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f002 fa8b 	bl	8005ae4 <VL53L0X_WrByte>
 80035ce:	4603      	mov	r3, r0
 80035d0:	461a      	mov	r2, r3
 80035d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80035dc:	2201      	movs	r2, #1
 80035de:	21ff      	movs	r1, #255	; 0xff
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f002 fa7f 	bl	8005ae4 <VL53L0X_WrByte>
 80035e6:	4603      	mov	r3, r0
 80035e8:	461a      	mov	r2, r3
 80035ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80035f4:	2200      	movs	r2, #0
 80035f6:	2100      	movs	r1, #0
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f002 fa73 	bl	8005ae4 <VL53L0X_WrByte>
 80035fe:	4603      	mov	r3, r0
 8003600:	461a      	mov	r2, r3
 8003602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003606:	4313      	orrs	r3, r2
 8003608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800360c:	2206      	movs	r2, #6
 800360e:	21ff      	movs	r1, #255	; 0xff
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f002 fa67 	bl	8005ae4 <VL53L0X_WrByte>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800361e:	4313      	orrs	r3, r2
 8003620:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003624:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8003628:	461a      	mov	r2, r3
 800362a:	2183      	movs	r1, #131	; 0x83
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f002 fadb 	bl	8005be8 <VL53L0X_RdByte>
 8003632:	4603      	mov	r3, r0
 8003634:	461a      	mov	r2, r3
 8003636:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800363a:	4313      	orrs	r3, r2
 800363c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8003640:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003644:	f043 0304 	orr.w	r3, r3, #4
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	2183      	movs	r1, #131	; 0x83
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f002 fa48 	bl	8005ae4 <VL53L0X_WrByte>
 8003654:	4603      	mov	r3, r0
 8003656:	461a      	mov	r2, r3
 8003658:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800365c:	4313      	orrs	r3, r2
 800365e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8003662:	2207      	movs	r2, #7
 8003664:	21ff      	movs	r1, #255	; 0xff
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f002 fa3c 	bl	8005ae4 <VL53L0X_WrByte>
 800366c:	4603      	mov	r3, r0
 800366e:	461a      	mov	r2, r3
 8003670:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003674:	4313      	orrs	r3, r2
 8003676:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800367a:	2201      	movs	r2, #1
 800367c:	2181      	movs	r1, #129	; 0x81
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f002 fa30 	bl	8005ae4 <VL53L0X_WrByte>
 8003684:	4603      	mov	r3, r0
 8003686:	461a      	mov	r2, r3
 8003688:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800368c:	4313      	orrs	r3, r2
 800368e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f002 fb46 	bl	8005d24 <VL53L0X_PollingDelay>
 8003698:	4603      	mov	r3, r0
 800369a:	461a      	mov	r2, r3
 800369c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80036a6:	2201      	movs	r2, #1
 80036a8:	2180      	movs	r1, #128	; 0x80
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f002 fa1a 	bl	8005ae4 <VL53L0X_WrByte>
 80036b0:	4603      	mov	r3, r0
 80036b2:	461a      	mov	r2, r3
 80036b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 8098 	beq.w	80037fa <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80036ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036ce:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f040 8091 	bne.w	80037fa <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80036d8:	226b      	movs	r2, #107	; 0x6b
 80036da:	2194      	movs	r1, #148	; 0x94
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f002 fa01 	bl	8005ae4 <VL53L0X_WrByte>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff fef9 	bl	80034e8 <VL53L0X_device_read_strobe>
 80036f6:	4603      	mov	r3, r0
 80036f8:	461a      	mov	r2, r3
 80036fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036fe:	4313      	orrs	r3, r2
 8003700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003704:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003708:	461a      	mov	r2, r3
 800370a:	2190      	movs	r1, #144	; 0x90
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f002 facd 	bl	8005cac <VL53L0X_RdDWord>
 8003712:	4603      	mov	r3, r0
 8003714:	461a      	mov	r2, r3
 8003716:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800371a:	4313      	orrs	r3, r2
 800371c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	0a1b      	lsrs	r3, r3, #8
 8003724:	b2db      	uxtb	r3, r3
 8003726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800372a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	0bdb      	lsrs	r3, r3, #15
 8003732:	b2db      	uxtb	r3, r3
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800373c:	2224      	movs	r2, #36	; 0x24
 800373e:	2194      	movs	r1, #148	; 0x94
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f002 f9cf 	bl	8005ae4 <VL53L0X_WrByte>
 8003746:	4603      	mov	r3, r0
 8003748:	461a      	mov	r2, r3
 800374a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800374e:	4313      	orrs	r3, r2
 8003750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff fec7 	bl	80034e8 <VL53L0X_device_read_strobe>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003762:	4313      	orrs	r3, r2
 8003764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003768:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800376c:	461a      	mov	r2, r3
 800376e:	2190      	movs	r1, #144	; 0x90
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f002 fa9b 	bl	8005cac <VL53L0X_RdDWord>
 8003776:	4603      	mov	r3, r0
 8003778:	461a      	mov	r2, r3
 800377a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800377e:	4313      	orrs	r3, r2
 8003780:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	0e1b      	lsrs	r3, r3, #24
 8003788:	b2db      	uxtb	r3, r3
 800378a:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	0c1b      	lsrs	r3, r3, #16
 8003790:	b2db      	uxtb	r3, r3
 8003792:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	b2db      	uxtb	r3, r3
 800379a:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80037a2:	2225      	movs	r2, #37	; 0x25
 80037a4:	2194      	movs	r1, #148	; 0x94
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f002 f99c 	bl	8005ae4 <VL53L0X_WrByte>
 80037ac:	4603      	mov	r3, r0
 80037ae:	461a      	mov	r2, r3
 80037b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff fe94 	bl	80034e8 <VL53L0X_device_read_strobe>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80037ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037d2:	461a      	mov	r2, r3
 80037d4:	2190      	movs	r1, #144	; 0x90
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f002 fa68 	bl	8005cac <VL53L0X_RdDWord>
 80037dc:	4603      	mov	r3, r0
 80037de:	461a      	mov	r2, r3
 80037e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	0e1b      	lsrs	r3, r3, #24
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	0c1b      	lsrs	r3, r3, #16
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8189 	beq.w	8003b18 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8003806:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800380a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 8182 	bne.w	8003b18 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8003814:	2202      	movs	r2, #2
 8003816:	2194      	movs	r1, #148	; 0x94
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f002 f963 	bl	8005ae4 <VL53L0X_WrByte>
 800381e:	4603      	mov	r3, r0
 8003820:	461a      	mov	r2, r3
 8003822:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003826:	4313      	orrs	r3, r2
 8003828:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff fe5b 	bl	80034e8 <VL53L0X_device_read_strobe>
 8003832:	4603      	mov	r3, r0
 8003834:	461a      	mov	r2, r3
 8003836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800383a:	4313      	orrs	r3, r2
 800383c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8003840:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8003844:	461a      	mov	r2, r3
 8003846:	2190      	movs	r1, #144	; 0x90
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f002 f9cd 	bl	8005be8 <VL53L0X_RdByte>
 800384e:	4603      	mov	r3, r0
 8003850:	461a      	mov	r2, r3
 8003852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003856:	4313      	orrs	r3, r2
 8003858:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800385c:	227b      	movs	r2, #123	; 0x7b
 800385e:	2194      	movs	r1, #148	; 0x94
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f002 f93f 	bl	8005ae4 <VL53L0X_WrByte>
 8003866:	4603      	mov	r3, r0
 8003868:	461a      	mov	r2, r3
 800386a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800386e:	4313      	orrs	r3, r2
 8003870:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff fe37 	bl	80034e8 <VL53L0X_device_read_strobe>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003882:	4313      	orrs	r3, r2
 8003884:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8003888:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800388c:	461a      	mov	r2, r3
 800388e:	2190      	movs	r1, #144	; 0x90
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f002 f9a9 	bl	8005be8 <VL53L0X_RdByte>
 8003896:	4603      	mov	r3, r0
 8003898:	461a      	mov	r2, r3
 800389a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800389e:	4313      	orrs	r3, r2
 80038a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80038a4:	2277      	movs	r2, #119	; 0x77
 80038a6:	2194      	movs	r1, #148	; 0x94
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f002 f91b 	bl	8005ae4 <VL53L0X_WrByte>
 80038ae:	4603      	mov	r3, r0
 80038b0:	461a      	mov	r2, r3
 80038b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fe13 	bl	80034e8 <VL53L0X_device_read_strobe>
 80038c2:	4603      	mov	r3, r0
 80038c4:	461a      	mov	r2, r3
 80038c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80038d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038d4:	461a      	mov	r2, r3
 80038d6:	2190      	movs	r1, #144	; 0x90
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f002 f9e7 	bl	8005cac <VL53L0X_RdDWord>
 80038de:	4603      	mov	r3, r0
 80038e0:	461a      	mov	r2, r3
 80038e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	0e5b      	lsrs	r3, r3, #25
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	0c9b      	lsrs	r3, r3, #18
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003904:	b2db      	uxtb	r3, r3
 8003906:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	0adb      	lsrs	r3, r3, #11
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003912:	b2db      	uxtb	r3, r3
 8003914:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	b2db      	uxtb	r3, r3
 800391c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003920:	b2db      	uxtb	r3, r3
 8003922:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	b2db      	uxtb	r3, r3
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003936:	2278      	movs	r2, #120	; 0x78
 8003938:	2194      	movs	r1, #148	; 0x94
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f002 f8d2 	bl	8005ae4 <VL53L0X_WrByte>
 8003940:	4603      	mov	r3, r0
 8003942:	461a      	mov	r2, r3
 8003944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003948:	4313      	orrs	r3, r2
 800394a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff fdca 	bl	80034e8 <VL53L0X_device_read_strobe>
 8003954:	4603      	mov	r3, r0
 8003956:	461a      	mov	r2, r3
 8003958:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800395c:	4313      	orrs	r3, r2
 800395e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003962:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003966:	461a      	mov	r2, r3
 8003968:	2190      	movs	r1, #144	; 0x90
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f002 f99e 	bl	8005cac <VL53L0X_RdDWord>
 8003970:	4603      	mov	r3, r0
 8003972:	461a      	mov	r2, r3
 8003974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003978:	4313      	orrs	r3, r2
 800397a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003980:	0f5b      	lsrs	r3, r3, #29
 8003982:	b2db      	uxtb	r3, r3
 8003984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003988:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800398a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800398e:	4413      	add	r3, r2
 8003990:	b2db      	uxtb	r3, r3
 8003992:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	0d9b      	lsrs	r3, r3, #22
 8003998:	b2db      	uxtb	r3, r3
 800399a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	0bdb      	lsrs	r3, r3, #15
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80039be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	019b      	lsls	r3, r3, #6
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80039de:	2279      	movs	r2, #121	; 0x79
 80039e0:	2194      	movs	r1, #148	; 0x94
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f002 f87e 	bl	8005ae4 <VL53L0X_WrByte>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461a      	mov	r2, r3
 80039ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff fd76 	bl	80034e8 <VL53L0X_device_read_strobe>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003a0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2190      	movs	r1, #144	; 0x90
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f002 f94a 	bl	8005cac <VL53L0X_RdDWord>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	0e9b      	lsrs	r3, r3, #26
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a30:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8003a32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003a36:	4413      	add	r3, r2
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	0cdb      	lsrs	r3, r3, #19
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	0b1b      	lsrs	r3, r3, #12
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8003a78:	227a      	movs	r2, #122	; 0x7a
 8003a7a:	2194      	movs	r1, #148	; 0x94
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f002 f831 	bl	8005ae4 <VL53L0X_WrByte>
 8003a82:	4603      	mov	r3, r0
 8003a84:	461a      	mov	r2, r3
 8003a86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff fd29 	bl	80034e8 <VL53L0X_device_read_strobe>
 8003a96:	4603      	mov	r3, r0
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003aa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2190      	movs	r1, #144	; 0x90
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f002 f8fd 	bl	8005cac <VL53L0X_RdDWord>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	0f9b      	lsrs	r3, r3, #30
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aca:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8003acc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ad0:	4413      	add	r3, r2
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	0ddb      	lsrs	r3, r3, #23
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	0c1b      	lsrs	r3, r3, #16
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	0a5b      	lsrs	r3, r3, #9
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	089b      	lsrs	r3, r3, #2
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8003b12:	2300      	movs	r3, #0
 8003b14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80f1 	beq.w	8003d06 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8003b24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b28:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f040 80ea 	bne.w	8003d06 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003b32:	227b      	movs	r2, #123	; 0x7b
 8003b34:	2194      	movs	r1, #148	; 0x94
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f001 ffd4 	bl	8005ae4 <VL53L0X_WrByte>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff fccc 	bl	80034e8 <VL53L0X_device_read_strobe>
 8003b50:	4603      	mov	r3, r0
 8003b52:	461a      	mov	r2, r3
 8003b54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8003b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b62:	461a      	mov	r2, r3
 8003b64:	2190      	movs	r1, #144	; 0x90
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f002 f8a0 	bl	8005cac <VL53L0X_RdDWord>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003b7a:	227c      	movs	r2, #124	; 0x7c
 8003b7c:	2194      	movs	r1, #148	; 0x94
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f001 ffb0 	bl	8005ae4 <VL53L0X_WrByte>
 8003b84:	4603      	mov	r3, r0
 8003b86:	461a      	mov	r2, r3
 8003b88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff fca8 	bl	80034e8 <VL53L0X_device_read_strobe>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003baa:	461a      	mov	r2, r3
 8003bac:	2190      	movs	r1, #144	; 0x90
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f002 f87c 	bl	8005cac <VL53L0X_RdDWord>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003bc2:	2273      	movs	r2, #115	; 0x73
 8003bc4:	2194      	movs	r1, #148	; 0x94
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f001 ff8c 	bl	8005ae4 <VL53L0X_WrByte>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff fc84 	bl	80034e8 <VL53L0X_device_read_strobe>
 8003be0:	4603      	mov	r3, r0
 8003be2:	461a      	mov	r2, r3
 8003be4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003bee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2190      	movs	r1, #144	; 0x90
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f002 f858 	bl	8005cac <VL53L0X_RdDWord>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003c12:	2274      	movs	r2, #116	; 0x74
 8003c14:	2194      	movs	r1, #148	; 0x94
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f001 ff64 	bl	8005ae4 <VL53L0X_WrByte>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff fc5c 	bl	80034e8 <VL53L0X_device_read_strobe>
 8003c30:	4603      	mov	r3, r0
 8003c32:	461a      	mov	r2, r3
 8003c34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003c3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c42:	461a      	mov	r2, r3
 8003c44:	2190      	movs	r1, #144	; 0x90
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f002 f830 	bl	8005cac <VL53L0X_RdDWord>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8003c5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c60:	4313      	orrs	r3, r2
 8003c62:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003c64:	2275      	movs	r2, #117	; 0x75
 8003c66:	2194      	movs	r1, #148	; 0x94
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f001 ff3b 	bl	8005ae4 <VL53L0X_WrByte>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	461a      	mov	r2, r3
 8003c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff fc33 	bl	80034e8 <VL53L0X_device_read_strobe>
 8003c82:	4603      	mov	r3, r0
 8003c84:	461a      	mov	r2, r3
 8003c86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003c90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c94:	461a      	mov	r2, r3
 8003c96:	2190      	movs	r1, #144	; 0x90
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f002 f807 	bl	8005cac <VL53L0X_RdDWord>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003cb4:	2276      	movs	r2, #118	; 0x76
 8003cb6:	2194      	movs	r1, #148	; 0x94
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f001 ff13 	bl	8005ae4 <VL53L0X_WrByte>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff fc0b 	bl	80034e8 <VL53L0X_device_read_strobe>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003ce0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2190      	movs	r1, #144	; 0x90
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f001 ffdf 	bl	8005cac <VL53L0X_RdDWord>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8003d00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d02:	4313      	orrs	r3, r2
 8003d04:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8003d06:	2200      	movs	r2, #0
 8003d08:	2181      	movs	r1, #129	; 0x81
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f001 feea 	bl	8005ae4 <VL53L0X_WrByte>
 8003d10:	4603      	mov	r3, r0
 8003d12:	461a      	mov	r2, r3
 8003d14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003d1e:	2206      	movs	r2, #6
 8003d20:	21ff      	movs	r1, #255	; 0xff
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f001 fede 	bl	8005ae4 <VL53L0X_WrByte>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003d36:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	2183      	movs	r1, #131	; 0x83
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f001 ff52 	bl	8005be8 <VL53L0X_RdByte>
 8003d44:	4603      	mov	r3, r0
 8003d46:	461a      	mov	r2, r3
 8003d48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003d52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003d56:	f023 0304 	bic.w	r3, r3, #4
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2183      	movs	r1, #131	; 0x83
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f001 febf 	bl	8005ae4 <VL53L0X_WrByte>
 8003d66:	4603      	mov	r3, r0
 8003d68:	461a      	mov	r2, r3
 8003d6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003d74:	2201      	movs	r2, #1
 8003d76:	21ff      	movs	r1, #255	; 0xff
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f001 feb3 	bl	8005ae4 <VL53L0X_WrByte>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	461a      	mov	r2, r3
 8003d82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	2100      	movs	r1, #0
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f001 fea7 	bl	8005ae4 <VL53L0X_WrByte>
 8003d96:	4603      	mov	r3, r0
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003da4:	2200      	movs	r2, #0
 8003da6:	21ff      	movs	r1, #255	; 0xff
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f001 fe9b 	bl	8005ae4 <VL53L0X_WrByte>
 8003dae:	4603      	mov	r3, r0
 8003db0:	461a      	mov	r2, r3
 8003db2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2180      	movs	r1, #128	; 0x80
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f001 fe8f 	bl	8005ae4 <VL53L0X_WrByte>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	461a      	mov	r2, r3
 8003dca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003dd4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f040 808f 	bne.w	8003efc <VL53L0X_get_info_from_device+0x98e>
 8003dde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003de2:	2b07      	cmp	r3, #7
 8003de4:	f000 808a 	beq.w	8003efc <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d024      	beq.n	8003e3c <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8003df2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003df6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d11e      	bne.n	8003e3c <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8003e04:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8003e0e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003e12:	2300      	movs	r3, #0
 8003e14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e16:	e00e      	b.n	8003e36 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8003e18:	f107 0208 	add.w	r2, r7, #8
 8003e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1e:	4413      	add	r3, r2
 8003e20:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8003e2c:	460a      	mov	r2, r1
 8003e2e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e32:	3301      	adds	r3, #1
 8003e34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e38:	2b05      	cmp	r3, #5
 8003e3a:	dded      	ble.n	8003e18 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d018      	beq.n	8003e78 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8003e46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e4a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d112      	bne.n	8003e78 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003e52:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003e5c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	33f3      	adds	r3, #243	; 0xf3
 8003e6a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8003e6c:	f107 0310 	add.w	r3, r7, #16
 8003e70:	4619      	mov	r1, r3
 8003e72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e74:	f005 fa46 	bl	8009304 <strcpy>

		}

		if (((option & 4) == 4) &&
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d030      	beq.n	8003ee4 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8003e82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e86:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d12a      	bne.n	8003ee4 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8003e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea0:	025b      	lsls	r3, r3, #9
 8003ea2:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ea8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8003eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d011      	beq.n	8003edc <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8003eb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8003ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
 8003eca:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8003ecc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8003ed0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003ed4:	425b      	negs	r3, r3
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8003edc:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8003ee4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8003ef2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003efc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3760      	adds	r7, #96	; 0x60
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8003f14:	f240 6277 	movw	r2, #1655	; 0x677
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8003f20:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003f24:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	fb02 f303 	mul.w	r3, r2, r3
 8003f34:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8003f36:	68bb      	ldr	r3, [r7, #8]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d017      	beq.n	8003f8e <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8003f64:	e005      	b.n	8003f72 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8003f6c:	89fb      	ldrh	r3, [r7, #14]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f4      	bne.n	8003f66 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8003f7c:	89fb      	ldrh	r3, [r7, #14]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8003f8a:	4413      	add	r3, r2
 8003f8c:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8003f8e:	8afb      	ldrh	r3, [r7, #22]

}
 8003f90:	4618      	mov	r0, r3
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	0a12      	lsrs	r2, r2, #8
 8003fb2:	b292      	uxth	r2, r2
 8003fb4:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8003fba:	68fb      	ldr	r3, [r7, #12]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f7ff ff92 	bl	8003f08 <VL53L0X_calc_macro_period_ps>
 8003fe4:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003fec:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <VL53L0X_calc_timeout_mclks+0x50>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	099b      	lsrs	r3, r3, #6
 8003ff4:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ffc:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	441a      	add	r2, r3
	timeout_period_mclks =
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	fbb2 f3f3 	udiv	r3, r2, r3
 800400c:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800400e:	69fb      	ldr	r3, [r7, #28]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3720      	adds	r7, #32
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	10624dd3 	.word	0x10624dd3

0800401c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	807b      	strh	r3, [r7, #2]
 8004028:	4613      	mov	r3, r2
 800402a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8004030:	787b      	ldrb	r3, [r7, #1]
 8004032:	4619      	mov	r1, r3
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff ff67 	bl	8003f08 <VL53L0X_calc_macro_period_ps>
 800403a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004042:	4a0a      	ldr	r2, [pc, #40]	; (800406c <VL53L0X_calc_timeout_us+0x50>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	099b      	lsrs	r3, r3, #6
 800404a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800404c:	887b      	ldrh	r3, [r7, #2]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	fb02 f303 	mul.w	r3, r2, r3
 8004054:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8004058:	4a04      	ldr	r2, [pc, #16]	; (800406c <VL53L0X_calc_timeout_us+0x50>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	099b      	lsrs	r3, r3, #6
 8004060:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8004062:	697b      	ldr	r3, [r7, #20]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	10624dd3 	.word	0x10624dd3

08004070 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08c      	sub	sp, #48	; 0x30
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	460b      	mov	r3, r1
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800407e:	2300      	movs	r3, #0
 8004080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8004096:	7afb      	ldrb	r3, [r7, #11]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <get_sequence_step_timeout+0x38>
 800409c:	7afb      	ldrb	r3, [r7, #11]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d002      	beq.n	80040a8 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80040a2:	7afb      	ldrb	r3, [r7, #11]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d128      	bne.n	80040fa <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80040a8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80040ac:	461a      	mov	r2, r3
 80040ae:	2100      	movs	r1, #0
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7fd fa7d 	bl	80015b0 <VL53L0X_GetVcselPulsePeriod>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80040bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d109      	bne.n	80040d8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80040c4:	f107 0320 	add.w	r3, r7, #32
 80040c8:	461a      	mov	r2, r3
 80040ca:	2146      	movs	r1, #70	; 0x46
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f001 fd8b 	bl	8005be8 <VL53L0X_RdByte>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80040d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff ff5c 	bl	8003f9c <VL53L0X_decode_timeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80040e8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80040ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040ee:	4619      	mov	r1, r3
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff ff93 	bl	800401c <VL53L0X_calc_timeout_us>
 80040f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80040f8:	e092      	b.n	8004220 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80040fa:	7afb      	ldrb	r3, [r7, #11]
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d135      	bne.n	800416c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004100:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004104:	461a      	mov	r2, r3
 8004106:	2100      	movs	r1, #0
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f7fd fa51 	bl	80015b0 <VL53L0X_GetVcselPulsePeriod>
 800410e:	4603      	mov	r3, r0
 8004110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8004114:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004118:	2b00      	cmp	r3, #0
 800411a:	f040 8081 	bne.w	8004220 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800411e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004122:	461a      	mov	r2, r3
 8004124:	2100      	movs	r1, #0
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f7fd fa42 	bl	80015b0 <VL53L0X_GetVcselPulsePeriod>
 800412c:	4603      	mov	r3, r0
 800412e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8004132:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800413a:	f107 031e 	add.w	r3, r7, #30
 800413e:	461a      	mov	r2, r3
 8004140:	2151      	movs	r1, #81	; 0x51
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f001 fd7a 	bl	8005c3c <VL53L0X_RdWord>
 8004148:	4603      	mov	r3, r0
 800414a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800414e:	8bfb      	ldrh	r3, [r7, #30]
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff ff23 	bl	8003f9c <VL53L0X_decode_timeout>
 8004156:	4603      	mov	r3, r0
 8004158:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800415a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800415e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004160:	4619      	mov	r1, r3
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f7ff ff5a 	bl	800401c <VL53L0X_calc_timeout_us>
 8004168:	62b8      	str	r0, [r7, #40]	; 0x28
 800416a:	e059      	b.n	8004220 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800416c:	7afb      	ldrb	r3, [r7, #11]
 800416e:	2b04      	cmp	r3, #4
 8004170:	d156      	bne.n	8004220 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004172:	f107 0314 	add.w	r3, r7, #20
 8004176:	4619      	mov	r1, r3
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f7fd fb25 	bl	80017c8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01d      	beq.n	80041c4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004188:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800418c:	461a      	mov	r2, r3
 800418e:	2100      	movs	r1, #0
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7fd fa0d 	bl	80015b0 <VL53L0X_GetVcselPulsePeriod>
 8004196:	4603      	mov	r3, r0
 8004198:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800419c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10f      	bne.n	80041c4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80041a4:	f107 031e 	add.w	r3, r7, #30
 80041a8:	461a      	mov	r2, r3
 80041aa:	2151      	movs	r1, #81	; 0x51
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f001 fd45 	bl	8005c3c <VL53L0X_RdWord>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80041b8:	8bfb      	ldrh	r3, [r7, #30]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff feee 	bl	8003f9c <VL53L0X_decode_timeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80041c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80041cc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80041d0:	461a      	mov	r2, r3
 80041d2:	2101      	movs	r1, #1
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7fd f9eb 	bl	80015b0 <VL53L0X_GetVcselPulsePeriod>
 80041da:	4603      	mov	r3, r0
 80041dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80041e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10f      	bne.n	8004208 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80041e8:	f107 031c 	add.w	r3, r7, #28
 80041ec:	461a      	mov	r2, r3
 80041ee:	2171      	movs	r1, #113	; 0x71
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f001 fd23 	bl	8005c3c <VL53L0X_RdWord>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80041fc:	8bbb      	ldrh	r3, [r7, #28]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fecc 	bl	8003f9c <VL53L0X_decode_timeout>
 8004204:	4603      	mov	r3, r0
 8004206:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8004208:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800420a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004210:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004214:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004216:	4619      	mov	r1, r3
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f7ff feff 	bl	800401c <VL53L0X_calc_timeout_us>
 800421e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004224:	601a      	str	r2, [r3, #0]

	return Status;
 8004226:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800422a:	4618      	mov	r0, r3
 800422c:	3730      	adds	r7, #48	; 0x30
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b08a      	sub	sp, #40	; 0x28
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	460b      	mov	r3, r1
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004240:	2300      	movs	r3, #0
 8004242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8004246:	7afb      	ldrb	r3, [r7, #11]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <set_sequence_step_timeout+0x26>
 800424c:	7afb      	ldrb	r3, [r7, #11]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d002      	beq.n	8004258 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8004252:	7afb      	ldrb	r3, [r7, #11]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d138      	bne.n	80042ca <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004258:	f107 031b 	add.w	r3, r7, #27
 800425c:	461a      	mov	r2, r3
 800425e:	2100      	movs	r1, #0
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7fd f9a5 	bl	80015b0 <VL53L0X_GetVcselPulsePeriod>
 8004266:	4603      	mov	r3, r0
 8004268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800426c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004270:	2b00      	cmp	r3, #0
 8004272:	d11a      	bne.n	80042aa <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8004274:	7efb      	ldrb	r3, [r7, #27]
 8004276:	461a      	mov	r2, r3
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f7ff fea4 	bl	8003fc8 <VL53L0X_calc_timeout_mclks>
 8004280:	4603      	mov	r3, r0
 8004282:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8004284:	8bbb      	ldrh	r3, [r7, #28]
 8004286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428a:	d903      	bls.n	8004294 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800428c:	23ff      	movs	r3, #255	; 0xff
 800428e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004292:	e004      	b.n	800429e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8004294:	8bbb      	ldrh	r3, [r7, #28]
 8004296:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8004298:	3b01      	subs	r3, #1
 800429a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800429e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80042aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f040 80ab 	bne.w	800440a <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80042b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80042b8:	461a      	mov	r2, r3
 80042ba:	2146      	movs	r1, #70	; 0x46
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f001 fc11 	bl	8005ae4 <VL53L0X_WrByte>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80042c8:	e09f      	b.n	800440a <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80042ca:	7afb      	ldrb	r3, [r7, #11]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d135      	bne.n	800433c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80042d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d11b      	bne.n	8004310 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80042d8:	f107 031b 	add.w	r3, r7, #27
 80042dc:	461a      	mov	r2, r3
 80042de:	2100      	movs	r1, #0
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f7fd f965 	bl	80015b0 <VL53L0X_GetVcselPulsePeriod>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80042ec:	7efb      	ldrb	r3, [r7, #27]
 80042ee:	461a      	mov	r2, r3
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f7ff fe68 	bl	8003fc8 <VL53L0X_calc_timeout_mclks>
 80042f8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80042fa:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80042fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fe20 	bl	8003f44 <VL53L0X_encode_timeout>
 8004304:	4603      	mov	r3, r0
 8004306:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004308:	8b3a      	ldrh	r2, [r7, #24]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8004310:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004314:	2b00      	cmp	r3, #0
 8004316:	d108      	bne.n	800432a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8004318:	8b3b      	ldrh	r3, [r7, #24]
 800431a:	461a      	mov	r2, r3
 800431c:	2151      	movs	r1, #81	; 0x51
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f001 fc04 	bl	8005b2c <VL53L0X_WrWord>
 8004324:	4603      	mov	r3, r0
 8004326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800432a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800432e:	2b00      	cmp	r3, #0
 8004330:	d16b      	bne.n	800440a <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800433a:	e066      	b.n	800440a <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800433c:	7afb      	ldrb	r3, [r7, #11]
 800433e:	2b04      	cmp	r3, #4
 8004340:	d160      	bne.n	8004404 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8004342:	f107 0310 	add.w	r3, r7, #16
 8004346:	4619      	mov	r1, r3
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7fd fa3d 	bl	80017c8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8004352:	7cfb      	ldrb	r3, [r7, #19]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01d      	beq.n	8004394 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004358:	f107 031b 	add.w	r3, r7, #27
 800435c:	461a      	mov	r2, r3
 800435e:	2100      	movs	r1, #0
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f7fd f925 	bl	80015b0 <VL53L0X_GetVcselPulsePeriod>
 8004366:	4603      	mov	r3, r0
 8004368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800436c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10f      	bne.n	8004394 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8004374:	f107 0318 	add.w	r3, r7, #24
 8004378:	461a      	mov	r2, r3
 800437a:	2151      	movs	r1, #81	; 0x51
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f001 fc5d 	bl	8005c3c <VL53L0X_RdWord>
 8004382:	4603      	mov	r3, r0
 8004384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8004388:	8b3b      	ldrh	r3, [r7, #24]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fe06 	bl	8003f9c <VL53L0X_decode_timeout>
 8004390:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8004392:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004394:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800439c:	f107 031b 	add.w	r3, r7, #27
 80043a0:	461a      	mov	r2, r3
 80043a2:	2101      	movs	r1, #1
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f7fd f903 	bl	80015b0 <VL53L0X_GetVcselPulsePeriod>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80043b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d128      	bne.n	800440a <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80043b8:	7efb      	ldrb	r3, [r7, #27]
 80043ba:	461a      	mov	r2, r3
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f7ff fe02 	bl	8003fc8 <VL53L0X_calc_timeout_mclks>
 80043c4:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80043c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043c8:	6a3a      	ldr	r2, [r7, #32]
 80043ca:	4413      	add	r3, r2
 80043cc:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80043ce:	6a38      	ldr	r0, [r7, #32]
 80043d0:	f7ff fdb8 	bl	8003f44 <VL53L0X_encode_timeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80043d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d108      	bne.n	80043f2 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80043e0:	8bfb      	ldrh	r3, [r7, #30]
 80043e2:	461a      	mov	r2, r3
 80043e4:	2171      	movs	r1, #113	; 0x71
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f001 fba0 	bl	8005b2c <VL53L0X_WrWord>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80043f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d107      	bne.n	800440a <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8004402:	e002      	b.n	800440a <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004404:	23fc      	movs	r3, #252	; 0xfc
 8004406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800440a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800440e:	4618      	mov	r0, r3
 8004410:	3728      	adds	r7, #40	; 0x28
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b08a      	sub	sp, #40	; 0x28
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	460b      	mov	r3, r1
 8004420:	70fb      	strb	r3, [r7, #3]
 8004422:	4613      	mov	r3, r2
 8004424:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004426:	2300      	movs	r3, #0
 8004428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800442c:	230c      	movs	r3, #12
 800442e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8004432:	2312      	movs	r3, #18
 8004434:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8004438:	2308      	movs	r3, #8
 800443a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800443e:	230e      	movs	r3, #14
 8004440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8004448:	78bb      	ldrb	r3, [r7, #2]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004454:	23fc      	movs	r3, #252	; 0xfc
 8004456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800445a:	e020      	b.n	800449e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10d      	bne.n	800447e <VL53L0X_set_vcsel_pulse_period+0x68>
 8004462:	78ba      	ldrb	r2, [r7, #2]
 8004464:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004468:	429a      	cmp	r2, r3
 800446a:	d304      	bcc.n	8004476 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800446c:	78ba      	ldrb	r2, [r7, #2]
 800446e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004472:	429a      	cmp	r2, r3
 8004474:	d903      	bls.n	800447e <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004476:	23fc      	movs	r3, #252	; 0xfc
 8004478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800447c:	e00f      	b.n	800449e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d10c      	bne.n	800449e <VL53L0X_set_vcsel_pulse_period+0x88>
 8004484:	78ba      	ldrb	r2, [r7, #2]
 8004486:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800448a:	429a      	cmp	r2, r3
 800448c:	d304      	bcc.n	8004498 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800448e:	78ba      	ldrb	r2, [r7, #2]
 8004490:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004494:	429a      	cmp	r2, r3
 8004496:	d902      	bls.n	800449e <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004498:	23fc      	movs	r3, #252	; 0xfc
 800449a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800449e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80044a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044aa:	e239      	b.n	8004920 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d150      	bne.n	8004554 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80044b2:	78bb      	ldrb	r3, [r7, #2]
 80044b4:	2b0c      	cmp	r3, #12
 80044b6:	d110      	bne.n	80044da <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80044b8:	2218      	movs	r2, #24
 80044ba:	2157      	movs	r1, #87	; 0x57
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f001 fb11 	bl	8005ae4 <VL53L0X_WrByte>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80044c8:	2208      	movs	r2, #8
 80044ca:	2156      	movs	r1, #86	; 0x56
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f001 fb09 	bl	8005ae4 <VL53L0X_WrByte>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80044d8:	e17f      	b.n	80047da <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80044da:	78bb      	ldrb	r3, [r7, #2]
 80044dc:	2b0e      	cmp	r3, #14
 80044de:	d110      	bne.n	8004502 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80044e0:	2230      	movs	r2, #48	; 0x30
 80044e2:	2157      	movs	r1, #87	; 0x57
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f001 fafd 	bl	8005ae4 <VL53L0X_WrByte>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80044f0:	2208      	movs	r2, #8
 80044f2:	2156      	movs	r1, #86	; 0x56
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f001 faf5 	bl	8005ae4 <VL53L0X_WrByte>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004500:	e16b      	b.n	80047da <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8004502:	78bb      	ldrb	r3, [r7, #2]
 8004504:	2b10      	cmp	r3, #16
 8004506:	d110      	bne.n	800452a <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8004508:	2240      	movs	r2, #64	; 0x40
 800450a:	2157      	movs	r1, #87	; 0x57
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f001 fae9 	bl	8005ae4 <VL53L0X_WrByte>
 8004512:	4603      	mov	r3, r0
 8004514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8004518:	2208      	movs	r2, #8
 800451a:	2156      	movs	r1, #86	; 0x56
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f001 fae1 	bl	8005ae4 <VL53L0X_WrByte>
 8004522:	4603      	mov	r3, r0
 8004524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004528:	e157      	b.n	80047da <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800452a:	78bb      	ldrb	r3, [r7, #2]
 800452c:	2b12      	cmp	r3, #18
 800452e:	f040 8154 	bne.w	80047da <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8004532:	2250      	movs	r2, #80	; 0x50
 8004534:	2157      	movs	r1, #87	; 0x57
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f001 fad4 	bl	8005ae4 <VL53L0X_WrByte>
 800453c:	4603      	mov	r3, r0
 800453e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8004542:	2208      	movs	r2, #8
 8004544:	2156      	movs	r1, #86	; 0x56
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f001 facc 	bl	8005ae4 <VL53L0X_WrByte>
 800454c:	4603      	mov	r3, r0
 800454e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004552:	e142      	b.n	80047da <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	2b01      	cmp	r3, #1
 8004558:	f040 813f 	bne.w	80047da <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800455c:	78bb      	ldrb	r3, [r7, #2]
 800455e:	2b08      	cmp	r3, #8
 8004560:	d14c      	bne.n	80045fc <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8004562:	2210      	movs	r2, #16
 8004564:	2148      	movs	r1, #72	; 0x48
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f001 fabc 	bl	8005ae4 <VL53L0X_WrByte>
 800456c:	4603      	mov	r3, r0
 800456e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8004572:	2208      	movs	r2, #8
 8004574:	2147      	movs	r1, #71	; 0x47
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f001 fab4 	bl	8005ae4 <VL53L0X_WrByte>
 800457c:	4603      	mov	r3, r0
 800457e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8004582:	2202      	movs	r2, #2
 8004584:	2132      	movs	r1, #50	; 0x32
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f001 faac 	bl	8005ae4 <VL53L0X_WrByte>
 800458c:	4603      	mov	r3, r0
 800458e:	461a      	mov	r2, r3
 8004590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004594:	4313      	orrs	r3, r2
 8004596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800459a:	220c      	movs	r2, #12
 800459c:	2130      	movs	r1, #48	; 0x30
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f001 faa0 	bl	8005ae4 <VL53L0X_WrByte>
 80045a4:	4603      	mov	r3, r0
 80045a6:	461a      	mov	r2, r3
 80045a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80045b2:	2201      	movs	r2, #1
 80045b4:	21ff      	movs	r1, #255	; 0xff
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f001 fa94 	bl	8005ae4 <VL53L0X_WrByte>
 80045bc:	4603      	mov	r3, r0
 80045be:	461a      	mov	r2, r3
 80045c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80045ca:	2230      	movs	r2, #48	; 0x30
 80045cc:	2130      	movs	r1, #48	; 0x30
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f001 fa88 	bl	8005ae4 <VL53L0X_WrByte>
 80045d4:	4603      	mov	r3, r0
 80045d6:	461a      	mov	r2, r3
 80045d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045dc:	4313      	orrs	r3, r2
 80045de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80045e2:	2200      	movs	r2, #0
 80045e4:	21ff      	movs	r1, #255	; 0xff
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f001 fa7c 	bl	8005ae4 <VL53L0X_WrByte>
 80045ec:	4603      	mov	r3, r0
 80045ee:	461a      	mov	r2, r3
 80045f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80045fa:	e0ee      	b.n	80047da <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80045fc:	78bb      	ldrb	r3, [r7, #2]
 80045fe:	2b0a      	cmp	r3, #10
 8004600:	d14c      	bne.n	800469c <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8004602:	2228      	movs	r2, #40	; 0x28
 8004604:	2148      	movs	r1, #72	; 0x48
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f001 fa6c 	bl	8005ae4 <VL53L0X_WrByte>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8004612:	2208      	movs	r2, #8
 8004614:	2147      	movs	r1, #71	; 0x47
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f001 fa64 	bl	8005ae4 <VL53L0X_WrByte>
 800461c:	4603      	mov	r3, r0
 800461e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8004622:	2203      	movs	r2, #3
 8004624:	2132      	movs	r1, #50	; 0x32
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f001 fa5c 	bl	8005ae4 <VL53L0X_WrByte>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004634:	4313      	orrs	r3, r2
 8004636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800463a:	2209      	movs	r2, #9
 800463c:	2130      	movs	r1, #48	; 0x30
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f001 fa50 	bl	8005ae4 <VL53L0X_WrByte>
 8004644:	4603      	mov	r3, r0
 8004646:	461a      	mov	r2, r3
 8004648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800464c:	4313      	orrs	r3, r2
 800464e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004652:	2201      	movs	r2, #1
 8004654:	21ff      	movs	r1, #255	; 0xff
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f001 fa44 	bl	8005ae4 <VL53L0X_WrByte>
 800465c:	4603      	mov	r3, r0
 800465e:	461a      	mov	r2, r3
 8004660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004664:	4313      	orrs	r3, r2
 8004666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800466a:	2220      	movs	r2, #32
 800466c:	2130      	movs	r1, #48	; 0x30
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f001 fa38 	bl	8005ae4 <VL53L0X_WrByte>
 8004674:	4603      	mov	r3, r0
 8004676:	461a      	mov	r2, r3
 8004678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800467c:	4313      	orrs	r3, r2
 800467e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004682:	2200      	movs	r2, #0
 8004684:	21ff      	movs	r1, #255	; 0xff
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f001 fa2c 	bl	8005ae4 <VL53L0X_WrByte>
 800468c:	4603      	mov	r3, r0
 800468e:	461a      	mov	r2, r3
 8004690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004694:	4313      	orrs	r3, r2
 8004696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800469a:	e09e      	b.n	80047da <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800469c:	78bb      	ldrb	r3, [r7, #2]
 800469e:	2b0c      	cmp	r3, #12
 80046a0:	d14c      	bne.n	800473c <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80046a2:	2238      	movs	r2, #56	; 0x38
 80046a4:	2148      	movs	r1, #72	; 0x48
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f001 fa1c 	bl	8005ae4 <VL53L0X_WrByte>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80046b2:	2208      	movs	r2, #8
 80046b4:	2147      	movs	r1, #71	; 0x47
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f001 fa14 	bl	8005ae4 <VL53L0X_WrByte>
 80046bc:	4603      	mov	r3, r0
 80046be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80046c2:	2203      	movs	r2, #3
 80046c4:	2132      	movs	r1, #50	; 0x32
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f001 fa0c 	bl	8005ae4 <VL53L0X_WrByte>
 80046cc:	4603      	mov	r3, r0
 80046ce:	461a      	mov	r2, r3
 80046d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80046da:	2208      	movs	r2, #8
 80046dc:	2130      	movs	r1, #48	; 0x30
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f001 fa00 	bl	8005ae4 <VL53L0X_WrByte>
 80046e4:	4603      	mov	r3, r0
 80046e6:	461a      	mov	r2, r3
 80046e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80046f2:	2201      	movs	r2, #1
 80046f4:	21ff      	movs	r1, #255	; 0xff
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f001 f9f4 	bl	8005ae4 <VL53L0X_WrByte>
 80046fc:	4603      	mov	r3, r0
 80046fe:	461a      	mov	r2, r3
 8004700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004704:	4313      	orrs	r3, r2
 8004706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800470a:	2220      	movs	r2, #32
 800470c:	2130      	movs	r1, #48	; 0x30
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f001 f9e8 	bl	8005ae4 <VL53L0X_WrByte>
 8004714:	4603      	mov	r3, r0
 8004716:	461a      	mov	r2, r3
 8004718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800471c:	4313      	orrs	r3, r2
 800471e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004722:	2200      	movs	r2, #0
 8004724:	21ff      	movs	r1, #255	; 0xff
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f001 f9dc 	bl	8005ae4 <VL53L0X_WrByte>
 800472c:	4603      	mov	r3, r0
 800472e:	461a      	mov	r2, r3
 8004730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004734:	4313      	orrs	r3, r2
 8004736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800473a:	e04e      	b.n	80047da <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800473c:	78bb      	ldrb	r3, [r7, #2]
 800473e:	2b0e      	cmp	r3, #14
 8004740:	d14b      	bne.n	80047da <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8004742:	2248      	movs	r2, #72	; 0x48
 8004744:	2148      	movs	r1, #72	; 0x48
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f001 f9cc 	bl	8005ae4 <VL53L0X_WrByte>
 800474c:	4603      	mov	r3, r0
 800474e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8004752:	2208      	movs	r2, #8
 8004754:	2147      	movs	r1, #71	; 0x47
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f001 f9c4 	bl	8005ae4 <VL53L0X_WrByte>
 800475c:	4603      	mov	r3, r0
 800475e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8004762:	2203      	movs	r2, #3
 8004764:	2132      	movs	r1, #50	; 0x32
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f001 f9bc 	bl	8005ae4 <VL53L0X_WrByte>
 800476c:	4603      	mov	r3, r0
 800476e:	461a      	mov	r2, r3
 8004770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004774:	4313      	orrs	r3, r2
 8004776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800477a:	2207      	movs	r2, #7
 800477c:	2130      	movs	r1, #48	; 0x30
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f001 f9b0 	bl	8005ae4 <VL53L0X_WrByte>
 8004784:	4603      	mov	r3, r0
 8004786:	461a      	mov	r2, r3
 8004788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800478c:	4313      	orrs	r3, r2
 800478e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004792:	2201      	movs	r2, #1
 8004794:	21ff      	movs	r1, #255	; 0xff
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f001 f9a4 	bl	8005ae4 <VL53L0X_WrByte>
 800479c:	4603      	mov	r3, r0
 800479e:	461a      	mov	r2, r3
 80047a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80047aa:	2220      	movs	r2, #32
 80047ac:	2130      	movs	r1, #48	; 0x30
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f001 f998 	bl	8005ae4 <VL53L0X_WrByte>
 80047b4:	4603      	mov	r3, r0
 80047b6:	461a      	mov	r2, r3
 80047b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047bc:	4313      	orrs	r3, r2
 80047be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80047c2:	2200      	movs	r2, #0
 80047c4:	21ff      	movs	r1, #255	; 0xff
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f001 f98c 	bl	8005ae4 <VL53L0X_WrByte>
 80047cc:	4603      	mov	r3, r0
 80047ce:	461a      	mov	r2, r3
 80047d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80047da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d17f      	bne.n	80048e2 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80047e2:	78bb      	ldrb	r3, [r7, #2]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fe fe38 	bl	800345a <VL53L0X_encode_vcsel_period>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d045      	beq.n	8004886 <VL53L0X_set_vcsel_pulse_period+0x470>
 80047fa:	e06e      	b.n	80048da <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80047fc:	f107 0314 	add.w	r3, r7, #20
 8004800:	461a      	mov	r2, r3
 8004802:	2103      	movs	r1, #3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff fc33 	bl	8004070 <get_sequence_step_timeout>
 800480a:	4603      	mov	r3, r0
 800480c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8004810:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004814:	2b00      	cmp	r3, #0
 8004816:	d109      	bne.n	800482c <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8004818:	f107 0310 	add.w	r3, r7, #16
 800481c:	461a      	mov	r2, r3
 800481e:	2102      	movs	r1, #2
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff fc25 	bl	8004070 <get_sequence_step_timeout>
 8004826:	4603      	mov	r3, r0
 8004828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800482c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004830:	2b00      	cmp	r3, #0
 8004832:	d109      	bne.n	8004848 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8004834:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004838:	461a      	mov	r2, r3
 800483a:	2150      	movs	r1, #80	; 0x50
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f001 f951 	bl	8005ae4 <VL53L0X_WrByte>
 8004842:	4603      	mov	r3, r0
 8004844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8004848:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800484c:	2b00      	cmp	r3, #0
 800484e:	d108      	bne.n	8004862 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	461a      	mov	r2, r3
 8004854:	2103      	movs	r1, #3
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff fceb 	bl	8004232 <set_sequence_step_timeout>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8004862:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004866:	2b00      	cmp	r3, #0
 8004868:	d108      	bne.n	800487c <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	461a      	mov	r2, r3
 800486e:	2102      	movs	r1, #2
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff fcde 	bl	8004232 <set_sequence_step_timeout>
 8004876:	4603      	mov	r3, r0
 8004878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	78ba      	ldrb	r2, [r7, #2]
 8004880:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8004884:	e02e      	b.n	80048e4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8004886:	f107 0318 	add.w	r3, r7, #24
 800488a:	461a      	mov	r2, r3
 800488c:	2104      	movs	r1, #4
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7ff fbee 	bl	8004070 <get_sequence_step_timeout>
 8004894:	4603      	mov	r3, r0
 8004896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800489a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80048a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80048a6:	461a      	mov	r2, r3
 80048a8:	2170      	movs	r1, #112	; 0x70
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f001 f91a 	bl	8005ae4 <VL53L0X_WrByte>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80048b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d108      	bne.n	80048d0 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	461a      	mov	r2, r3
 80048c2:	2104      	movs	r1, #4
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff fcb4 	bl	8004232 <set_sequence_step_timeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	78ba      	ldrb	r2, [r7, #2]
 80048d4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80048d8:	e004      	b.n	80048e4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80048da:	23fc      	movs	r3, #252	; 0xfc
 80048dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048e0:	e000      	b.n	80048e4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80048e2:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80048e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d109      	bne.n	8004900 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80048f2:	69f9      	ldr	r1, [r7, #28]
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7fc fe1d 	bl	8001534 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8004900:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004904:	2b00      	cmp	r3, #0
 8004906:	d109      	bne.n	800491c <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8004908:	f107 010f 	add.w	r1, r7, #15
 800490c:	2301      	movs	r3, #1
 800490e:	2200      	movs	r2, #0
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7fe fcbd 	bl	8003290 <VL53L0X_perform_phase_calibration>
 8004916:	4603      	mov	r3, r0
 8004918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800491c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004920:	4618      	mov	r0, r3
 8004922:	3728      	adds	r7, #40	; 0x28
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	460b      	mov	r3, r1
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004936:	2300      	movs	r3, #0
 8004938:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800493a:	7afb      	ldrb	r3, [r7, #11]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8004940:	2b01      	cmp	r3, #1
 8004942:	d00a      	beq.n	800495a <VL53L0X_get_vcsel_pulse_period+0x32>
 8004944:	e013      	b.n	800496e <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8004946:	f107 0316 	add.w	r3, r7, #22
 800494a:	461a      	mov	r2, r3
 800494c:	2150      	movs	r1, #80	; 0x50
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f001 f94a 	bl	8005be8 <VL53L0X_RdByte>
 8004954:	4603      	mov	r3, r0
 8004956:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8004958:	e00b      	b.n	8004972 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800495a:	f107 0316 	add.w	r3, r7, #22
 800495e:	461a      	mov	r2, r3
 8004960:	2170      	movs	r1, #112	; 0x70
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f001 f940 	bl	8005be8 <VL53L0X_RdByte>
 8004968:	4603      	mov	r3, r0
 800496a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800496c:	e001      	b.n	8004972 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800496e:	23fc      	movs	r3, #252	; 0xfc
 8004970:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004972:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d107      	bne.n	800498a <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800497a:	7dbb      	ldrb	r3, [r7, #22]
 800497c:	4618      	mov	r0, r3
 800497e:	f7fe fd59 	bl	8003434 <VL53L0X_decode_vcsel_period>
 8004982:	4603      	mov	r3, r0
 8004984:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	701a      	strb	r2, [r3, #0]

	return Status;
 800498a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b092      	sub	sp, #72	; 0x48
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80049a0:	2300      	movs	r3, #0
 80049a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80049a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80049aa:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80049ac:	f240 7376 	movw	r3, #1910	; 0x776
 80049b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80049b2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80049b6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80049b8:	f44f 7325 	mov.w	r3, #660	; 0x294
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80049be:	f240 234e 	movw	r3, #590	; 0x24e
 80049c2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80049c4:	f240 23b2 	movw	r3, #690	; 0x2b2
 80049c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80049ca:	f44f 7325 	mov.w	r3, #660	; 0x294
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80049d0:	f240 2326 	movw	r3, #550	; 0x226
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80049da:	f644 6320 	movw	r3, #20000	; 0x4e20
 80049de:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d205      	bcs.n	80049f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80049ec:	23fc      	movs	r3, #252	; 0xfc
 80049ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80049f2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80049f6:	e0aa      	b.n	8004b4e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80049f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004a04:	f107 0314 	add.w	r3, r7, #20
 8004a08:	4619      	mov	r1, r3
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fc fedc 	bl	80017c8 <VL53L0X_GetSequenceStepEnables>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8004a16:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d15b      	bne.n	8004ad6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8004a1e:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d105      	bne.n	8004a30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8004a24:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8004a2a:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d052      	beq.n	8004ad6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8004a30:	f107 0310 	add.w	r3, r7, #16
 8004a34:	461a      	mov	r2, r3
 8004a36:	2102      	movs	r1, #2
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff fb19 	bl	8004070 <get_sequence_step_timeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8004a44:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8004a4c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004a50:	e07d      	b.n	8004b4e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8004a52:	7d3b      	ldrb	r3, [r7, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00f      	beq.n	8004a78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8004a58:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8004a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a5c:	4413      	add	r3, r2
 8004a5e:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d204      	bcs.n	8004a72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8004a68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	643b      	str	r3, [r7, #64]	; 0x40
 8004a70:	e002      	b.n	8004a78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004a72:	23fc      	movs	r3, #252	; 0xfc
 8004a74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8004a78:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8004a80:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004a84:	e063      	b.n	8004b4e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8004a86:	7dbb      	ldrb	r3, [r7, #22]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d011      	beq.n	8004ab0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a90:	4413      	add	r3, r2
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d204      	bcs.n	8004aa8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8004a9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8004aa6:	e016      	b.n	8004ad6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004aa8:	23fc      	movs	r3, #252	; 0xfc
 8004aaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004aae:	e012      	b.n	8004ad6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8004ab0:	7d7b      	ldrb	r3, [r7, #21]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00f      	beq.n	8004ad6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aba:	4413      	add	r3, r2
 8004abc:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d204      	bcs.n	8004ad0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8004ac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	643b      	str	r3, [r7, #64]	; 0x40
 8004ace:	e002      	b.n	8004ad6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004ad0:	23fc      	movs	r3, #252	; 0xfc
 8004ad2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8004ad6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8004ade:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004ae2:	e034      	b.n	8004b4e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8004ae4:	7dfb      	ldrb	r3, [r7, #23]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d019      	beq.n	8004b1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8004aea:	f107 030c 	add.w	r3, r7, #12
 8004aee:	461a      	mov	r2, r3
 8004af0:	2103      	movs	r1, #3
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fabc 	bl	8004070 <get_sequence_step_timeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b02:	4413      	add	r3, r2
 8004b04:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d204      	bcs.n	8004b18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8004b0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	643b      	str	r3, [r7, #64]	; 0x40
 8004b16:	e002      	b.n	8004b1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004b18:	23fc      	movs	r3, #252	; 0xfc
 8004b1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8004b1e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d111      	bne.n	8004b4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8004b26:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00e      	beq.n	8004b4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8004b2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8004b34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b36:	2104      	movs	r1, #4
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff fb7a 	bl	8004232 <set_sequence_step_timeout>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8004b4a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3748      	adds	r7, #72	; 0x48
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b090      	sub	sp, #64	; 0x40
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b60:	2300      	movs	r3, #0
 8004b62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8004b66:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004b6a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8004b6c:	f240 7376 	movw	r3, #1910	; 0x776
 8004b70:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8004b72:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004b76:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8004b78:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004b7c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8004b7e:	f240 234e 	movw	r3, #590	; 0x24e
 8004b82:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8004b84:	f240 23b2 	movw	r3, #690	; 0x2b2
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8004b8a:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8004b90:	f240 2326 	movw	r3, #550	; 0x226
 8004b94:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8004b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9e:	441a      	add	r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004ba4:	f107 0318 	add.w	r3, r7, #24
 8004ba8:	4619      	mov	r1, r3
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fc fe0c 	bl	80017c8 <VL53L0X_GetSequenceStepEnables>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8004bb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8004bbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004bc2:	e075      	b.n	8004cb0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8004bc4:	7e3b      	ldrb	r3, [r7, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d105      	bne.n	8004bd6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8004bca:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8004bd0:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d030      	beq.n	8004c38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8004bd6:	f107 0310 	add.w	r3, r7, #16
 8004bda:	461a      	mov	r2, r3
 8004bdc:	2102      	movs	r1, #2
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff fa46 	bl	8004070 <get_sequence_step_timeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8004bea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d122      	bne.n	8004c38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8004bf2:	7e3b      	ldrb	r3, [r7, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8004bfc:	6939      	ldr	r1, [r7, #16]
 8004bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c00:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8004c02:	441a      	add	r2, r3
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8004c08:	7ebb      	ldrb	r3, [r7, #26]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8004c12:	6939      	ldr	r1, [r7, #16]
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	440b      	add	r3, r1
 8004c18:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8004c1a:	441a      	add	r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e00a      	b.n	8004c38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8004c22:	7e7b      	ldrb	r3, [r7, #25]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8004c2c:	6939      	ldr	r1, [r7, #16]
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8004c32:	441a      	add	r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004c38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d114      	bne.n	8004c6a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8004c40:	7efb      	ldrb	r3, [r7, #27]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d011      	beq.n	8004c6a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8004c46:	f107 030c 	add.w	r3, r7, #12
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2103      	movs	r1, #3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff fa0e 	bl	8004070 <get_sequence_step_timeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8004c5e:	68f9      	ldr	r1, [r7, #12]
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8004c64:	441a      	add	r2, r3
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004c6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d114      	bne.n	8004c9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8004c72:	7f3b      	ldrb	r3, [r7, #28]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d011      	beq.n	8004c9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8004c78:	f107 0314 	add.w	r3, r7, #20
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2104      	movs	r1, #4
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff f9f5 	bl	8004070 <get_sequence_step_timeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8004c90:	6979      	ldr	r1, [r7, #20]
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8004c96:	441a      	add	r2, r3
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004c9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004cac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3740      	adds	r7, #64	; 0x40
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8004cca:	e0c6      	b.n	8004e5a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	74fb      	strb	r3, [r7, #19]
		Index++;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8004cdc:	7cfb      	ldrb	r3, [r7, #19]
 8004cde:	2bff      	cmp	r3, #255	; 0xff
 8004ce0:	f040 808d 	bne.w	8004dfe <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	4413      	add	r3, r2
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	747b      	strb	r3, [r7, #17]
			Index++;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8004cf4:	7c7b      	ldrb	r3, [r7, #17]
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d87e      	bhi.n	8004df8 <VL53L0X_load_tuning_settings+0x140>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <VL53L0X_load_tuning_settings+0x48>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d11 	.word	0x08004d11
 8004d04:	08004d4b 	.word	0x08004d4b
 8004d08:	08004d85 	.word	0x08004d85
 8004d0c:	08004dbf 	.word	0x08004dbf
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	4413      	add	r3, r2
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	743b      	strb	r3, [r7, #16]
				Index++;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	4413      	add	r3, r2
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004d30:	7c3b      	ldrb	r3, [r7, #16]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	89ba      	ldrh	r2, [r7, #12]
 8004d44:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8004d48:	e087      	b.n	8004e5a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	4413      	add	r3, r2
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	743b      	strb	r3, [r7, #16]
				Index++;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	3301      	adds	r3, #1
 8004d58:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	4413      	add	r3, r2
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	3301      	adds	r3, #1
 8004d68:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004d6a:	7c3b      	ldrb	r3, [r7, #16]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	4413      	add	r3, r2
 8004d78:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	89ba      	ldrh	r2, [r7, #12]
 8004d7e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8004d82:	e06a      	b.n	8004e5a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	4413      	add	r3, r2
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	743b      	strb	r3, [r7, #16]
				Index++;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	3301      	adds	r3, #1
 8004d92:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	4413      	add	r3, r2
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	3301      	adds	r3, #1
 8004da2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004da4:	7c3b      	ldrb	r3, [r7, #16]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	021b      	lsls	r3, r3, #8
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	4413      	add	r3, r2
 8004db2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	89ba      	ldrh	r2, [r7, #12]
 8004db8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8004dbc:	e04d      	b.n	8004e5a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	743b      	strb	r3, [r7, #16]
				Index++;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004dde:	7c3b      	ldrb	r3, [r7, #16]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	89ba      	ldrh	r2, [r7, #12]
 8004df2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8004df6:	e030      	b.n	8004e5a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004df8:	23fc      	movs	r3, #252	; 0xfc
 8004dfa:	77fb      	strb	r3, [r7, #31]
 8004dfc:	e02d      	b.n	8004e5a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d828      	bhi.n	8004e56 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	4413      	add	r3, r2
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	74bb      	strb	r3, [r7, #18]
			Index++;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	3301      	adds	r3, #1
 8004e12:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8004e14:	2300      	movs	r3, #0
 8004e16:	61bb      	str	r3, [r7, #24]
 8004e18:	e00f      	b.n	8004e3a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	4413      	add	r3, r2
 8004e20:	7819      	ldrb	r1, [r3, #0]
 8004e22:	f107 0208 	add.w	r2, r7, #8
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	4413      	add	r3, r2
 8004e2a:	460a      	mov	r2, r1
 8004e2c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	3301      	adds	r3, #1
 8004e32:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	3301      	adds	r3, #1
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	7cfb      	ldrb	r3, [r7, #19]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	dbeb      	blt.n	8004e1a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8004e42:	7cfb      	ldrb	r3, [r7, #19]
 8004e44:	f107 0208 	add.w	r2, r7, #8
 8004e48:	7cb9      	ldrb	r1, [r7, #18]
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fdee 	bl	8005a2c <VL53L0X_WriteMulti>
 8004e50:	4603      	mov	r3, r0
 8004e52:	77fb      	strb	r3, [r7, #31]
 8004e54:	e001      	b.n	8004e5a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004e56:	23fc      	movs	r3, #252	; 0xfc
 8004e58:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	4413      	add	r3, r2
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d004      	beq.n	8004e70 <VL53L0X_load_tuning_settings+0x1b8>
 8004e66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f43f af2e 	beq.w	8004ccc <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004e70:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3720      	adds	r7, #32
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8004e92:	f107 0313 	add.w	r3, r7, #19
 8004e96:	4619      	mov	r1, r3
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f7fc fd21 	bl	80018e0 <VL53L0X_GetXTalkCompensationEnable>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8004ea2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d111      	bne.n	8004ece <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8004eaa:	7cfb      	ldrb	r3, [r7, #19]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00e      	beq.n	8004ece <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	8a9b      	ldrh	r3, [r3, #20]
 8004eba:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	3380      	adds	r3, #128	; 0x80
 8004ec8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8004ece:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3720      	adds	r7, #32
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b086      	sub	sp, #24
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8004ef2:	f107 0310 	add.w	r3, r7, #16
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7ff ffbe 	bl	8004e7c <VL53L0X_get_total_xtalk_rate>
 8004f00:	4603      	mov	r3, r0
 8004f02:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8004f04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d105      	bne.n	8004f18 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	441a      	add	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	601a      	str	r2, [r3, #0]

	return Status;
 8004f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b09a      	sub	sp, #104	; 0x68
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8004f32:	2312      	movs	r3, #18
 8004f34:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8004f36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f3a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8004f3c:	2342      	movs	r3, #66	; 0x42
 8004f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8004f40:	2306      	movs	r3, #6
 8004f42:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8004f44:	2307      	movs	r3, #7
 8004f46:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8004f54:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004f5c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8004f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8004f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6a:	3380      	adds	r3, #128	; 0x80
 8004f6c:	0a1b      	lsrs	r3, r3, #8
 8004f6e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8004f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f74:	fb02 f303 	mul.w	r3, r2, r3
 8004f78:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01a      	beq.n	8004fba <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	029b      	lsls	r3, r3, #10
 8004f88:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8004f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f90:	4413      	add	r3, r2
 8004f92:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8004f94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8004f9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	4413      	add	r3, r2
 8004fa6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8004fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004faa:	fb03 f303 	mul.w	r3, r3, r3
 8004fae:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8004fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fb2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004fb6:	0c1b      	lsrs	r3, r3, #16
 8004fb8:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
 8004fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004fca:	0c1b      	lsrs	r3, r3, #16
 8004fcc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8004fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd0:	fb03 f303 	mul.w	r3, r3, r3
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8004fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004fdc:	0c1b      	lsrs	r3, r3, #16
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8004fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe2:	085a      	lsrs	r2, r3, #1
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	441a      	add	r2, r3
 8004fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fee:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ff4:	fb02 f303 	mul.w	r3, r2, r3
 8004ff8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8004ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005000:	d302      	bcc.n	8005008 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8005002:	4b54      	ldr	r3, [pc, #336]	; (8005154 <VL53L0X_calc_dmax+0x230>)
 8005004:	663b      	str	r3, [r7, #96]	; 0x60
 8005006:	e015      	b.n	8005034 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8005008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500a:	085a      	lsrs	r2, r3, #1
 800500c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800500e:	441a      	add	r2, r3
 8005010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005012:	fbb2 f3f3 	udiv	r3, r2, r3
 8005016:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8005018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800501a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800501c:	fb02 f303 	mul.w	r3, r2, r3
 8005020:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8005022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005024:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005028:	0c1b      	lsrs	r3, r3, #16
 800502a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800502c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800502e:	fb03 f303 	mul.w	r3, r3, r3
 8005032:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8005034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005036:	039b      	lsls	r3, r3, #14
 8005038:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800503c:	4a46      	ldr	r2, [pc, #280]	; (8005158 <VL53L0X_calc_dmax+0x234>)
 800503e:	fba2 2303 	umull	r2, r3, r2, r3
 8005042:	099b      	lsrs	r3, r3, #6
 8005044:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	fb03 f303 	mul.w	r3, r3, r3
 800504c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800504e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005050:	fb03 f303 	mul.w	r3, r3, r3
 8005054:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	3308      	adds	r3, #8
 800505a:	091b      	lsrs	r3, r3, #4
 800505c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800505e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8005066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005068:	4613      	mov	r3, r2
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	4413      	add	r3, r2
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005078:	0b9b      	lsrs	r3, r3, #14
 800507a:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800507c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800507e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005080:	4413      	add	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8005084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4413      	add	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005092:	fbb2 f3f3 	udiv	r3, r2, r3
 8005096:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	039b      	lsls	r3, r3, #14
 800509c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	085b      	lsrs	r3, r3, #1
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4413      	add	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b0:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050b6:	fb02 f303 	mul.w	r3, r2, r3
 80050ba:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80050c2:	4a25      	ldr	r2, [pc, #148]	; (8005158 <VL53L0X_calc_dmax+0x234>)
 80050c4:	fba2 2303 	umull	r2, r3, r2, r3
 80050c8:	099b      	lsrs	r3, r3, #6
 80050ca:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80050d8:	4a1f      	ldr	r2, [pc, #124]	; (8005158 <VL53L0X_calc_dmax+0x234>)
 80050da:	fba2 2303 	umull	r2, r3, r2, r3
 80050de:	099b      	lsrs	r3, r3, #6
 80050e0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80050e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e4:	3380      	adds	r3, #128	; 0x80
 80050e6:	0a1b      	lsrs	r3, r3, #8
 80050e8:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	085a      	lsrs	r2, r3, #1
 80050f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f6:	441a      	add	r2, r3
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005100:	e001      	b.n	8005106 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8005106:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005108:	f7fe f9ba 	bl	8003480 <VL53L0X_isqrt>
 800510c:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d008      	beq.n	8005126 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	085a      	lsrs	r2, r3, #1
 8005118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511a:	441a      	add	r2, r3
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005122:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005124:	e001      	b.n	800512a <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800512a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800512c:	f7fe f9a8 	bl	8003480 <VL53L0X_isqrt>
 8005130:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8005132:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800513c:	429a      	cmp	r2, r3
 800513e:	d902      	bls.n	8005146 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8005140:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005142:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005144:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8005146:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800514a:	4618      	mov	r0, r3
 800514c:	3768      	adds	r7, #104	; 0x68
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	fff00000 	.word	0xfff00000
 8005158:	10624dd3 	.word	0x10624dd3

0800515c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b0b4      	sub	sp, #208	; 0xd0
 8005160:	af04      	add	r7, sp, #16
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800516a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800516e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8005172:	f44f 7316 	mov.w	r3, #600	; 0x258
 8005176:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800517a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800517e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8005182:	f241 235c 	movw	r3, #4700	; 0x125c
 8005186:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800518a:	4b9e      	ldr	r3, [pc, #632]	; (8005404 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800518c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8005190:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005194:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8005196:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800519a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800519e:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a2:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80051a4:	4b98      	ldr	r3, [pc, #608]	; (8005408 <VL53L0X_calc_sigma_estimate+0x2ac>)
 80051a6:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80051a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ac:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80051ae:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80051b2:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80051b4:	f240 6377 	movw	r3, #1655	; 0x677
 80051b8:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051ba:	2300      	movs	r3, #0
 80051bc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80051d2:	0c1b      	lsrs	r3, r3, #16
 80051d4:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80051dc:	f107 0310 	add.w	r3, r7, #16
 80051e0:	461a      	mov	r2, r3
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7ff fe78 	bl	8004eda <VL53L0X_get_total_signal_rate>
 80051ea:	4603      	mov	r3, r0
 80051ec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80051f0:	f107 0314 	add.w	r3, r7, #20
 80051f4:	461a      	mov	r2, r3
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7ff fe3f 	bl	8004e7c <VL53L0X_get_total_xtalk_rate>
 80051fe:	4603      	mov	r3, r0
 8005200:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800520a:	fb02 f303 	mul.w	r3, r2, r3
 800520e:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8005210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005212:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005216:	0c1b      	lsrs	r3, r3, #16
 8005218:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005220:	fb02 f303 	mul.w	r3, r2, r3
 8005224:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8005228:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800522c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522e:	429a      	cmp	r2, r3
 8005230:	d902      	bls.n	8005238 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8005232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005234:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8005238:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800523c:	2b00      	cmp	r3, #0
 800523e:	d168      	bne.n	8005312 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005246:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8005250:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8005254:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005258:	461a      	mov	r2, r3
 800525a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f7fe feb2 	bl	8003fc8 <VL53L0X_calc_timeout_mclks>
 8005264:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800526c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8005276:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800527a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800527e:	461a      	mov	r2, r3
 8005280:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7fe fe9f 	bl	8003fc8 <VL53L0X_calc_timeout_mclks>
 800528a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800528c:	2303      	movs	r3, #3
 800528e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8005292:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005296:	2b08      	cmp	r3, #8
 8005298:	d102      	bne.n	80052a0 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800529a:	2302      	movs	r3, #2
 800529c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80052a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a4:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80052a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80052aa:	fb02 f303 	mul.w	r3, r2, r3
 80052ae:	02db      	lsls	r3, r3, #11
 80052b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80052b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80052b8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80052bc:	4a53      	ldr	r2, [pc, #332]	; (800540c <VL53L0X_calc_sigma_estimate+0x2b0>)
 80052be:	fba2 2303 	umull	r2, r3, r2, r3
 80052c2:	099b      	lsrs	r3, r3, #6
 80052c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80052c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80052cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052ce:	fb02 f303 	mul.w	r3, r2, r3
 80052d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80052d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80052da:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80052de:	4a4b      	ldr	r2, [pc, #300]	; (800540c <VL53L0X_calc_sigma_estimate+0x2b0>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	099b      	lsrs	r3, r3, #6
 80052e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	3380      	adds	r3, #128	; 0x80
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80052f8:	fb02 f303 	mul.w	r3, r2, r3
 80052fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8005300:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005304:	3380      	adds	r3, #128	; 0x80
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8005312:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800531a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800531e:	e15e      	b.n	80055de <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8005320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10c      	bne.n	8005340 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800532c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005334:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e14c      	b.n	80055da <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8005340:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005344:	2b00      	cmp	r3, #0
 8005346:	d102      	bne.n	800534e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8005348:	2301      	movs	r3, #1
 800534a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800534e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005352:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8005354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005356:	041a      	lsls	r2, r3, #16
 8005358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800535a:	fbb2 f3f3 	udiv	r3, r2, r3
 800535e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8005362:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005368:	429a      	cmp	r2, r3
 800536a:	d902      	bls.n	8005372 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800536c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800536e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8005372:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005376:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800537a:	fb02 f303 	mul.w	r3, r2, r3
 800537e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8005382:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005386:	4613      	mov	r3, r2
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4618      	mov	r0, r3
 8005390:	f7fe f876 	bl	8003480 <VL53L0X_isqrt>
 8005394:	4603      	mov	r3, r0
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	891b      	ldrh	r3, [r3, #8]
 800539e:	461a      	mov	r2, r3
 80053a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053a2:	fb02 f303 	mul.w	r3, r2, r3
 80053a6:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80053a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053aa:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80053ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053b0:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80053b2:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80053b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80053b8:	4a14      	ldr	r2, [pc, #80]	; (800540c <VL53L0X_calc_sigma_estimate+0x2b0>)
 80053ba:	fba2 2303 	umull	r2, r3, r2, r3
 80053be:	099b      	lsrs	r3, r3, #6
 80053c0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80053c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053c4:	041b      	lsls	r3, r3, #16
 80053c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80053ca:	4a10      	ldr	r2, [pc, #64]	; (800540c <VL53L0X_calc_sigma_estimate+0x2b0>)
 80053cc:	fba2 2303 	umull	r2, r3, r2, r3
 80053d0:	099b      	lsrs	r3, r3, #6
 80053d2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80053d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80053da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053de:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bfb8      	it	lt
 80053e6:	425b      	neglt	r3, r3
 80053e8:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80053ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	7e1b      	ldrb	r3, [r3, #24]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00b      	beq.n	8005410 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80053f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005400:	e033      	b.n	800546a <VL53L0X_calc_sigma_estimate+0x30e>
 8005402:	bf00      	nop
 8005404:	028f87ae 	.word	0x028f87ae
 8005408:	0006999a 	.word	0x0006999a
 800540c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8005410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005412:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005416:	fbb2 f3f3 	udiv	r3, r2, r3
 800541a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800541e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005420:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8005424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005428:	fb02 f303 	mul.w	r3, r2, r3
 800542c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8005430:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005434:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005436:	4413      	add	r3, r2
 8005438:	0c1b      	lsrs	r3, r3, #16
 800543a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800543e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005442:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800544a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800544e:	085b      	lsrs	r3, r3, #1
 8005450:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8005454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005458:	fb03 f303 	mul.w	r3, r3, r3
 800545c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8005460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005464:	0b9b      	lsrs	r3, r3, #14
 8005466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800546a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800546e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005470:	fb02 f303 	mul.w	r3, r2, r3
 8005474:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800547c:	0c1b      	lsrs	r3, r3, #16
 800547e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	fb03 f303 	mul.w	r3, r3, r3
 8005486:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8005488:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005490:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005494:	0c1b      	lsrs	r3, r3, #16
 8005496:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8005498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549a:	fb03 f303 	mul.w	r3, r3, r3
 800549e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80054a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	4413      	add	r3, r2
 80054a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80054a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054aa:	f7fd ffe9 	bl	8003480 <VL53L0X_isqrt>
 80054ae:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	041b      	lsls	r3, r3, #16
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	3332      	adds	r3, #50	; 0x32
 80054ba:	4a4b      	ldr	r2, [pc, #300]	; (80055e8 <VL53L0X_calc_sigma_estimate+0x48c>)
 80054bc:	fba2 2303 	umull	r2, r3, r2, r3
 80054c0:	095a      	lsrs	r2, r3, #5
 80054c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80054cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054d0:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80054d4:	fb02 f303 	mul.w	r3, r2, r3
 80054d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80054dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054e0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80054e4:	3308      	adds	r3, #8
 80054e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80054ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054ee:	4a3f      	ldr	r2, [pc, #252]	; (80055ec <VL53L0X_calc_sigma_estimate+0x490>)
 80054f0:	fba2 2303 	umull	r2, r3, r2, r3
 80054f4:	0b5b      	lsrs	r3, r3, #13
 80054f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80054fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005500:	429a      	cmp	r2, r3
 8005502:	d902      	bls.n	800550a <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8005504:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005506:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800550a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800550e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005512:	4413      	add	r3, r2
 8005514:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8005518:	4a35      	ldr	r2, [pc, #212]	; (80055f0 <VL53L0X_calc_sigma_estimate+0x494>)
 800551a:	fba2 2303 	umull	r2, r3, r2, r3
 800551e:	099b      	lsrs	r3, r3, #6
 8005520:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8005526:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800552a:	441a      	add	r2, r3
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005532:	4618      	mov	r0, r3
 8005534:	f7fd ffa4 	bl	8003480 <VL53L0X_isqrt>
 8005538:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	021b      	lsls	r3, r3, #8
 800553e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005546:	4a2a      	ldr	r2, [pc, #168]	; (80055f0 <VL53L0X_calc_sigma_estimate+0x494>)
 8005548:	fba2 2303 	umull	r2, r3, r2, r3
 800554c:	099b      	lsrs	r3, r3, #6
 800554e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8005550:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005554:	fb03 f303 	mul.w	r3, r3, r3
 8005558:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	fb03 f303 	mul.w	r3, r3, r3
 8005560:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8005562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005566:	4413      	add	r3, r2
 8005568:	4618      	mov	r0, r3
 800556a:	f7fd ff89 	bl	8003480 <VL53L0X_isqrt>
 800556e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005576:	fb02 f303 	mul.w	r3, r2, r3
 800557a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800557e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005580:	2b00      	cmp	r3, #0
 8005582:	d009      	beq.n	8005598 <VL53L0X_calc_sigma_estimate+0x43c>
 8005584:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <VL53L0X_calc_sigma_estimate+0x43c>
 800558c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005594:	429a      	cmp	r2, r3
 8005596:	d903      	bls.n	80055a0 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8005598:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800559c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80055a6:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80055b2:	6939      	ldr	r1, [r7, #16]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	9303      	str	r3, [sp, #12]
 80055b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80055bc:	9302      	str	r3, [sp, #8]
 80055be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f7ff fca8 	bl	8004f24 <VL53L0X_calc_dmax>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80055da:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80055de:	4618      	mov	r0, r3
 80055e0:	37c0      	adds	r7, #192	; 0xc0
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	51eb851f 	.word	0x51eb851f
 80055ec:	d1b71759 	.word	0xd1b71759
 80055f0:	10624dd3 	.word	0x10624dd3

080055f4 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b090      	sub	sp, #64	; 0x40
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	461a      	mov	r2, r3
 8005600:	460b      	mov	r3, r1
 8005602:	72fb      	strb	r3, [r7, #11]
 8005604:	4613      	mov	r3, r2
 8005606:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005608:	2300      	movs	r3, #0
 800560a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800561a:	2300      	movs	r3, #0
 800561c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8005626:	2300      	movs	r3, #0
 8005628:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8005646:	7afb      	ldrb	r3, [r7, #11]
 8005648:	10db      	asrs	r3, r3, #3
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8005654:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005658:	2b00      	cmp	r3, #0
 800565a:	d017      	beq.n	800568c <VL53L0X_get_pal_range_status+0x98>
 800565c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005660:	2b05      	cmp	r3, #5
 8005662:	d013      	beq.n	800568c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8005664:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005668:	2b07      	cmp	r3, #7
 800566a:	d00f      	beq.n	800568c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800566c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005670:	2b0c      	cmp	r3, #12
 8005672:	d00b      	beq.n	800568c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8005674:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005678:	2b0d      	cmp	r3, #13
 800567a:	d007      	beq.n	800568c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800567c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005680:	2b0e      	cmp	r3, #14
 8005682:	d003      	beq.n	800568c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8005684:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005688:	2b0f      	cmp	r3, #15
 800568a:	d103      	bne.n	8005694 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800568c:	2301      	movs	r3, #1
 800568e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005692:	e002      	b.n	800569a <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800569a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d109      	bne.n	80056b6 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80056a2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80056a6:	461a      	mov	r2, r3
 80056a8:	2100      	movs	r1, #0
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f7fc f9ec 	bl	8001a88 <VL53L0X_GetLimitCheckEnable>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80056b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d02e      	beq.n	800571c <VL53L0X_get_pal_range_status+0x128>
 80056be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d12a      	bne.n	800571c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80056c6:	f107 0310 	add.w	r3, r7, #16
 80056ca:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80056ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f7ff fd43 	bl	800515c <VL53L0X_calc_sigma_estimate>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80056dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d103      	bne.n	80056ec <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ea:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80056ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d113      	bne.n	800571c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80056f4:	f107 0320 	add.w	r3, r7, #32
 80056f8:	461a      	mov	r2, r3
 80056fa:	2100      	movs	r1, #0
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f7fc fa49 	bl	8001b94 <VL53L0X_GetLimitCheckValue>
 8005702:	4603      	mov	r3, r0
 8005704:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d006      	beq.n	800571c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800570e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005710:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8005712:	429a      	cmp	r2, r3
 8005714:	d902      	bls.n	800571c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800571c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005720:	2b00      	cmp	r3, #0
 8005722:	d109      	bne.n	8005738 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005724:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8005728:	461a      	mov	r2, r3
 800572a:	2102      	movs	r1, #2
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f7fc f9ab 	bl	8001a88 <VL53L0X_GetLimitCheckEnable>
 8005732:	4603      	mov	r3, r0
 8005734:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8005738:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800573c:	2b00      	cmp	r3, #0
 800573e:	d044      	beq.n	80057ca <VL53L0X_get_pal_range_status+0x1d6>
 8005740:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005744:	2b00      	cmp	r3, #0
 8005746:	d140      	bne.n	80057ca <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8005748:	f107 031c 	add.w	r3, r7, #28
 800574c:	461a      	mov	r2, r3
 800574e:	2102      	movs	r1, #2
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f7fc fa1f 	bl	8001b94 <VL53L0X_GetLimitCheckValue>
 8005756:	4603      	mov	r3, r0
 8005758:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800575c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005760:	2b00      	cmp	r3, #0
 8005762:	d107      	bne.n	8005774 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005764:	2201      	movs	r2, #1
 8005766:	21ff      	movs	r1, #255	; 0xff
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 f9bb 	bl	8005ae4 <VL53L0X_WrByte>
 800576e:	4603      	mov	r3, r0
 8005770:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8005774:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005778:	2b00      	cmp	r3, #0
 800577a:	d109      	bne.n	8005790 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800577c:	f107 0316 	add.w	r3, r7, #22
 8005780:	461a      	mov	r2, r3
 8005782:	21b6      	movs	r1, #182	; 0xb6
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 fa59 	bl	8005c3c <VL53L0X_RdWord>
 800578a:	4603      	mov	r3, r0
 800578c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8005790:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005794:	2b00      	cmp	r3, #0
 8005796:	d107      	bne.n	80057a8 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005798:	2200      	movs	r2, #0
 800579a:	21ff      	movs	r1, #255	; 0xff
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f9a1 	bl	8005ae4 <VL53L0X_WrByte>
 80057a2:	4603      	mov	r3, r0
 80057a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80057a8:	8afb      	ldrh	r3, [r7, #22]
 80057aa:	025b      	lsls	r3, r3, #9
 80057ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d006      	beq.n	80057ca <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80057bc:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80057be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d902      	bls.n	80057ca <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80057c4:	2301      	movs	r3, #1
 80057c6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80057ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d109      	bne.n	80057e6 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80057d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057d6:	461a      	mov	r2, r3
 80057d8:	2103      	movs	r1, #3
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f7fc f954 	bl	8001a88 <VL53L0X_GetLimitCheckEnable>
 80057e0:	4603      	mov	r3, r0
 80057e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80057e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d023      	beq.n	8005836 <VL53L0X_get_pal_range_status+0x242>
 80057ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d11f      	bne.n	8005836 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80057f6:	893b      	ldrh	r3, [r7, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d102      	bne.n	8005802 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005800:	e005      	b.n	800580e <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	021a      	lsls	r2, r3, #8
 8005806:	893b      	ldrh	r3, [r7, #8]
 8005808:	fbb2 f3f3 	udiv	r3, r2, r3
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800580e:	f107 0318 	add.w	r3, r7, #24
 8005812:	461a      	mov	r2, r3
 8005814:	2103      	movs	r1, #3
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f7fc f9bc 	bl	8001b94 <VL53L0X_GetLimitCheckValue>
 800581c:	4603      	mov	r3, r0
 800581e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d006      	beq.n	8005836 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8005828:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800582a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800582c:	429a      	cmp	r2, r3
 800582e:	d202      	bcs.n	8005836 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8005830:	2301      	movs	r3, #1
 8005832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005836:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800583a:	2b00      	cmp	r3, #0
 800583c:	d14a      	bne.n	80058d4 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800583e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005842:	2b01      	cmp	r3, #1
 8005844:	d103      	bne.n	800584e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8005846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005848:	22ff      	movs	r2, #255	; 0xff
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	e042      	b.n	80058d4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800584e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005852:	2b01      	cmp	r3, #1
 8005854:	d007      	beq.n	8005866 <VL53L0X_get_pal_range_status+0x272>
 8005856:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800585a:	2b02      	cmp	r3, #2
 800585c:	d003      	beq.n	8005866 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800585e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005862:	2b03      	cmp	r3, #3
 8005864:	d103      	bne.n	800586e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8005866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005868:	2205      	movs	r2, #5
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	e032      	b.n	80058d4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800586e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005872:	2b06      	cmp	r3, #6
 8005874:	d003      	beq.n	800587e <VL53L0X_get_pal_range_status+0x28a>
 8005876:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800587a:	2b09      	cmp	r3, #9
 800587c:	d103      	bne.n	8005886 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800587e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005880:	2204      	movs	r2, #4
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	e026      	b.n	80058d4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8005886:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800588a:	2b08      	cmp	r3, #8
 800588c:	d007      	beq.n	800589e <VL53L0X_get_pal_range_status+0x2aa>
 800588e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005892:	2b0a      	cmp	r3, #10
 8005894:	d003      	beq.n	800589e <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8005896:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800589a:	2b01      	cmp	r3, #1
 800589c:	d103      	bne.n	80058a6 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800589e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a0:	2203      	movs	r2, #3
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e016      	b.n	80058d4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80058a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d003      	beq.n	80058b6 <VL53L0X_get_pal_range_status+0x2c2>
 80058ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d103      	bne.n	80058be <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80058b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b8:	2202      	movs	r2, #2
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	e00a      	b.n	80058d4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80058be:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d103      	bne.n	80058ce <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80058c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c8:	2201      	movs	r2, #1
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	e002      	b.n	80058d4 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80058ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d0:	2200      	movs	r2, #0
 80058d2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80058d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d102      	bne.n	80058e2 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80058dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058de:	2200      	movs	r2, #0
 80058e0:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80058e2:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80058e6:	461a      	mov	r2, r3
 80058e8:	2101      	movs	r1, #1
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f7fc f8cc 	bl	8001a88 <VL53L0X_GetLimitCheckEnable>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80058f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d14f      	bne.n	800599e <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80058fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <VL53L0X_get_pal_range_status+0x31a>
 8005906:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800590a:	2b01      	cmp	r3, #1
 800590c:	d103      	bne.n	8005916 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005914:	e002      	b.n	800591c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8005916:	2300      	movs	r3, #0
 8005918:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005922:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8005926:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800592a:	2b04      	cmp	r3, #4
 800592c:	d003      	beq.n	8005936 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800592e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8005932:	2b00      	cmp	r3, #0
 8005934:	d103      	bne.n	800593e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8005936:	2301      	movs	r3, #1
 8005938:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800593c:	e002      	b.n	8005944 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800593e:	2300      	movs	r3, #0
 8005940:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800594a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800594e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <VL53L0X_get_pal_range_status+0x36a>
 8005956:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800595a:	2b01      	cmp	r3, #1
 800595c:	d103      	bne.n	8005966 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800595e:	2301      	movs	r3, #1
 8005960:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005964:	e002      	b.n	800596c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8005966:	2300      	movs	r3, #0
 8005968:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005972:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8005976:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <VL53L0X_get_pal_range_status+0x392>
 800597e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005982:	2b01      	cmp	r3, #1
 8005984:	d103      	bne.n	800598e <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800598c:	e002      	b.n	8005994 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800599a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800599e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3740      	adds	r7, #64	; 0x40
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b088      	sub	sp, #32
 80059ae:	af02      	add	r7, sp, #8
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	330a      	adds	r3, #10
 80059ba:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80059c8:	b299      	uxth	r1, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	4613      	mov	r3, r2
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	f001 f83d 	bl	8006a54 <HAL_I2C_Master_Transmit>
 80059da:	4603      	mov	r3, r0
 80059dc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80059de:	693b      	ldr	r3, [r7, #16]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	330a      	adds	r3, #10
 80059f8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8005a06:	f043 0301 	orr.w	r3, r3, #1
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	b299      	uxth	r1, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	4613      	mov	r3, r2
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	f001 f919 	bl	8006c50 <HAL_I2C_Master_Receive>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8005a22:	693b      	ldr	r3, [r7, #16]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	607a      	str	r2, [r7, #4]
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2b3f      	cmp	r3, #63	; 0x3f
 8005a44:	d902      	bls.n	8005a4c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8005a46:	f06f 0303 	mvn.w	r3, #3
 8005a4a:	e016      	b.n	8005a7a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8005a4c:	4a0d      	ldr	r2, [pc, #52]	; (8005a84 <VL53L0X_WriteMulti+0x58>)
 8005a4e:	7afb      	ldrb	r3, [r7, #11]
 8005a50:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	480c      	ldr	r0, [pc, #48]	; (8005a88 <VL53L0X_WriteMulti+0x5c>)
 8005a58:	f003 fc1e 	bl	8009298 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	461a      	mov	r2, r3
 8005a62:	4908      	ldr	r1, [pc, #32]	; (8005a84 <VL53L0X_WriteMulti+0x58>)
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f7ff ffa0 	bl	80059aa <_I2CWrite>
 8005a6a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005a72:	23ec      	movs	r3, #236	; 0xec
 8005a74:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	200005dc 	.word	0x200005dc
 8005a88:	200005dd 	.word	0x200005dd

08005a8c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	607a      	str	r2, [r7, #4]
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005aa0:	f107 030b 	add.w	r3, r7, #11
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f7ff ff7e 	bl	80059aa <_I2CWrite>
 8005aae:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005ab6:	23ec      	movs	r3, #236	; 0xec
 8005ab8:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005aba:	e00c      	b.n	8005ad6 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	6879      	ldr	r1, [r7, #4]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7ff ff91 	bl	80059e8 <_I2CRead>
 8005ac6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005ace:	23ec      	movs	r3, #236	; 0xec
 8005ad0:	75fb      	strb	r3, [r7, #23]
 8005ad2:	e000      	b.n	8005ad6 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8005ad4:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8005ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	70fb      	strb	r3, [r7, #3]
 8005af0:	4613      	mov	r3, r2
 8005af2:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005af4:	2300      	movs	r3, #0
 8005af6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8005af8:	4a0b      	ldr	r2, [pc, #44]	; (8005b28 <VL53L0X_WrByte+0x44>)
 8005afa:	78fb      	ldrb	r3, [r7, #3]
 8005afc:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8005afe:	4a0a      	ldr	r2, [pc, #40]	; (8005b28 <VL53L0X_WrByte+0x44>)
 8005b00:	78bb      	ldrb	r3, [r7, #2]
 8005b02:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8005b04:	2202      	movs	r2, #2
 8005b06:	4908      	ldr	r1, [pc, #32]	; (8005b28 <VL53L0X_WrByte+0x44>)
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f7ff ff4e 	bl	80059aa <_I2CWrite>
 8005b0e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005b16:	23ec      	movs	r3, #236	; 0xec
 8005b18:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	200005dc 	.word	0x200005dc

08005b2c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	70fb      	strb	r3, [r7, #3]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8005b40:	4a0e      	ldr	r2, [pc, #56]	; (8005b7c <VL53L0X_WrWord+0x50>)
 8005b42:	78fb      	ldrb	r3, [r7, #3]
 8005b44:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8005b46:	883b      	ldrh	r3, [r7, #0]
 8005b48:	0a1b      	lsrs	r3, r3, #8
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <VL53L0X_WrWord+0x50>)
 8005b50:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8005b52:	883b      	ldrh	r3, [r7, #0]
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	4b09      	ldr	r3, [pc, #36]	; (8005b7c <VL53L0X_WrWord+0x50>)
 8005b58:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8005b5a:	2203      	movs	r2, #3
 8005b5c:	4907      	ldr	r1, [pc, #28]	; (8005b7c <VL53L0X_WrWord+0x50>)
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7ff ff23 	bl	80059aa <_I2CWrite>
 8005b64:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005b6c:	23ec      	movs	r3, #236	; 0xec
 8005b6e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	200005dc 	.word	0x200005dc

08005b80 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	4608      	mov	r0, r1
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	4603      	mov	r3, r0
 8005b90:	70fb      	strb	r3, [r7, #3]
 8005b92:	460b      	mov	r3, r1
 8005b94:	70bb      	strb	r3, [r7, #2]
 8005b96:	4613      	mov	r3, r2
 8005b98:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8005b9e:	f107 020e 	add.w	r2, r7, #14
 8005ba2:	78fb      	ldrb	r3, [r7, #3]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f81e 	bl	8005be8 <VL53L0X_RdByte>
 8005bac:	4603      	mov	r3, r0
 8005bae:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8005bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d110      	bne.n	8005bda <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8005bb8:	7bba      	ldrb	r2, [r7, #14]
 8005bba:	78bb      	ldrb	r3, [r7, #2]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	787b      	ldrb	r3, [r7, #1]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8005bc8:	7bba      	ldrb	r2, [r7, #14]
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff ff88 	bl	8005ae4 <VL53L0X_WrByte>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	73fb      	strb	r3, [r7, #15]
 8005bd8:	e000      	b.n	8005bdc <VL53L0X_UpdateByte+0x5c>
        goto done;
 8005bda:	bf00      	nop
done:
    return Status;
 8005bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005bfa:	f107 030b 	add.w	r3, r7, #11
 8005bfe:	2201      	movs	r2, #1
 8005c00:	4619      	mov	r1, r3
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7ff fed1 	bl	80059aa <_I2CWrite>
 8005c08:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005c10:	23ec      	movs	r3, #236	; 0xec
 8005c12:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005c14:	e00c      	b.n	8005c30 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8005c16:	2201      	movs	r2, #1
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f7ff fee4 	bl	80059e8 <_I2CRead>
 8005c20:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005c28:	23ec      	movs	r3, #236	; 0xec
 8005c2a:	75fb      	strb	r3, [r7, #23]
 8005c2c:	e000      	b.n	8005c30 <VL53L0X_RdByte+0x48>
    }
done:
 8005c2e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8005c30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3718      	adds	r7, #24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	460b      	mov	r3, r1
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005c4e:	f107 030b 	add.w	r3, r7, #11
 8005c52:	2201      	movs	r2, #1
 8005c54:	4619      	mov	r1, r3
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f7ff fea7 	bl	80059aa <_I2CWrite>
 8005c5c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005c64:	23ec      	movs	r3, #236	; 0xec
 8005c66:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005c68:	e017      	b.n	8005c9a <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	490e      	ldr	r1, [pc, #56]	; (8005ca8 <VL53L0X_RdWord+0x6c>)
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7ff feba 	bl	80059e8 <_I2CRead>
 8005c74:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005c7c:	23ec      	movs	r3, #236	; 0xec
 8005c7e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005c80:	e00b      	b.n	8005c9a <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8005c82:	4b09      	ldr	r3, [pc, #36]	; (8005ca8 <VL53L0X_RdWord+0x6c>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	021b      	lsls	r3, r3, #8
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <VL53L0X_RdWord+0x6c>)
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	4413      	add	r3, r2
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8005c9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	200005dc 	.word	0x200005dc

08005cac <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005cbe:	f107 030b 	add.w	r3, r7, #11
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f7ff fe6f 	bl	80059aa <_I2CWrite>
 8005ccc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005cd4:	23ec      	movs	r3, #236	; 0xec
 8005cd6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005cd8:	e01b      	b.n	8005d12 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8005cda:	2204      	movs	r2, #4
 8005cdc:	4910      	ldr	r1, [pc, #64]	; (8005d20 <VL53L0X_RdDWord+0x74>)
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f7ff fe82 	bl	80059e8 <_I2CRead>
 8005ce4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005cec:	23ec      	movs	r3, #236	; 0xec
 8005cee:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005cf0:	e00f      	b.n	8005d12 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8005cf2:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <VL53L0X_RdDWord+0x74>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	061a      	lsls	r2, r3, #24
 8005cf8:	4b09      	ldr	r3, [pc, #36]	; (8005d20 <VL53L0X_RdDWord+0x74>)
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	041b      	lsls	r3, r3, #16
 8005cfe:	441a      	add	r2, r3
 8005d00:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <VL53L0X_RdDWord+0x74>)
 8005d02:	789b      	ldrb	r3, [r3, #2]
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	4413      	add	r3, r2
 8005d08:	4a05      	ldr	r2, [pc, #20]	; (8005d20 <VL53L0X_RdDWord+0x74>)
 8005d0a:	78d2      	ldrb	r2, [r2, #3]
 8005d0c:	441a      	add	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8005d12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	200005dc 	.word	0x200005dc

08005d24 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8005d30:	2002      	movs	r0, #2
 8005d32:	f000 faa3 	bl	800627c <HAL_Delay>
    return status;
 8005d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <HandleError>:
 * Handle Error
 *
 * Set err on display and loop forever
 * @param err Error case code
 */
void HandleError(int err){
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
    char msg[16];
    sprintf(msg,"JMEr%d", err);
 8005d4c:	f107 0308 	add.w	r3, r7, #8
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	4905      	ldr	r1, [pc, #20]	; (8005d68 <HandleError+0x24>)
 8005d54:	4618      	mov	r0, r3
 8005d56:	f003 fab5 	bl	80092c4 <siprintf>
    F411_SetDisplayString(msg);
 8005d5a:	f107 0308 	add.w	r3, r7, #8
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 f824 	bl	8005dac <F411_SetDisplayString>
    while(1){};
 8005d64:	e7fe      	b.n	8005d64 <HandleError+0x20>
 8005d66:	bf00      	nop
 8005d68:	08009b34 	.word	0x08009b34

08005d6c <VL53L0X_ResetId>:





int VL53L0X_ResetId(int DevNo, int state) {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
    int status=0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
/// AFAIRE RESET


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d80:	4809      	ldr	r0, [pc, #36]	; (8005da8 <VL53L0X_ResetId+0x3c>)
 8005d82:	f000 fd09 	bl	8006798 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8005d86:	2064      	movs	r0, #100	; 0x64
 8005d88:	f000 fa78 	bl	800627c <HAL_Delay>
    if( state )
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d005      	beq.n	8005d9e <VL53L0X_ResetId+0x32>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8005d92:	2201      	movs	r2, #1
 8005d94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d98:	4803      	ldr	r0, [pc, #12]	; (8005da8 <VL53L0X_ResetId+0x3c>)
 8005d9a:	f000 fcfd 	bl	8006798 <HAL_GPIO_WritePin>

    return status;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40020000 	.word	0x40020000

08005dac <F411_SetDisplayString>:

extern UART_HandleTypeDef huart2;

int F411_SetDisplayString(const char *str) {
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]

	int status=1;
 8005db4:	2301      	movs	r3, #1
 8005db6:	60fb      	str	r3, [r7, #12]
	 HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 0xFFFF);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7fa fa11 	bl	80001e0 <strlen>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	4803      	ldr	r0, [pc, #12]	; (8005dd8 <F411_SetDisplayString+0x2c>)
 8005dca:	f002 ff72 	bl	8008cb2 <HAL_UART_Transmit>

    return status;
 8005dce:	68fb      	ldr	r3, [r7, #12]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	20000594 	.word	0x20000594

08005ddc <DetectSensors>:





int DetectSensors(int SetDisplay) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
    int status;
    int FinalAddress;

    debug_printf("Detect Sensor");
    /* Reset all */
    nDevPresent = 0;
 8005de4:	4b4c      	ldr	r3, [pc, #304]	; (8005f18 <DetectSensors+0x13c>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]


        status = VL53L0X_ResetId(0, 0);
 8005dea:	2100      	movs	r1, #0
 8005dec:	2000      	movs	r0, #0
 8005dee:	f7ff ffbd 	bl	8005d6c <VL53L0X_ResetId>
 8005df2:	61f8      	str	r0, [r7, #28]


i =0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	61bb      	str	r3, [r7, #24]
    /* detect all sensors (even on-board)*/
  //  for (i = 0; i < 1; i++) {
        VL53L0X_Dev_t *pDev;
        pDev = &VL53L0XDevs[i];
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005dfe:	fb02 f303 	mul.w	r3, r2, r3
 8005e02:	4a46      	ldr	r2, [pc, #280]	; (8005f1c <DetectSensors+0x140>)
 8005e04:	4413      	add	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
        pDev->I2cDevAddr = 0x52;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2252      	movs	r2, #82	; 0x52
 8005e0c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        pDev->Present = 0;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        status = 0;  // // FAIRE FONCTION RESET
 8005e18:	2300      	movs	r3, #0
 8005e1a:	61fb      	str	r3, [r7, #28]
        VL53L0X_ResetId( pDev->Id, 1);        HAL_Delay(2);
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8005e22:	2101      	movs	r1, #1
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff ffa1 	bl	8005d6c <VL53L0X_ResetId>
 8005e2a:	2002      	movs	r0, #2
 8005e2c:	f000 fa26 	bl	800627c <HAL_Delay>
        FinalAddress=0x52+(i+1+1)*2;
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	332b      	adds	r3, #43	; 0x2b
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	613b      	str	r3, [r7, #16]

        do {
        	/* Set I2C standard mode (400 KHz) before doing the first register access */
        	if (status == VL53L0X_ERROR_NONE)
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <DetectSensors+0x70>
        		status = VL53L0X_WrByte(pDev, 0x88, 0x00);
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2188      	movs	r1, #136	; 0x88
 8005e42:	6978      	ldr	r0, [r7, #20]
 8005e44:	f7ff fe4e 	bl	8005ae4 <VL53L0X_WrByte>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	61fb      	str	r3, [r7, #28]

        	/* Try to read one register using default 0x52 address */
            status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 8005e4c:	f107 030e 	add.w	r3, r7, #14
 8005e50:	461a      	mov	r2, r3
 8005e52:	21c0      	movs	r1, #192	; 0xc0
 8005e54:	6978      	ldr	r0, [r7, #20]
 8005e56:	f7ff fef1 	bl	8005c3c <VL53L0X_RdWord>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	61fb      	str	r3, [r7, #28]
            if (status) {
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d142      	bne.n	8005eea <DetectSensors+0x10e>
                debug_printf("#%d Read id fail\n", i);
                break;
            }
            if (Id == 0xEEAA) {
 8005e64:	89fb      	ldrh	r3, [r7, #14]
 8005e66:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d13a      	bne.n	8005ee4 <DetectSensors+0x108>
				/* Sensor is found => Change its I2C address to final one */
                status = VL53L0X_SetDeviceAddress(pDev,FinalAddress);
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	4619      	mov	r1, r3
 8005e74:	6978      	ldr	r0, [r7, #20]
 8005e76:	f7fa ff71 	bl	8000d5c <VL53L0X_SetDeviceAddress>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	61fb      	str	r3, [r7, #28]
                if (status != 0) {
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d134      	bne.n	8005eee <DetectSensors+0x112>
                    debug_printf("#i VL53L0X_SetDeviceAddress fail\n", i);
                    break;
                }
                pDev->I2cDevAddr = FinalAddress;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
                /* Check all is OK with the new I2C address and initialize the sensor */
                status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 8005e8e:	f107 030e 	add.w	r3, r7, #14
 8005e92:	461a      	mov	r2, r3
 8005e94:	21c0      	movs	r1, #192	; 0xc0
 8005e96:	6978      	ldr	r0, [r7, #20]
 8005e98:	f7ff fed0 	bl	8005c3c <VL53L0X_RdWord>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	61fb      	str	r3, [r7, #28]
                if (status != 0) {
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d125      	bne.n	8005ef2 <DetectSensors+0x116>
					debug_printf("#i VL53L0X_RdWord fail\n", i);
					break;
				}

                status = VL53L0X_DataInit(pDev);
 8005ea6:	6978      	ldr	r0, [r7, #20]
 8005ea8:	f7fa ff70 	bl	8000d8c <VL53L0X_DataInit>
 8005eac:	4603      	mov	r3, r0
 8005eae:	61fb      	str	r3, [r7, #28]
                if( status == 0 ){
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d11f      	bne.n	8005ef6 <DetectSensors+0x11a>
                    pDev->Present = 1;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                else{
                    debug_printf("VL53L0X_DataInit %d fail\n", i);
                    break;
                }
                trace_printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
                nDevPresent++;
 8005ebe:	4b16      	ldr	r3, [pc, #88]	; (8005f18 <DetectSensors+0x13c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	4a14      	ldr	r2, [pc, #80]	; (8005f18 <DetectSensors+0x13c>)
 8005ec6:	6013      	str	r3, [r2, #0]
                nDevMask |= 1 << (i+1);
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	2201      	movs	r2, #1
 8005ece:	409a      	lsls	r2, r3
 8005ed0:	4b13      	ldr	r3, [pc, #76]	; (8005f20 <DetectSensors+0x144>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	4a12      	ldr	r2, [pc, #72]	; (8005f20 <DetectSensors+0x144>)
 8005ed8:	6013      	str	r3, [r2, #0]
                pDev->Present = 1;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8005ee2:	e009      	b.n	8005ef8 <DetectSensors+0x11c>
            }
            else {
                debug_printf("#%d unknown ID %x\n", i, Id);
                status = 1;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	61fb      	str	r3, [r7, #28]
 8005ee8:	e006      	b.n	8005ef8 <DetectSensors+0x11c>
                break;
 8005eea:	bf00      	nop
 8005eec:	e004      	b.n	8005ef8 <DetectSensors+0x11c>
                    break;
 8005eee:	bf00      	nop
 8005ef0:	e002      	b.n	8005ef8 <DetectSensors+0x11c>
					break;
 8005ef2:	bf00      	nop
 8005ef4:	e000      	b.n	8005ef8 <DetectSensors+0x11c>
                    break;
 8005ef6:	bf00      	nop
            }
        } while (0);
        /* if fail r can't use for any reason then put the  device back to reset */
        if (status) {
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <DetectSensors+0x12e>
            VL53L0X_ResetId(i+1, 0);
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	3301      	adds	r3, #1
 8005f02:	2100      	movs	r1, #0
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff ff31 	bl	8005d6c <VL53L0X_ResetId>
        }
    //}
    return nDevPresent;
 8005f0a:	4b03      	ldr	r3, [pc, #12]	; (8005f18 <DetectSensors+0x13c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3720      	adds	r7, #32
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	200004e8 	.word	0x200004e8
 8005f1c:	200002c0 	.word	0x200002c0
 8005f20:	200005d8 	.word	0x200005d8

08005f24 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(RangingConfig_e rangingConfig){
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08c      	sub	sp, #48	; 0x30
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	71fb      	strb	r3, [r7, #7]
    int status;
    uint8_t VhvSettings;
    uint8_t PhaseCal;
    uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 8005f2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f32:	62fb      	str	r3, [r7, #44]	; 0x2c
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 8005f34:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8005f38:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t timingBudget = 33000;
 8005f3a:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t preRangeVcselPeriod = 14;
 8005f40:	230e      	movs	r3, #14
 8005f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t finalRangeVcselPeriod = 10;
 8005f46:	230a      	movs	r3, #10
 8005f48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

 //   for( i=0; i<3; i++){
	i=0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	61fb      	str	r3, [r7, #28]
        if( VL53L0XDevs[i].Present){
 8005f50:	4a80      	ldr	r2, [pc, #512]	; (8006154 <SetupSingleShot+0x230>)
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005f58:	fb01 f303 	mul.w	r3, r1, r3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80f0 	beq.w	800614a <SetupSingleShot+0x226>
            status=VL53L0X_StaticInit(&VL53L0XDevs[i]);
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	4a77      	ldr	r2, [pc, #476]	; (8006154 <SetupSingleShot+0x230>)
 8005f76:	4413      	add	r3, r2
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fb f86b 	bl	8001054 <VL53L0X_StaticInit>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	61bb      	str	r3, [r7, #24]
            if( status ){
                debug_printf("VL53L0X_StaticInit %d failed\n",i);
            }

            status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005f88:	fb02 f303 	mul.w	r3, r2, r3
 8005f8c:	4a71      	ldr	r2, [pc, #452]	; (8006154 <SetupSingleShot+0x230>)
 8005f8e:	4413      	add	r3, r2
 8005f90:	f107 0216 	add.w	r2, r7, #22
 8005f94:	f107 0117 	add.w	r1, r7, #23
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fb feef 	bl	8001d7c <VL53L0X_PerformRefCalibration>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_PerformRefCalibration failed\n");
			}

			status = VL53L0X_PerformRefSpadManagement(&VL53L0XDevs[i], &refSpadCount, &isApertureSpads);
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005fa8:	fb02 f303 	mul.w	r3, r2, r3
 8005fac:	4a69      	ldr	r2, [pc, #420]	; (8006154 <SetupSingleShot+0x230>)
 8005fae:	4413      	add	r3, r2
 8005fb0:	f107 020f 	add.w	r2, r7, #15
 8005fb4:	f107 0110 	add.w	r1, r7, #16
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fc fb6d 	bl	8002698 <VL53L0X_PerformRefSpadManagement>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_PerformRefSpadManagement failed\n");
			}

            status = VL53L0X_SetDeviceMode(&VL53L0XDevs[i], VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005fc8:	fb02 f303 	mul.w	r3, r2, r3
 8005fcc:	4a61      	ldr	r2, [pc, #388]	; (8006154 <SetupSingleShot+0x230>)
 8005fce:	4413      	add	r3, r2
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fb fa50 	bl	8001478 <VL53L0X_SetDeviceMode>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	61bb      	str	r3, [r7, #24]
            if( status ){
               debug_printf("VL53L0X_SetDeviceMode failed\n");
            }

            status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005fe2:	fb02 f303 	mul.w	r3, r2, r3
 8005fe6:	4a5b      	ldr	r2, [pc, #364]	; (8006154 <SetupSingleShot+0x230>)
 8005fe8:	4413      	add	r3, r2
 8005fea:	2201      	movs	r2, #1
 8005fec:	2100      	movs	r1, #0
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fb fcbe 	bl	8001970 <VL53L0X_SetLimitCheckEnable>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
			}

			status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005ffe:	fb02 f303 	mul.w	r3, r2, r3
 8006002:	4a54      	ldr	r2, [pc, #336]	; (8006154 <SetupSingleShot+0x230>)
 8006004:	4413      	add	r3, r2
 8006006:	2201      	movs	r2, #1
 8006008:	2101      	movs	r1, #1
 800600a:	4618      	mov	r0, r3
 800600c:	f7fb fcb0 	bl	8001970 <VL53L0X_SetLimitCheckEnable>
 8006010:	4603      	mov	r3, r0
 8006012:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
			}
			/* Ranging configuration */
            switch(rangingConfig) {
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d016      	beq.n	8006048 <SetupSingleShot+0x124>
 800601a:	2b02      	cmp	r3, #2
 800601c:	dc33      	bgt.n	8006086 <SetupSingleShot+0x162>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <SetupSingleShot+0x104>
 8006022:	2b01      	cmp	r3, #1
 8006024:	d01f      	beq.n	8006066 <SetupSingleShot+0x142>
 8006026:	e02e      	b.n	8006086 <SetupSingleShot+0x162>
            case LONG_RANGE:
            	signalLimit = (FixPoint1616_t)(0.1*65536);
 8006028:	f641 1399 	movw	r3, #6553	; 0x1999
 800602c:	62fb      	str	r3, [r7, #44]	; 0x2c
            	sigmaLimit = (FixPoint1616_t)(60*65536);
 800602e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
            	timingBudget = 33000;
 8006034:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
            	preRangeVcselPeriod = 18;
 800603a:	2312      	movs	r3, #18
 800603c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            	finalRangeVcselPeriod = 14;
 8006040:	230e      	movs	r3, #14
 8006042:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            	break;
 8006046:	e01e      	b.n	8006086 <SetupSingleShot+0x162>
            case HIGH_ACCURACY:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 8006048:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800604c:	62fb      	str	r3, [r7, #44]	; 0x2c
				sigmaLimit = (FixPoint1616_t)(18*65536);
 800604e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28
				timingBudget = 200000;
 8006054:	4b40      	ldr	r3, [pc, #256]	; (8006158 <SetupSingleShot+0x234>)
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
				preRangeVcselPeriod = 14;
 8006058:	230e      	movs	r3, #14
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				finalRangeVcselPeriod = 10;
 800605e:	230a      	movs	r3, #10
 8006060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				break;
 8006064:	e00f      	b.n	8006086 <SetupSingleShot+0x162>
            case HIGH_SPEED:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 8006066:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800606a:	62fb      	str	r3, [r7, #44]	; 0x2c
				sigmaLimit = (FixPoint1616_t)(32*65536);
 800606c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006070:	62bb      	str	r3, [r7, #40]	; 0x28
				timingBudget = 20000;
 8006072:	f644 6320 	movw	r3, #20000	; 0x4e20
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
				preRangeVcselPeriod = 14;
 8006078:	230e      	movs	r3, #14
 800607a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				finalRangeVcselPeriod = 10;
 800607e:	230a      	movs	r3, #10
 8006080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				break;
 8006084:	bf00      	nop
            default:
            	debug_printf("Not Supported");
            }

            status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800608c:	fb02 f303 	mul.w	r3, r2, r3
 8006090:	4a30      	ldr	r2, [pc, #192]	; (8006154 <SetupSingleShot+0x230>)
 8006092:	4413      	add	r3, r2
 8006094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006096:	2101      	movs	r1, #1
 8006098:	4618      	mov	r0, r3
 800609a:	f7fb fd19 	bl	8001ad0 <VL53L0X_SetLimitCheckValue>
 800609e:	4603      	mov	r3, r0
 80060a0:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
			}

			status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80060a8:	fb02 f303 	mul.w	r3, r2, r3
 80060ac:	4a29      	ldr	r2, [pc, #164]	; (8006154 <SetupSingleShot+0x230>)
 80060ae:	4413      	add	r3, r2
 80060b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fb fd0b 	bl	8001ad0 <VL53L0X_SetLimitCheckValue>
 80060ba:	4603      	mov	r3, r0
 80060bc:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
			}

            status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&VL53L0XDevs[i],  timingBudget);
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80060c4:	fb02 f303 	mul.w	r3, r2, r3
 80060c8:	4a22      	ldr	r2, [pc, #136]	; (8006154 <SetupSingleShot+0x230>)
 80060ca:	4413      	add	r3, r2
 80060cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fb fa30 	bl	8001534 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80060d4:	4603      	mov	r3, r0
 80060d6:	61bb      	str	r3, [r7, #24]
            if( status ){
               debug_printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
            }

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80060de:	fb02 f303 	mul.w	r3, r2, r3
 80060e2:	4a1c      	ldr	r2, [pc, #112]	; (8006154 <SetupSingleShot+0x230>)
 80060e4:	4413      	add	r3, r2
 80060e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80060ea:	2100      	movs	r1, #0
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fb fa47 	bl	8001580 <VL53L0X_SetVcselPulsePeriod>
 80060f2:	4603      	mov	r3, r0
 80060f4:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
			}

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80060fc:	fb02 f303 	mul.w	r3, r2, r3
 8006100:	4a14      	ldr	r2, [pc, #80]	; (8006154 <SetupSingleShot+0x230>)
 8006102:	4413      	add	r3, r2
 8006104:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006108:	2101      	movs	r1, #1
 800610a:	4618      	mov	r0, r3
 800610c:	f7fb fa38 	bl	8001580 <VL53L0X_SetVcselPulsePeriod>
 8006110:	4603      	mov	r3, r0
 8006112:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
			}

			status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800611a:	fb02 f303 	mul.w	r3, r2, r3
 800611e:	4a0d      	ldr	r2, [pc, #52]	; (8006154 <SetupSingleShot+0x230>)
 8006120:	4413      	add	r3, r2
 8006122:	f107 0216 	add.w	r2, r7, #22
 8006126:	f107 0117 	add.w	r1, r7, #23
 800612a:	4618      	mov	r0, r3
 800612c:	f7fb fe26 	bl	8001d7c <VL53L0X_PerformRefCalibration>
 8006130:	4603      	mov	r3, r0
 8006132:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_PerformRefCalibration  failed\n");
			}

            VL53L0XDevs[i].LeakyFirst=1;
 8006134:	4a07      	ldr	r2, [pc, #28]	; (8006154 <SetupSingleShot+0x230>)
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800613c:	fb01 f303 	mul.w	r3, r1, r3
 8006140:	4413      	add	r3, r2
 8006142:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006146:	2201      	movs	r2, #1
 8006148:	601a      	str	r2, [r3, #0]
        }

}
 800614a:	bf00      	nop
 800614c:	3730      	adds	r7, #48	; 0x30
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	200002c0 	.word	0x200002c0
 8006158:	00030d40 	.word	0x00030d40

0800615c <ResetAndDetectSensor>:





void ResetAndDetectSensor(int SetDisplay){
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
    int nSensor;
    nSensor = DetectSensors(SetDisplay);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff fe39 	bl	8005ddc <DetectSensors>
 800616a:	60f8      	str	r0, [r7, #12]
    /* at least one sensor and if one it must be the built-in one  */
    if( (nSensor <=0) ||  (nSensor ==1 && VL53L0XDevs[0].Present==0) ){
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	dd07      	ble.n	8006182 <ResetAndDetectSensor+0x26>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d108      	bne.n	800618a <ResetAndDetectSensor+0x2e>
 8006178:	4b06      	ldr	r3, [pc, #24]	; (8006194 <ResetAndDetectSensor+0x38>)
 800617a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <ResetAndDetectSensor+0x2e>
        HandleError(ERR_DETECT);
 8006182:	f04f 30ff 	mov.w	r0, #4294967295
 8006186:	f7ff fddd 	bl	8005d44 <HandleError>
    }
}
 800618a:	bf00      	nop
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	200002c0 	.word	0x200002c0

08006198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800619c:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <HAL_Init+0x40>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a0d      	ldr	r2, [pc, #52]	; (80061d8 <HAL_Init+0x40>)
 80061a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80061a8:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <HAL_Init+0x40>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a0a      	ldr	r2, [pc, #40]	; (80061d8 <HAL_Init+0x40>)
 80061ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061b4:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <HAL_Init+0x40>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a07      	ldr	r2, [pc, #28]	; (80061d8 <HAL_Init+0x40>)
 80061ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061c0:	2003      	movs	r0, #3
 80061c2:	f000 f931 	bl	8006428 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80061c6:	2000      	movs	r0, #0
 80061c8:	f000 f808 	bl	80061dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80061cc:	f7fa fc08 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	40023c00 	.word	0x40023c00

080061dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80061e4:	4b12      	ldr	r3, [pc, #72]	; (8006230 <HAL_InitTick+0x54>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	4b12      	ldr	r3, [pc, #72]	; (8006234 <HAL_InitTick+0x58>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	4619      	mov	r1, r3
 80061ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80061f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 f93b 	bl	8006476 <HAL_SYSTICK_Config>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e00e      	b.n	8006228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b0f      	cmp	r3, #15
 800620e:	d80a      	bhi.n	8006226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006210:	2200      	movs	r2, #0
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	f04f 30ff 	mov.w	r0, #4294967295
 8006218:	f000 f911 	bl	800643e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800621c:	4a06      	ldr	r2, [pc, #24]	; (8006238 <HAL_InitTick+0x5c>)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	e000      	b.n	8006228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	20000000 	.word	0x20000000
 8006234:	20000454 	.word	0x20000454
 8006238:	20000450 	.word	0x20000450

0800623c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <HAL_IncTick+0x20>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	461a      	mov	r2, r3
 8006246:	4b06      	ldr	r3, [pc, #24]	; (8006260 <HAL_IncTick+0x24>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4413      	add	r3, r2
 800624c:	4a04      	ldr	r2, [pc, #16]	; (8006260 <HAL_IncTick+0x24>)
 800624e:	6013      	str	r3, [r2, #0]
}
 8006250:	bf00      	nop
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	20000454 	.word	0x20000454
 8006260:	2000068c 	.word	0x2000068c

08006264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006264:	b480      	push	{r7}
 8006266:	af00      	add	r7, sp, #0
  return uwTick;
 8006268:	4b03      	ldr	r3, [pc, #12]	; (8006278 <HAL_GetTick+0x14>)
 800626a:	681b      	ldr	r3, [r3, #0]
}
 800626c:	4618      	mov	r0, r3
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	2000068c 	.word	0x2000068c

0800627c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006284:	f7ff ffee 	bl	8006264 <HAL_GetTick>
 8006288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006294:	d005      	beq.n	80062a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006296:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <HAL_Delay+0x44>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4413      	add	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80062a2:	bf00      	nop
 80062a4:	f7ff ffde 	bl	8006264 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d8f7      	bhi.n	80062a4 <HAL_Delay+0x28>
  {
  }
}
 80062b4:	bf00      	nop
 80062b6:	bf00      	nop
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000454 	.word	0x20000454

080062c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062d4:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <__NVIC_SetPriorityGrouping+0x44>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062e0:	4013      	ands	r3, r2
 80062e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062f6:	4a04      	ldr	r2, [pc, #16]	; (8006308 <__NVIC_SetPriorityGrouping+0x44>)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	60d3      	str	r3, [r2, #12]
}
 80062fc:	bf00      	nop
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	e000ed00 	.word	0xe000ed00

0800630c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006310:	4b04      	ldr	r3, [pc, #16]	; (8006324 <__NVIC_GetPriorityGrouping+0x18>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	0a1b      	lsrs	r3, r3, #8
 8006316:	f003 0307 	and.w	r3, r3, #7
}
 800631a:	4618      	mov	r0, r3
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	e000ed00 	.word	0xe000ed00

08006328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	6039      	str	r1, [r7, #0]
 8006332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006338:	2b00      	cmp	r3, #0
 800633a:	db0a      	blt.n	8006352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	b2da      	uxtb	r2, r3
 8006340:	490c      	ldr	r1, [pc, #48]	; (8006374 <__NVIC_SetPriority+0x4c>)
 8006342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006346:	0112      	lsls	r2, r2, #4
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	440b      	add	r3, r1
 800634c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006350:	e00a      	b.n	8006368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	b2da      	uxtb	r2, r3
 8006356:	4908      	ldr	r1, [pc, #32]	; (8006378 <__NVIC_SetPriority+0x50>)
 8006358:	79fb      	ldrb	r3, [r7, #7]
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	3b04      	subs	r3, #4
 8006360:	0112      	lsls	r2, r2, #4
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	440b      	add	r3, r1
 8006366:	761a      	strb	r2, [r3, #24]
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	e000e100 	.word	0xe000e100
 8006378:	e000ed00 	.word	0xe000ed00

0800637c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800637c:	b480      	push	{r7}
 800637e:	b089      	sub	sp, #36	; 0x24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	f1c3 0307 	rsb	r3, r3, #7
 8006396:	2b04      	cmp	r3, #4
 8006398:	bf28      	it	cs
 800639a:	2304      	movcs	r3, #4
 800639c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	3304      	adds	r3, #4
 80063a2:	2b06      	cmp	r3, #6
 80063a4:	d902      	bls.n	80063ac <NVIC_EncodePriority+0x30>
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	3b03      	subs	r3, #3
 80063aa:	e000      	b.n	80063ae <NVIC_EncodePriority+0x32>
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063b0:	f04f 32ff 	mov.w	r2, #4294967295
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ba:	43da      	mvns	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	401a      	ands	r2, r3
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063c4:	f04f 31ff 	mov.w	r1, #4294967295
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	fa01 f303 	lsl.w	r3, r1, r3
 80063ce:	43d9      	mvns	r1, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063d4:	4313      	orrs	r3, r2
         );
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3724      	adds	r7, #36	; 0x24
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
	...

080063e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063f4:	d301      	bcc.n	80063fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063f6:	2301      	movs	r3, #1
 80063f8:	e00f      	b.n	800641a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063fa:	4a0a      	ldr	r2, [pc, #40]	; (8006424 <SysTick_Config+0x40>)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3b01      	subs	r3, #1
 8006400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006402:	210f      	movs	r1, #15
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	f7ff ff8e 	bl	8006328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800640c:	4b05      	ldr	r3, [pc, #20]	; (8006424 <SysTick_Config+0x40>)
 800640e:	2200      	movs	r2, #0
 8006410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006412:	4b04      	ldr	r3, [pc, #16]	; (8006424 <SysTick_Config+0x40>)
 8006414:	2207      	movs	r2, #7
 8006416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	e000e010 	.word	0xe000e010

08006428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff ff47 	bl	80062c4 <__NVIC_SetPriorityGrouping>
}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800643e:	b580      	push	{r7, lr}
 8006440:	b086      	sub	sp, #24
 8006442:	af00      	add	r7, sp, #0
 8006444:	4603      	mov	r3, r0
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
 800644a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800644c:	2300      	movs	r3, #0
 800644e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006450:	f7ff ff5c 	bl	800630c <__NVIC_GetPriorityGrouping>
 8006454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	6978      	ldr	r0, [r7, #20]
 800645c:	f7ff ff8e 	bl	800637c <NVIC_EncodePriority>
 8006460:	4602      	mov	r2, r0
 8006462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006466:	4611      	mov	r1, r2
 8006468:	4618      	mov	r0, r3
 800646a:	f7ff ff5d 	bl	8006328 <__NVIC_SetPriority>
}
 800646e:	bf00      	nop
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff ffb0 	bl	80063e4 <SysTick_Config>
 8006484:	4603      	mov	r3, r0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006490:	b480      	push	{r7}
 8006492:	b089      	sub	sp, #36	; 0x24
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800649a:	2300      	movs	r3, #0
 800649c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800649e:	2300      	movs	r3, #0
 80064a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064a6:	2300      	movs	r3, #0
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	e159      	b.n	8006760 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064ac:	2201      	movs	r2, #1
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	fa02 f303 	lsl.w	r3, r2, r3
 80064b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4013      	ands	r3, r2
 80064be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	f040 8148 	bne.w	800675a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d005      	beq.n	80064e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d130      	bne.n	8006544 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	2203      	movs	r2, #3
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	43db      	mvns	r3, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4013      	ands	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	fa02 f303 	lsl.w	r3, r2, r3
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	4313      	orrs	r3, r2
 800650a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006518:	2201      	movs	r2, #1
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	43db      	mvns	r3, r3
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	4013      	ands	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	091b      	lsrs	r3, r3, #4
 800652e:	f003 0201 	and.w	r2, r3, #1
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	4313      	orrs	r3, r2
 800653c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f003 0303 	and.w	r3, r3, #3
 800654c:	2b03      	cmp	r3, #3
 800654e:	d017      	beq.n	8006580 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	2203      	movs	r2, #3
 800655c:	fa02 f303 	lsl.w	r3, r2, r3
 8006560:	43db      	mvns	r3, r3
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	4013      	ands	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	4313      	orrs	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f003 0303 	and.w	r3, r3, #3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d123      	bne.n	80065d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	08da      	lsrs	r2, r3, #3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3208      	adds	r2, #8
 8006594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	220f      	movs	r2, #15
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	43db      	mvns	r3, r3
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	4013      	ands	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f003 0307 	and.w	r3, r3, #7
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	08da      	lsrs	r2, r3, #3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3208      	adds	r2, #8
 80065ce:	69b9      	ldr	r1, [r7, #24]
 80065d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	2203      	movs	r2, #3
 80065e0:	fa02 f303 	lsl.w	r3, r2, r3
 80065e4:	43db      	mvns	r3, r3
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	4013      	ands	r3, r2
 80065ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f003 0203 	and.w	r2, r3, #3
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	fa02 f303 	lsl.w	r3, r2, r3
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	4313      	orrs	r3, r2
 8006600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80a2 	beq.w	800675a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	4b57      	ldr	r3, [pc, #348]	; (8006778 <HAL_GPIO_Init+0x2e8>)
 800661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661e:	4a56      	ldr	r2, [pc, #344]	; (8006778 <HAL_GPIO_Init+0x2e8>)
 8006620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006624:	6453      	str	r3, [r2, #68]	; 0x44
 8006626:	4b54      	ldr	r3, [pc, #336]	; (8006778 <HAL_GPIO_Init+0x2e8>)
 8006628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006632:	4a52      	ldr	r2, [pc, #328]	; (800677c <HAL_GPIO_Init+0x2ec>)
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	089b      	lsrs	r3, r3, #2
 8006638:	3302      	adds	r3, #2
 800663a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800663e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	220f      	movs	r2, #15
 800664a:	fa02 f303 	lsl.w	r3, r2, r3
 800664e:	43db      	mvns	r3, r3
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	4013      	ands	r3, r2
 8006654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a49      	ldr	r2, [pc, #292]	; (8006780 <HAL_GPIO_Init+0x2f0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d019      	beq.n	8006692 <HAL_GPIO_Init+0x202>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a48      	ldr	r2, [pc, #288]	; (8006784 <HAL_GPIO_Init+0x2f4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <HAL_GPIO_Init+0x1fe>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a47      	ldr	r2, [pc, #284]	; (8006788 <HAL_GPIO_Init+0x2f8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00d      	beq.n	800668a <HAL_GPIO_Init+0x1fa>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a46      	ldr	r2, [pc, #280]	; (800678c <HAL_GPIO_Init+0x2fc>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d007      	beq.n	8006686 <HAL_GPIO_Init+0x1f6>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a45      	ldr	r2, [pc, #276]	; (8006790 <HAL_GPIO_Init+0x300>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d101      	bne.n	8006682 <HAL_GPIO_Init+0x1f2>
 800667e:	2304      	movs	r3, #4
 8006680:	e008      	b.n	8006694 <HAL_GPIO_Init+0x204>
 8006682:	2307      	movs	r3, #7
 8006684:	e006      	b.n	8006694 <HAL_GPIO_Init+0x204>
 8006686:	2303      	movs	r3, #3
 8006688:	e004      	b.n	8006694 <HAL_GPIO_Init+0x204>
 800668a:	2302      	movs	r3, #2
 800668c:	e002      	b.n	8006694 <HAL_GPIO_Init+0x204>
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <HAL_GPIO_Init+0x204>
 8006692:	2300      	movs	r3, #0
 8006694:	69fa      	ldr	r2, [r7, #28]
 8006696:	f002 0203 	and.w	r2, r2, #3
 800669a:	0092      	lsls	r2, r2, #2
 800669c:	4093      	lsls	r3, r2
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066a4:	4935      	ldr	r1, [pc, #212]	; (800677c <HAL_GPIO_Init+0x2ec>)
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	089b      	lsrs	r3, r3, #2
 80066aa:	3302      	adds	r3, #2
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066b2:	4b38      	ldr	r3, [pc, #224]	; (8006794 <HAL_GPIO_Init+0x304>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	43db      	mvns	r3, r3
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	4013      	ands	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80066d6:	4a2f      	ldr	r2, [pc, #188]	; (8006794 <HAL_GPIO_Init+0x304>)
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80066dc:	4b2d      	ldr	r3, [pc, #180]	; (8006794 <HAL_GPIO_Init+0x304>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	43db      	mvns	r3, r3
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	4013      	ands	r3, r2
 80066ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006700:	4a24      	ldr	r2, [pc, #144]	; (8006794 <HAL_GPIO_Init+0x304>)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006706:	4b23      	ldr	r3, [pc, #140]	; (8006794 <HAL_GPIO_Init+0x304>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	43db      	mvns	r3, r3
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	4013      	ands	r3, r2
 8006714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800672a:	4a1a      	ldr	r2, [pc, #104]	; (8006794 <HAL_GPIO_Init+0x304>)
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006730:	4b18      	ldr	r3, [pc, #96]	; (8006794 <HAL_GPIO_Init+0x304>)
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	43db      	mvns	r3, r3
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	4013      	ands	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006754:	4a0f      	ldr	r2, [pc, #60]	; (8006794 <HAL_GPIO_Init+0x304>)
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	3301      	adds	r3, #1
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	2b0f      	cmp	r3, #15
 8006764:	f67f aea2 	bls.w	80064ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006768:	bf00      	nop
 800676a:	bf00      	nop
 800676c:	3724      	adds	r7, #36	; 0x24
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40023800 	.word	0x40023800
 800677c:	40013800 	.word	0x40013800
 8006780:	40020000 	.word	0x40020000
 8006784:	40020400 	.word	0x40020400
 8006788:	40020800 	.word	0x40020800
 800678c:	40020c00 	.word	0x40020c00
 8006790:	40021000 	.word	0x40021000
 8006794:	40013c00 	.word	0x40013c00

08006798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	807b      	strh	r3, [r7, #2]
 80067a4:	4613      	mov	r3, r2
 80067a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067a8:	787b      	ldrb	r3, [r7, #1]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067ae:	887a      	ldrh	r2, [r7, #2]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067b4:	e003      	b.n	80067be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067b6:	887b      	ldrh	r3, [r7, #2]
 80067b8:	041a      	lsls	r2, r3, #16
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	619a      	str	r2, [r3, #24]
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
	...

080067cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e12b      	b.n	8006a36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7fa f91c 	bl	8000a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2224      	movs	r2, #36	; 0x24
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0201 	bic.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800681e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800682e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006830:	f001 fbae 	bl	8007f90 <HAL_RCC_GetPCLK1Freq>
 8006834:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	4a81      	ldr	r2, [pc, #516]	; (8006a40 <HAL_I2C_Init+0x274>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d807      	bhi.n	8006850 <HAL_I2C_Init+0x84>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4a80      	ldr	r2, [pc, #512]	; (8006a44 <HAL_I2C_Init+0x278>)
 8006844:	4293      	cmp	r3, r2
 8006846:	bf94      	ite	ls
 8006848:	2301      	movls	r3, #1
 800684a:	2300      	movhi	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	e006      	b.n	800685e <HAL_I2C_Init+0x92>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4a7d      	ldr	r2, [pc, #500]	; (8006a48 <HAL_I2C_Init+0x27c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	bf94      	ite	ls
 8006858:	2301      	movls	r3, #1
 800685a:	2300      	movhi	r3, #0
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e0e7      	b.n	8006a36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4a78      	ldr	r2, [pc, #480]	; (8006a4c <HAL_I2C_Init+0x280>)
 800686a:	fba2 2303 	umull	r2, r3, r2, r3
 800686e:	0c9b      	lsrs	r3, r3, #18
 8006870:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	430a      	orrs	r2, r1
 8006884:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	4a6a      	ldr	r2, [pc, #424]	; (8006a40 <HAL_I2C_Init+0x274>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d802      	bhi.n	80068a0 <HAL_I2C_Init+0xd4>
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	3301      	adds	r3, #1
 800689e:	e009      	b.n	80068b4 <HAL_I2C_Init+0xe8>
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068a6:	fb02 f303 	mul.w	r3, r2, r3
 80068aa:	4a69      	ldr	r2, [pc, #420]	; (8006a50 <HAL_I2C_Init+0x284>)
 80068ac:	fba2 2303 	umull	r2, r3, r2, r3
 80068b0:	099b      	lsrs	r3, r3, #6
 80068b2:	3301      	adds	r3, #1
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6812      	ldr	r2, [r2, #0]
 80068b8:	430b      	orrs	r3, r1
 80068ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80068c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	495c      	ldr	r1, [pc, #368]	; (8006a40 <HAL_I2C_Init+0x274>)
 80068d0:	428b      	cmp	r3, r1
 80068d2:	d819      	bhi.n	8006908 <HAL_I2C_Init+0x13c>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	1e59      	subs	r1, r3, #1
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	fbb1 f3f3 	udiv	r3, r1, r3
 80068e2:	1c59      	adds	r1, r3, #1
 80068e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80068e8:	400b      	ands	r3, r1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <HAL_I2C_Init+0x138>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	1e59      	subs	r1, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80068fc:	3301      	adds	r3, #1
 80068fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006902:	e051      	b.n	80069a8 <HAL_I2C_Init+0x1dc>
 8006904:	2304      	movs	r3, #4
 8006906:	e04f      	b.n	80069a8 <HAL_I2C_Init+0x1dc>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d111      	bne.n	8006934 <HAL_I2C_Init+0x168>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	1e58      	subs	r0, r3, #1
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6859      	ldr	r1, [r3, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	440b      	add	r3, r1
 800691e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006922:	3301      	adds	r3, #1
 8006924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006928:	2b00      	cmp	r3, #0
 800692a:	bf0c      	ite	eq
 800692c:	2301      	moveq	r3, #1
 800692e:	2300      	movne	r3, #0
 8006930:	b2db      	uxtb	r3, r3
 8006932:	e012      	b.n	800695a <HAL_I2C_Init+0x18e>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	1e58      	subs	r0, r3, #1
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6859      	ldr	r1, [r3, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	0099      	lsls	r1, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	fbb0 f3f3 	udiv	r3, r0, r3
 800694a:	3301      	adds	r3, #1
 800694c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006950:	2b00      	cmp	r3, #0
 8006952:	bf0c      	ite	eq
 8006954:	2301      	moveq	r3, #1
 8006956:	2300      	movne	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <HAL_I2C_Init+0x196>
 800695e:	2301      	movs	r3, #1
 8006960:	e022      	b.n	80069a8 <HAL_I2C_Init+0x1dc>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10e      	bne.n	8006988 <HAL_I2C_Init+0x1bc>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	1e58      	subs	r0, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6859      	ldr	r1, [r3, #4]
 8006972:	460b      	mov	r3, r1
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	440b      	add	r3, r1
 8006978:	fbb0 f3f3 	udiv	r3, r0, r3
 800697c:	3301      	adds	r3, #1
 800697e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006986:	e00f      	b.n	80069a8 <HAL_I2C_Init+0x1dc>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	1e58      	subs	r0, r3, #1
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6859      	ldr	r1, [r3, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	440b      	add	r3, r1
 8006996:	0099      	lsls	r1, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	fbb0 f3f3 	udiv	r3, r0, r3
 800699e:	3301      	adds	r3, #1
 80069a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	6809      	ldr	r1, [r1, #0]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69da      	ldr	r2, [r3, #28]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80069d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	6911      	ldr	r1, [r2, #16]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	68d2      	ldr	r2, [r2, #12]
 80069e2:	4311      	orrs	r1, r2
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6812      	ldr	r2, [r2, #0]
 80069e8:	430b      	orrs	r3, r1
 80069ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695a      	ldr	r2, [r3, #20]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0201 	orr.w	r2, r2, #1
 8006a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	000186a0 	.word	0x000186a0
 8006a44:	001e847f 	.word	0x001e847f
 8006a48:	003d08ff 	.word	0x003d08ff
 8006a4c:	431bde83 	.word	0x431bde83
 8006a50:	10624dd3 	.word	0x10624dd3

08006a54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	607a      	str	r2, [r7, #4]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	460b      	mov	r3, r1
 8006a62:	817b      	strh	r3, [r7, #10]
 8006a64:	4613      	mov	r3, r2
 8006a66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a68:	f7ff fbfc 	bl	8006264 <HAL_GetTick>
 8006a6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	f040 80e0 	bne.w	8006c3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	2319      	movs	r3, #25
 8006a82:	2201      	movs	r2, #1
 8006a84:	4970      	ldr	r1, [pc, #448]	; (8006c48 <HAL_I2C_Master_Transmit+0x1f4>)
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 fc58 	bl	800733c <I2C_WaitOnFlagUntilTimeout>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006a92:	2302      	movs	r3, #2
 8006a94:	e0d3      	b.n	8006c3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_I2C_Master_Transmit+0x50>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e0cc      	b.n	8006c3e <HAL_I2C_Master_Transmit+0x1ea>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d007      	beq.n	8006aca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f042 0201 	orr.w	r2, r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ad8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2221      	movs	r2, #33	; 0x21
 8006ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2210      	movs	r2, #16
 8006ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	893a      	ldrh	r2, [r7, #8]
 8006afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4a50      	ldr	r2, [pc, #320]	; (8006c4c <HAL_I2C_Master_Transmit+0x1f8>)
 8006b0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006b0c:	8979      	ldrh	r1, [r7, #10]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	6a3a      	ldr	r2, [r7, #32]
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 fac2 	bl	800709c <I2C_MasterRequestWrite>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e08d      	b.n	8006c3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b22:	2300      	movs	r3, #0
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	613b      	str	r3, [r7, #16]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	613b      	str	r3, [r7, #16]
 8006b36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006b38:	e066      	b.n	8006c08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	6a39      	ldr	r1, [r7, #32]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 fcd2 	bl	80074e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00d      	beq.n	8006b66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d107      	bne.n	8006b62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e06b      	b.n	8006c3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	781a      	ldrb	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	1c5a      	adds	r2, r3, #1
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	d11b      	bne.n	8006bdc <HAL_I2C_Master_Transmit+0x188>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d017      	beq.n	8006bdc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	781a      	ldrb	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	1c5a      	adds	r2, r3, #1
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	6a39      	ldr	r1, [r7, #32]
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fcc2 	bl	800756a <I2C_WaitOnBTFFlagUntilTimeout>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00d      	beq.n	8006c08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	d107      	bne.n	8006c04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e01a      	b.n	8006c3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d194      	bne.n	8006b3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e000      	b.n	8006c3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006c3c:	2302      	movs	r3, #2
  }
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	00100002 	.word	0x00100002
 8006c4c:	ffff0000 	.word	0xffff0000

08006c50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08c      	sub	sp, #48	; 0x30
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	607a      	str	r2, [r7, #4]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	817b      	strh	r3, [r7, #10]
 8006c60:	4613      	mov	r3, r2
 8006c62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c64:	f7ff fafe 	bl	8006264 <HAL_GetTick>
 8006c68:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	f040 820b 	bne.w	800708e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	2319      	movs	r3, #25
 8006c7e:	2201      	movs	r2, #1
 8006c80:	497c      	ldr	r1, [pc, #496]	; (8006e74 <HAL_I2C_Master_Receive+0x224>)
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 fb5a 	bl	800733c <I2C_WaitOnFlagUntilTimeout>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	e1fe      	b.n	8007090 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d101      	bne.n	8006ca0 <HAL_I2C_Master_Receive+0x50>
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e1f7      	b.n	8007090 <HAL_I2C_Master_Receive+0x440>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d007      	beq.n	8006cc6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f042 0201 	orr.w	r2, r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2222      	movs	r2, #34	; 0x22
 8006cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2210      	movs	r2, #16
 8006ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	893a      	ldrh	r2, [r7, #8]
 8006cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4a5c      	ldr	r2, [pc, #368]	; (8006e78 <HAL_I2C_Master_Receive+0x228>)
 8006d06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006d08:	8979      	ldrh	r1, [r7, #10]
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 fa46 	bl	80071a0 <I2C_MasterRequestRead>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e1b8      	b.n	8007090 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d113      	bne.n	8006d4e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d26:	2300      	movs	r3, #0
 8006d28:	623b      	str	r3, [r7, #32]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	623b      	str	r3, [r7, #32]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	623b      	str	r3, [r7, #32]
 8006d3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	e18c      	b.n	8007068 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d11b      	bne.n	8006d8e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d66:	2300      	movs	r3, #0
 8006d68:	61fb      	str	r3, [r7, #28]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	61fb      	str	r3, [r7, #28]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	61fb      	str	r3, [r7, #28]
 8006d7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	e16c      	b.n	8007068 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d11b      	bne.n	8006dce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006da4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006db4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006db6:	2300      	movs	r3, #0
 8006db8:	61bb      	str	r3, [r7, #24]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	61bb      	str	r3, [r7, #24]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	61bb      	str	r3, [r7, #24]
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	e14c      	b.n	8007068 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ddc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006df4:	e138      	b.n	8007068 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	f200 80f1 	bhi.w	8006fe2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d123      	bne.n	8006e50 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 fbed 	bl	80075ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e139      	b.n	8007090 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	691a      	ldr	r2, [r3, #16]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e4e:	e10b      	b.n	8007068 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d14e      	bne.n	8006ef6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5e:	2200      	movs	r2, #0
 8006e60:	4906      	ldr	r1, [pc, #24]	; (8006e7c <HAL_I2C_Master_Receive+0x22c>)
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 fa6a 	bl	800733c <I2C_WaitOnFlagUntilTimeout>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d008      	beq.n	8006e80 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e10e      	b.n	8007090 <HAL_I2C_Master_Receive+0x440>
 8006e72:	bf00      	nop
 8006e74:	00100002 	.word	0x00100002
 8006e78:	ffff0000 	.word	0xffff0000
 8006e7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691a      	ldr	r2, [r3, #16]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eac:	3b01      	subs	r3, #1
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ef4:	e0b8      	b.n	8007068 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	2200      	movs	r2, #0
 8006efe:	4966      	ldr	r1, [pc, #408]	; (8007098 <HAL_I2C_Master_Receive+0x448>)
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f000 fa1b 	bl	800733c <I2C_WaitOnFlagUntilTimeout>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e0bf      	b.n	8007090 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691a      	ldr	r2, [r3, #16]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	2200      	movs	r2, #0
 8006f5a:	494f      	ldr	r1, [pc, #316]	; (8007098 <HAL_I2C_Master_Receive+0x448>)
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f000 f9ed 	bl	800733c <I2C_WaitOnFlagUntilTimeout>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e091      	b.n	8007090 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	691a      	ldr	r2, [r3, #16]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	691a      	ldr	r2, [r3, #16]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	b2d2      	uxtb	r2, r2
 8006fba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fe0:	e042      	b.n	8007068 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 fb00 	bl	80075ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e04c      	b.n	8007090 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	691a      	ldr	r2, [r3, #16]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	b2d2      	uxtb	r2, r2
 8007002:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007012:	3b01      	subs	r3, #1
 8007014:	b29a      	uxth	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	f003 0304 	and.w	r3, r3, #4
 8007032:	2b04      	cmp	r3, #4
 8007034:	d118      	bne.n	8007068 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691a      	ldr	r2, [r3, #16]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	b2d2      	uxtb	r2, r2
 8007042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007052:	3b01      	subs	r3, #1
 8007054:	b29a      	uxth	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706c:	2b00      	cmp	r3, #0
 800706e:	f47f aec2 	bne.w	8006df6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2220      	movs	r2, #32
 8007076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	e000      	b.n	8007090 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800708e:	2302      	movs	r3, #2
  }
}
 8007090:	4618      	mov	r0, r3
 8007092:	3728      	adds	r7, #40	; 0x28
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	00010004 	.word	0x00010004

0800709c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	607a      	str	r2, [r7, #4]
 80070a6:	603b      	str	r3, [r7, #0]
 80070a8:	460b      	mov	r3, r1
 80070aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d006      	beq.n	80070c6 <I2C_MasterRequestWrite+0x2a>
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d003      	beq.n	80070c6 <I2C_MasterRequestWrite+0x2a>
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070c4:	d108      	bne.n	80070d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	e00b      	b.n	80070f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070dc:	2b12      	cmp	r3, #18
 80070de:	d107      	bne.n	80070f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 f91d 	bl	800733c <I2C_WaitOnFlagUntilTimeout>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00d      	beq.n	8007124 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007116:	d103      	bne.n	8007120 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800711e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e035      	b.n	8007190 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800712c:	d108      	bne.n	8007140 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800712e:	897b      	ldrh	r3, [r7, #10]
 8007130:	b2db      	uxtb	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800713c:	611a      	str	r2, [r3, #16]
 800713e:	e01b      	b.n	8007178 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007140:	897b      	ldrh	r3, [r7, #10]
 8007142:	11db      	asrs	r3, r3, #7
 8007144:	b2db      	uxtb	r3, r3
 8007146:	f003 0306 	and.w	r3, r3, #6
 800714a:	b2db      	uxtb	r3, r3
 800714c:	f063 030f 	orn	r3, r3, #15
 8007150:	b2da      	uxtb	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	490e      	ldr	r1, [pc, #56]	; (8007198 <I2C_MasterRequestWrite+0xfc>)
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 f943 	bl	80073ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e010      	b.n	8007190 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800716e:	897b      	ldrh	r3, [r7, #10]
 8007170:	b2da      	uxtb	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	4907      	ldr	r1, [pc, #28]	; (800719c <I2C_MasterRequestWrite+0x100>)
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 f933 	bl	80073ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	00010008 	.word	0x00010008
 800719c:	00010002 	.word	0x00010002

080071a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	607a      	str	r2, [r7, #4]
 80071aa:	603b      	str	r3, [r7, #0]
 80071ac:	460b      	mov	r3, r1
 80071ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d006      	beq.n	80071da <I2C_MasterRequestRead+0x3a>
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d003      	beq.n	80071da <I2C_MasterRequestRead+0x3a>
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071d8:	d108      	bne.n	80071ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	e00b      	b.n	8007204 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	2b11      	cmp	r3, #17
 80071f2:	d107      	bne.n	8007204 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007202:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 f893 	bl	800733c <I2C_WaitOnFlagUntilTimeout>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00d      	beq.n	8007238 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800722a:	d103      	bne.n	8007234 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007232:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e079      	b.n	800732c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007240:	d108      	bne.n	8007254 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007242:	897b      	ldrh	r3, [r7, #10]
 8007244:	b2db      	uxtb	r3, r3
 8007246:	f043 0301 	orr.w	r3, r3, #1
 800724a:	b2da      	uxtb	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	611a      	str	r2, [r3, #16]
 8007252:	e05f      	b.n	8007314 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007254:	897b      	ldrh	r3, [r7, #10]
 8007256:	11db      	asrs	r3, r3, #7
 8007258:	b2db      	uxtb	r3, r3
 800725a:	f003 0306 	and.w	r3, r3, #6
 800725e:	b2db      	uxtb	r3, r3
 8007260:	f063 030f 	orn	r3, r3, #15
 8007264:	b2da      	uxtb	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	4930      	ldr	r1, [pc, #192]	; (8007334 <I2C_MasterRequestRead+0x194>)
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 f8b9 	bl	80073ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e054      	b.n	800732c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007282:	897b      	ldrh	r3, [r7, #10]
 8007284:	b2da      	uxtb	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	4929      	ldr	r1, [pc, #164]	; (8007338 <I2C_MasterRequestRead+0x198>)
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 f8a9 	bl	80073ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e044      	b.n	800732c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072a2:	2300      	movs	r3, #0
 80072a4:	613b      	str	r3, [r7, #16]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	613b      	str	r3, [r7, #16]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	613b      	str	r3, [r7, #16]
 80072b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 f831 	bl	800733c <I2C_WaitOnFlagUntilTimeout>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00d      	beq.n	80072fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ee:	d103      	bne.n	80072f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e017      	b.n	800732c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80072fc:	897b      	ldrh	r3, [r7, #10]
 80072fe:	11db      	asrs	r3, r3, #7
 8007300:	b2db      	uxtb	r3, r3
 8007302:	f003 0306 	and.w	r3, r3, #6
 8007306:	b2db      	uxtb	r3, r3
 8007308:	f063 030e 	orn	r3, r3, #14
 800730c:	b2da      	uxtb	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	4907      	ldr	r1, [pc, #28]	; (8007338 <I2C_MasterRequestRead+0x198>)
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 f865 	bl	80073ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e000      	b.n	800732c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	00010008 	.word	0x00010008
 8007338:	00010002 	.word	0x00010002

0800733c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	4613      	mov	r3, r2
 800734a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800734c:	e025      	b.n	800739a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007354:	d021      	beq.n	800739a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007356:	f7fe ff85 	bl	8006264 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	429a      	cmp	r2, r3
 8007364:	d302      	bcc.n	800736c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d116      	bne.n	800739a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2220      	movs	r2, #32
 8007376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	f043 0220 	orr.w	r2, r3, #32
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e023      	b.n	80073e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	0c1b      	lsrs	r3, r3, #16
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d10d      	bne.n	80073c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	43da      	mvns	r2, r3
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	4013      	ands	r3, r2
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	bf0c      	ite	eq
 80073b6:	2301      	moveq	r3, #1
 80073b8:	2300      	movne	r3, #0
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	461a      	mov	r2, r3
 80073be:	e00c      	b.n	80073da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	43da      	mvns	r2, r3
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	4013      	ands	r3, r2
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	bf0c      	ite	eq
 80073d2:	2301      	moveq	r3, #1
 80073d4:	2300      	movne	r3, #0
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d0b6      	beq.n	800734e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	60b9      	str	r1, [r7, #8]
 80073f4:	607a      	str	r2, [r7, #4]
 80073f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073f8:	e051      	b.n	800749e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007408:	d123      	bne.n	8007452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007418:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007422:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2220      	movs	r2, #32
 800742e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	f043 0204 	orr.w	r2, r3, #4
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e046      	b.n	80074e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007458:	d021      	beq.n	800749e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800745a:	f7fe ff03 	bl	8006264 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	429a      	cmp	r2, r3
 8007468:	d302      	bcc.n	8007470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d116      	bne.n	800749e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2220      	movs	r2, #32
 800747a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	f043 0220 	orr.w	r2, r3, #32
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e020      	b.n	80074e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	0c1b      	lsrs	r3, r3, #16
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d10c      	bne.n	80074c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	43da      	mvns	r2, r3
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4013      	ands	r3, r2
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	bf14      	ite	ne
 80074ba:	2301      	movne	r3, #1
 80074bc:	2300      	moveq	r3, #0
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	e00b      	b.n	80074da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	43da      	mvns	r2, r3
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	4013      	ands	r3, r2
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	bf14      	ite	ne
 80074d4:	2301      	movne	r3, #1
 80074d6:	2300      	moveq	r3, #0
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d18d      	bne.n	80073fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074f4:	e02d      	b.n	8007552 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 f8ce 	bl	8007698 <I2C_IsAcknowledgeFailed>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e02d      	b.n	8007562 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750c:	d021      	beq.n	8007552 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800750e:	f7fe fea9 	bl	8006264 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	429a      	cmp	r2, r3
 800751c:	d302      	bcc.n	8007524 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d116      	bne.n	8007552 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2220      	movs	r2, #32
 800752e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	f043 0220 	orr.w	r2, r3, #32
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e007      	b.n	8007562 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755c:	2b80      	cmp	r3, #128	; 0x80
 800755e:	d1ca      	bne.n	80074f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	60f8      	str	r0, [r7, #12]
 8007572:	60b9      	str	r1, [r7, #8]
 8007574:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007576:	e02d      	b.n	80075d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 f88d 	bl	8007698 <I2C_IsAcknowledgeFailed>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e02d      	b.n	80075e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758e:	d021      	beq.n	80075d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007590:	f7fe fe68 	bl	8006264 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	429a      	cmp	r2, r3
 800759e:	d302      	bcc.n	80075a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d116      	bne.n	80075d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c0:	f043 0220 	orr.w	r2, r3, #32
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e007      	b.n	80075e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	f003 0304 	and.w	r3, r3, #4
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d1ca      	bne.n	8007578 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075f8:	e042      	b.n	8007680 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	f003 0310 	and.w	r3, r3, #16
 8007604:	2b10      	cmp	r3, #16
 8007606:	d119      	bne.n	800763c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f06f 0210 	mvn.w	r2, #16
 8007610:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2220      	movs	r2, #32
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e029      	b.n	8007690 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800763c:	f7fe fe12 	bl	8006264 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	429a      	cmp	r2, r3
 800764a:	d302      	bcc.n	8007652 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d116      	bne.n	8007680 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2220      	movs	r2, #32
 800765c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766c:	f043 0220 	orr.w	r2, r3, #32
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e007      	b.n	8007690 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768a:	2b40      	cmp	r3, #64	; 0x40
 800768c:	d1b5      	bne.n	80075fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ae:	d11b      	bne.n	80076e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d4:	f043 0204 	orr.w	r2, r3, #4
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e000      	b.n	80076ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
	...

080076f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e264      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d075      	beq.n	8007802 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007716:	4ba3      	ldr	r3, [pc, #652]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f003 030c 	and.w	r3, r3, #12
 800771e:	2b04      	cmp	r3, #4
 8007720:	d00c      	beq.n	800773c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007722:	4ba0      	ldr	r3, [pc, #640]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800772a:	2b08      	cmp	r3, #8
 800772c:	d112      	bne.n	8007754 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800772e:	4b9d      	ldr	r3, [pc, #628]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800773a:	d10b      	bne.n	8007754 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800773c:	4b99      	ldr	r3, [pc, #612]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d05b      	beq.n	8007800 <HAL_RCC_OscConfig+0x108>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d157      	bne.n	8007800 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e23f      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800775c:	d106      	bne.n	800776c <HAL_RCC_OscConfig+0x74>
 800775e:	4b91      	ldr	r3, [pc, #580]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a90      	ldr	r2, [pc, #576]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	e01d      	b.n	80077a8 <HAL_RCC_OscConfig+0xb0>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007774:	d10c      	bne.n	8007790 <HAL_RCC_OscConfig+0x98>
 8007776:	4b8b      	ldr	r3, [pc, #556]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a8a      	ldr	r2, [pc, #552]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 800777c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	4b88      	ldr	r3, [pc, #544]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a87      	ldr	r2, [pc, #540]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	e00b      	b.n	80077a8 <HAL_RCC_OscConfig+0xb0>
 8007790:	4b84      	ldr	r3, [pc, #528]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a83      	ldr	r2, [pc, #524]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	4b81      	ldr	r3, [pc, #516]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a80      	ldr	r2, [pc, #512]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 80077a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d013      	beq.n	80077d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077b0:	f7fe fd58 	bl	8006264 <HAL_GetTick>
 80077b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077b6:	e008      	b.n	80077ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077b8:	f7fe fd54 	bl	8006264 <HAL_GetTick>
 80077bc:	4602      	mov	r2, r0
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	2b64      	cmp	r3, #100	; 0x64
 80077c4:	d901      	bls.n	80077ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e204      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ca:	4b76      	ldr	r3, [pc, #472]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0f0      	beq.n	80077b8 <HAL_RCC_OscConfig+0xc0>
 80077d6:	e014      	b.n	8007802 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077d8:	f7fe fd44 	bl	8006264 <HAL_GetTick>
 80077dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077de:	e008      	b.n	80077f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077e0:	f7fe fd40 	bl	8006264 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b64      	cmp	r3, #100	; 0x64
 80077ec:	d901      	bls.n	80077f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e1f0      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077f2:	4b6c      	ldr	r3, [pc, #432]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1f0      	bne.n	80077e0 <HAL_RCC_OscConfig+0xe8>
 80077fe:	e000      	b.n	8007802 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d063      	beq.n	80078d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800780e:	4b65      	ldr	r3, [pc, #404]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f003 030c 	and.w	r3, r3, #12
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00b      	beq.n	8007832 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800781a:	4b62      	ldr	r3, [pc, #392]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007822:	2b08      	cmp	r3, #8
 8007824:	d11c      	bne.n	8007860 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007826:	4b5f      	ldr	r3, [pc, #380]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d116      	bne.n	8007860 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007832:	4b5c      	ldr	r3, [pc, #368]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d005      	beq.n	800784a <HAL_RCC_OscConfig+0x152>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d001      	beq.n	800784a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e1c4      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800784a:	4b56      	ldr	r3, [pc, #344]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	4952      	ldr	r1, [pc, #328]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 800785a:	4313      	orrs	r3, r2
 800785c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800785e:	e03a      	b.n	80078d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d020      	beq.n	80078aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007868:	4b4f      	ldr	r3, [pc, #316]	; (80079a8 <HAL_RCC_OscConfig+0x2b0>)
 800786a:	2201      	movs	r2, #1
 800786c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800786e:	f7fe fcf9 	bl	8006264 <HAL_GetTick>
 8007872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007874:	e008      	b.n	8007888 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007876:	f7fe fcf5 	bl	8006264 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	2b02      	cmp	r3, #2
 8007882:	d901      	bls.n	8007888 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e1a5      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007888:	4b46      	ldr	r3, [pc, #280]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b00      	cmp	r3, #0
 8007892:	d0f0      	beq.n	8007876 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007894:	4b43      	ldr	r3, [pc, #268]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	00db      	lsls	r3, r3, #3
 80078a2:	4940      	ldr	r1, [pc, #256]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	600b      	str	r3, [r1, #0]
 80078a8:	e015      	b.n	80078d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078aa:	4b3f      	ldr	r3, [pc, #252]	; (80079a8 <HAL_RCC_OscConfig+0x2b0>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b0:	f7fe fcd8 	bl	8006264 <HAL_GetTick>
 80078b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078b6:	e008      	b.n	80078ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078b8:	f7fe fcd4 	bl	8006264 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d901      	bls.n	80078ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e184      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078ca:	4b36      	ldr	r3, [pc, #216]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1f0      	bne.n	80078b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0308 	and.w	r3, r3, #8
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d030      	beq.n	8007944 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d016      	beq.n	8007918 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078ea:	4b30      	ldr	r3, [pc, #192]	; (80079ac <HAL_RCC_OscConfig+0x2b4>)
 80078ec:	2201      	movs	r2, #1
 80078ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f0:	f7fe fcb8 	bl	8006264 <HAL_GetTick>
 80078f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078f6:	e008      	b.n	800790a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078f8:	f7fe fcb4 	bl	8006264 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b02      	cmp	r3, #2
 8007904:	d901      	bls.n	800790a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e164      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800790a:	4b26      	ldr	r3, [pc, #152]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 800790c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0f0      	beq.n	80078f8 <HAL_RCC_OscConfig+0x200>
 8007916:	e015      	b.n	8007944 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007918:	4b24      	ldr	r3, [pc, #144]	; (80079ac <HAL_RCC_OscConfig+0x2b4>)
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800791e:	f7fe fca1 	bl	8006264 <HAL_GetTick>
 8007922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007924:	e008      	b.n	8007938 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007926:	f7fe fc9d 	bl	8006264 <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	2b02      	cmp	r3, #2
 8007932:	d901      	bls.n	8007938 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e14d      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007938:	4b1a      	ldr	r3, [pc, #104]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 800793a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1f0      	bne.n	8007926 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0304 	and.w	r3, r3, #4
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 80a0 	beq.w	8007a92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007952:	2300      	movs	r3, #0
 8007954:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007956:	4b13      	ldr	r3, [pc, #76]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10f      	bne.n	8007982 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007962:	2300      	movs	r3, #0
 8007964:	60bb      	str	r3, [r7, #8]
 8007966:	4b0f      	ldr	r3, [pc, #60]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796a:	4a0e      	ldr	r2, [pc, #56]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 800796c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007970:	6413      	str	r3, [r2, #64]	; 0x40
 8007972:	4b0c      	ldr	r3, [pc, #48]	; (80079a4 <HAL_RCC_OscConfig+0x2ac>)
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800797a:	60bb      	str	r3, [r7, #8]
 800797c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800797e:	2301      	movs	r3, #1
 8007980:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007982:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <HAL_RCC_OscConfig+0x2b8>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800798a:	2b00      	cmp	r3, #0
 800798c:	d121      	bne.n	80079d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800798e:	4b08      	ldr	r3, [pc, #32]	; (80079b0 <HAL_RCC_OscConfig+0x2b8>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a07      	ldr	r2, [pc, #28]	; (80079b0 <HAL_RCC_OscConfig+0x2b8>)
 8007994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800799a:	f7fe fc63 	bl	8006264 <HAL_GetTick>
 800799e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079a0:	e011      	b.n	80079c6 <HAL_RCC_OscConfig+0x2ce>
 80079a2:	bf00      	nop
 80079a4:	40023800 	.word	0x40023800
 80079a8:	42470000 	.word	0x42470000
 80079ac:	42470e80 	.word	0x42470e80
 80079b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079b4:	f7fe fc56 	bl	8006264 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d901      	bls.n	80079c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e106      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079c6:	4b85      	ldr	r3, [pc, #532]	; (8007bdc <HAL_RCC_OscConfig+0x4e4>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0f0      	beq.n	80079b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d106      	bne.n	80079e8 <HAL_RCC_OscConfig+0x2f0>
 80079da:	4b81      	ldr	r3, [pc, #516]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 80079dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079de:	4a80      	ldr	r2, [pc, #512]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 80079e0:	f043 0301 	orr.w	r3, r3, #1
 80079e4:	6713      	str	r3, [r2, #112]	; 0x70
 80079e6:	e01c      	b.n	8007a22 <HAL_RCC_OscConfig+0x32a>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	2b05      	cmp	r3, #5
 80079ee:	d10c      	bne.n	8007a0a <HAL_RCC_OscConfig+0x312>
 80079f0:	4b7b      	ldr	r3, [pc, #492]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 80079f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f4:	4a7a      	ldr	r2, [pc, #488]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 80079f6:	f043 0304 	orr.w	r3, r3, #4
 80079fa:	6713      	str	r3, [r2, #112]	; 0x70
 80079fc:	4b78      	ldr	r3, [pc, #480]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 80079fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a00:	4a77      	ldr	r2, [pc, #476]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 8007a02:	f043 0301 	orr.w	r3, r3, #1
 8007a06:	6713      	str	r3, [r2, #112]	; 0x70
 8007a08:	e00b      	b.n	8007a22 <HAL_RCC_OscConfig+0x32a>
 8007a0a:	4b75      	ldr	r3, [pc, #468]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 8007a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0e:	4a74      	ldr	r2, [pc, #464]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 8007a10:	f023 0301 	bic.w	r3, r3, #1
 8007a14:	6713      	str	r3, [r2, #112]	; 0x70
 8007a16:	4b72      	ldr	r3, [pc, #456]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 8007a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1a:	4a71      	ldr	r2, [pc, #452]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 8007a1c:	f023 0304 	bic.w	r3, r3, #4
 8007a20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d015      	beq.n	8007a56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a2a:	f7fe fc1b 	bl	8006264 <HAL_GetTick>
 8007a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a30:	e00a      	b.n	8007a48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a32:	f7fe fc17 	bl	8006264 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d901      	bls.n	8007a48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e0c5      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a48:	4b65      	ldr	r3, [pc, #404]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 8007a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d0ee      	beq.n	8007a32 <HAL_RCC_OscConfig+0x33a>
 8007a54:	e014      	b.n	8007a80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a56:	f7fe fc05 	bl	8006264 <HAL_GetTick>
 8007a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a5c:	e00a      	b.n	8007a74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a5e:	f7fe fc01 	bl	8006264 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d901      	bls.n	8007a74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e0af      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a74:	4b5a      	ldr	r3, [pc, #360]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 8007a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a78:	f003 0302 	and.w	r3, r3, #2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1ee      	bne.n	8007a5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d105      	bne.n	8007a92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a86:	4b56      	ldr	r3, [pc, #344]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	4a55      	ldr	r2, [pc, #340]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 8007a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 809b 	beq.w	8007bd2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a9c:	4b50      	ldr	r3, [pc, #320]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f003 030c 	and.w	r3, r3, #12
 8007aa4:	2b08      	cmp	r3, #8
 8007aa6:	d05c      	beq.n	8007b62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d141      	bne.n	8007b34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ab0:	4b4c      	ldr	r3, [pc, #304]	; (8007be4 <HAL_RCC_OscConfig+0x4ec>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab6:	f7fe fbd5 	bl	8006264 <HAL_GetTick>
 8007aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007abc:	e008      	b.n	8007ad0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007abe:	f7fe fbd1 	bl	8006264 <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d901      	bls.n	8007ad0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e081      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ad0:	4b43      	ldr	r3, [pc, #268]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1f0      	bne.n	8007abe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	69da      	ldr	r2, [r3, #28]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	019b      	lsls	r3, r3, #6
 8007aec:	431a      	orrs	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af2:	085b      	lsrs	r3, r3, #1
 8007af4:	3b01      	subs	r3, #1
 8007af6:	041b      	lsls	r3, r3, #16
 8007af8:	431a      	orrs	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	061b      	lsls	r3, r3, #24
 8007b00:	4937      	ldr	r1, [pc, #220]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b06:	4b37      	ldr	r3, [pc, #220]	; (8007be4 <HAL_RCC_OscConfig+0x4ec>)
 8007b08:	2201      	movs	r2, #1
 8007b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b0c:	f7fe fbaa 	bl	8006264 <HAL_GetTick>
 8007b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b12:	e008      	b.n	8007b26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b14:	f7fe fba6 	bl	8006264 <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e056      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b26:	4b2e      	ldr	r3, [pc, #184]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d0f0      	beq.n	8007b14 <HAL_RCC_OscConfig+0x41c>
 8007b32:	e04e      	b.n	8007bd2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b34:	4b2b      	ldr	r3, [pc, #172]	; (8007be4 <HAL_RCC_OscConfig+0x4ec>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b3a:	f7fe fb93 	bl	8006264 <HAL_GetTick>
 8007b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b40:	e008      	b.n	8007b54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b42:	f7fe fb8f 	bl	8006264 <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d901      	bls.n	8007b54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e03f      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b54:	4b22      	ldr	r3, [pc, #136]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1f0      	bne.n	8007b42 <HAL_RCC_OscConfig+0x44a>
 8007b60:	e037      	b.n	8007bd2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d101      	bne.n	8007b6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e032      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b6e:	4b1c      	ldr	r3, [pc, #112]	; (8007be0 <HAL_RCC_OscConfig+0x4e8>)
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d028      	beq.n	8007bce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d121      	bne.n	8007bce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d11a      	bne.n	8007bce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ba4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d111      	bne.n	8007bce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb4:	085b      	lsrs	r3, r3, #1
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d107      	bne.n	8007bce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d001      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e000      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3718      	adds	r7, #24
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	40007000 	.word	0x40007000
 8007be0:	40023800 	.word	0x40023800
 8007be4:	42470060 	.word	0x42470060

08007be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e0cc      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007bfc:	4b68      	ldr	r3, [pc, #416]	; (8007da0 <HAL_RCC_ClockConfig+0x1b8>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0307 	and.w	r3, r3, #7
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d90c      	bls.n	8007c24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c0a:	4b65      	ldr	r3, [pc, #404]	; (8007da0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c12:	4b63      	ldr	r3, [pc, #396]	; (8007da0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0307 	and.w	r3, r3, #7
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d001      	beq.n	8007c24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e0b8      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d020      	beq.n	8007c72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0304 	and.w	r3, r3, #4
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d005      	beq.n	8007c48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c3c:	4b59      	ldr	r3, [pc, #356]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	4a58      	ldr	r2, [pc, #352]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0308 	and.w	r3, r3, #8
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c54:	4b53      	ldr	r3, [pc, #332]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	4a52      	ldr	r2, [pc, #328]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c60:	4b50      	ldr	r3, [pc, #320]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	494d      	ldr	r1, [pc, #308]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d044      	beq.n	8007d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d107      	bne.n	8007c96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c86:	4b47      	ldr	r3, [pc, #284]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d119      	bne.n	8007cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e07f      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d003      	beq.n	8007ca6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d107      	bne.n	8007cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ca6:	4b3f      	ldr	r3, [pc, #252]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d109      	bne.n	8007cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e06f      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cb6:	4b3b      	ldr	r3, [pc, #236]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e067      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cc6:	4b37      	ldr	r3, [pc, #220]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f023 0203 	bic.w	r2, r3, #3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	4934      	ldr	r1, [pc, #208]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007cd8:	f7fe fac4 	bl	8006264 <HAL_GetTick>
 8007cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cde:	e00a      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ce0:	f7fe fac0 	bl	8006264 <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d901      	bls.n	8007cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e04f      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cf6:	4b2b      	ldr	r3, [pc, #172]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	f003 020c 	and.w	r2, r3, #12
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d1eb      	bne.n	8007ce0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d08:	4b25      	ldr	r3, [pc, #148]	; (8007da0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d20c      	bcs.n	8007d30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d16:	4b22      	ldr	r3, [pc, #136]	; (8007da0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	b2d2      	uxtb	r2, r2
 8007d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d1e:	4b20      	ldr	r3, [pc, #128]	; (8007da0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0307 	and.w	r3, r3, #7
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d001      	beq.n	8007d30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e032      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d008      	beq.n	8007d4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d3c:	4b19      	ldr	r3, [pc, #100]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	4916      	ldr	r1, [pc, #88]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0308 	and.w	r3, r3, #8
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d5a:	4b12      	ldr	r3, [pc, #72]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	490e      	ldr	r1, [pc, #56]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d6e:	f000 f821 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 8007d72:	4602      	mov	r2, r0
 8007d74:	4b0b      	ldr	r3, [pc, #44]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	091b      	lsrs	r3, r3, #4
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	490a      	ldr	r1, [pc, #40]	; (8007da8 <HAL_RCC_ClockConfig+0x1c0>)
 8007d80:	5ccb      	ldrb	r3, [r1, r3]
 8007d82:	fa22 f303 	lsr.w	r3, r2, r3
 8007d86:	4a09      	ldr	r2, [pc, #36]	; (8007dac <HAL_RCC_ClockConfig+0x1c4>)
 8007d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d8a:	4b09      	ldr	r3, [pc, #36]	; (8007db0 <HAL_RCC_ClockConfig+0x1c8>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fe fa24 	bl	80061dc <HAL_InitTick>

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	40023c00 	.word	0x40023c00
 8007da4:	40023800 	.word	0x40023800
 8007da8:	08009b50 	.word	0x08009b50
 8007dac:	20000000 	.word	0x20000000
 8007db0:	20000450 	.word	0x20000450

08007db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007db4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	607b      	str	r3, [r7, #4]
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dcc:	4b67      	ldr	r3, [pc, #412]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f003 030c 	and.w	r3, r3, #12
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d00d      	beq.n	8007df4 <HAL_RCC_GetSysClockFreq+0x40>
 8007dd8:	2b08      	cmp	r3, #8
 8007dda:	f200 80bd 	bhi.w	8007f58 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <HAL_RCC_GetSysClockFreq+0x34>
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d003      	beq.n	8007dee <HAL_RCC_GetSysClockFreq+0x3a>
 8007de6:	e0b7      	b.n	8007f58 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007de8:	4b61      	ldr	r3, [pc, #388]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007dea:	60bb      	str	r3, [r7, #8]
       break;
 8007dec:	e0b7      	b.n	8007f5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007dee:	4b61      	ldr	r3, [pc, #388]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007df0:	60bb      	str	r3, [r7, #8]
      break;
 8007df2:	e0b4      	b.n	8007f5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007df4:	4b5d      	ldr	r3, [pc, #372]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dfc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007dfe:	4b5b      	ldr	r3, [pc, #364]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d04d      	beq.n	8007ea6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e0a:	4b58      	ldr	r3, [pc, #352]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	099b      	lsrs	r3, r3, #6
 8007e10:	461a      	mov	r2, r3
 8007e12:	f04f 0300 	mov.w	r3, #0
 8007e16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e1a:	f04f 0100 	mov.w	r1, #0
 8007e1e:	ea02 0800 	and.w	r8, r2, r0
 8007e22:	ea03 0901 	and.w	r9, r3, r1
 8007e26:	4640      	mov	r0, r8
 8007e28:	4649      	mov	r1, r9
 8007e2a:	f04f 0200 	mov.w	r2, #0
 8007e2e:	f04f 0300 	mov.w	r3, #0
 8007e32:	014b      	lsls	r3, r1, #5
 8007e34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007e38:	0142      	lsls	r2, r0, #5
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	ebb0 0008 	subs.w	r0, r0, r8
 8007e42:	eb61 0109 	sbc.w	r1, r1, r9
 8007e46:	f04f 0200 	mov.w	r2, #0
 8007e4a:	f04f 0300 	mov.w	r3, #0
 8007e4e:	018b      	lsls	r3, r1, #6
 8007e50:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007e54:	0182      	lsls	r2, r0, #6
 8007e56:	1a12      	subs	r2, r2, r0
 8007e58:	eb63 0301 	sbc.w	r3, r3, r1
 8007e5c:	f04f 0000 	mov.w	r0, #0
 8007e60:	f04f 0100 	mov.w	r1, #0
 8007e64:	00d9      	lsls	r1, r3, #3
 8007e66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e6a:	00d0      	lsls	r0, r2, #3
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	eb12 0208 	adds.w	r2, r2, r8
 8007e74:	eb43 0309 	adc.w	r3, r3, r9
 8007e78:	f04f 0000 	mov.w	r0, #0
 8007e7c:	f04f 0100 	mov.w	r1, #0
 8007e80:	0259      	lsls	r1, r3, #9
 8007e82:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007e86:	0250      	lsls	r0, r2, #9
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	4619      	mov	r1, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	461a      	mov	r2, r3
 8007e94:	f04f 0300 	mov.w	r3, #0
 8007e98:	f7f8 f9fa 	bl	8000290 <__aeabi_uldivmod>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	e04a      	b.n	8007f3c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ea6:	4b31      	ldr	r3, [pc, #196]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	099b      	lsrs	r3, r3, #6
 8007eac:	461a      	mov	r2, r3
 8007eae:	f04f 0300 	mov.w	r3, #0
 8007eb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007eb6:	f04f 0100 	mov.w	r1, #0
 8007eba:	ea02 0400 	and.w	r4, r2, r0
 8007ebe:	ea03 0501 	and.w	r5, r3, r1
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	f04f 0200 	mov.w	r2, #0
 8007eca:	f04f 0300 	mov.w	r3, #0
 8007ece:	014b      	lsls	r3, r1, #5
 8007ed0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ed4:	0142      	lsls	r2, r0, #5
 8007ed6:	4610      	mov	r0, r2
 8007ed8:	4619      	mov	r1, r3
 8007eda:	1b00      	subs	r0, r0, r4
 8007edc:	eb61 0105 	sbc.w	r1, r1, r5
 8007ee0:	f04f 0200 	mov.w	r2, #0
 8007ee4:	f04f 0300 	mov.w	r3, #0
 8007ee8:	018b      	lsls	r3, r1, #6
 8007eea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007eee:	0182      	lsls	r2, r0, #6
 8007ef0:	1a12      	subs	r2, r2, r0
 8007ef2:	eb63 0301 	sbc.w	r3, r3, r1
 8007ef6:	f04f 0000 	mov.w	r0, #0
 8007efa:	f04f 0100 	mov.w	r1, #0
 8007efe:	00d9      	lsls	r1, r3, #3
 8007f00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f04:	00d0      	lsls	r0, r2, #3
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	1912      	adds	r2, r2, r4
 8007f0c:	eb45 0303 	adc.w	r3, r5, r3
 8007f10:	f04f 0000 	mov.w	r0, #0
 8007f14:	f04f 0100 	mov.w	r1, #0
 8007f18:	0299      	lsls	r1, r3, #10
 8007f1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007f1e:	0290      	lsls	r0, r2, #10
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	4610      	mov	r0, r2
 8007f26:	4619      	mov	r1, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f04f 0300 	mov.w	r3, #0
 8007f30:	f7f8 f9ae 	bl	8000290 <__aeabi_uldivmod>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	4613      	mov	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f3c:	4b0b      	ldr	r3, [pc, #44]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	0c1b      	lsrs	r3, r3, #16
 8007f42:	f003 0303 	and.w	r3, r3, #3
 8007f46:	3301      	adds	r3, #1
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f54:	60bb      	str	r3, [r7, #8]
      break;
 8007f56:	e002      	b.n	8007f5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f58:	4b05      	ldr	r3, [pc, #20]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007f5a:	60bb      	str	r3, [r7, #8]
      break;
 8007f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007f6a:	bf00      	nop
 8007f6c:	40023800 	.word	0x40023800
 8007f70:	00f42400 	.word	0x00f42400
 8007f74:	007a1200 	.word	0x007a1200

08007f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f7c:	4b03      	ldr	r3, [pc, #12]	; (8007f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	20000000 	.word	0x20000000

08007f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f94:	f7ff fff0 	bl	8007f78 <HAL_RCC_GetHCLKFreq>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	0a9b      	lsrs	r3, r3, #10
 8007fa0:	f003 0307 	and.w	r3, r3, #7
 8007fa4:	4903      	ldr	r1, [pc, #12]	; (8007fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fa6:	5ccb      	ldrb	r3, [r1, r3]
 8007fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	40023800 	.word	0x40023800
 8007fb4:	08009b60 	.word	0x08009b60

08007fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007fbc:	f7ff ffdc 	bl	8007f78 <HAL_RCC_GetHCLKFreq>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	0b5b      	lsrs	r3, r3, #13
 8007fc8:	f003 0307 	and.w	r3, r3, #7
 8007fcc:	4903      	ldr	r1, [pc, #12]	; (8007fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fce:	5ccb      	ldrb	r3, [r1, r3]
 8007fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	40023800 	.word	0x40023800
 8007fdc:	08009b60 	.word	0x08009b60

08007fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e041      	b.n	8008076 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d106      	bne.n	800800c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7f8 fd5a 	bl	8000ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2202      	movs	r2, #2
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3304      	adds	r3, #4
 800801c:	4619      	mov	r1, r3
 800801e:	4610      	mov	r0, r2
 8008020:	f000 fac0 	bl	80085a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e041      	b.n	8008114 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d106      	bne.n	80080aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f839 	bl	800811c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2202      	movs	r2, #2
 80080ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3304      	adds	r3, #4
 80080ba:	4619      	mov	r1, r3
 80080bc:	4610      	mov	r0, r2
 80080be:	f000 fa71 	bl	80085a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d109      	bne.n	8008154 <HAL_TIM_PWM_Start+0x24>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b01      	cmp	r3, #1
 800814a:	bf14      	ite	ne
 800814c:	2301      	movne	r3, #1
 800814e:	2300      	moveq	r3, #0
 8008150:	b2db      	uxtb	r3, r3
 8008152:	e022      	b.n	800819a <HAL_TIM_PWM_Start+0x6a>
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2b04      	cmp	r3, #4
 8008158:	d109      	bne.n	800816e <HAL_TIM_PWM_Start+0x3e>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b01      	cmp	r3, #1
 8008164:	bf14      	ite	ne
 8008166:	2301      	movne	r3, #1
 8008168:	2300      	moveq	r3, #0
 800816a:	b2db      	uxtb	r3, r3
 800816c:	e015      	b.n	800819a <HAL_TIM_PWM_Start+0x6a>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b08      	cmp	r3, #8
 8008172:	d109      	bne.n	8008188 <HAL_TIM_PWM_Start+0x58>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b01      	cmp	r3, #1
 800817e:	bf14      	ite	ne
 8008180:	2301      	movne	r3, #1
 8008182:	2300      	moveq	r3, #0
 8008184:	b2db      	uxtb	r3, r3
 8008186:	e008      	b.n	800819a <HAL_TIM_PWM_Start+0x6a>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b01      	cmp	r3, #1
 8008192:	bf14      	ite	ne
 8008194:	2301      	movne	r3, #1
 8008196:	2300      	moveq	r3, #0
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e068      	b.n	8008274 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d104      	bne.n	80081b2 <HAL_TIM_PWM_Start+0x82>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081b0:	e013      	b.n	80081da <HAL_TIM_PWM_Start+0xaa>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b04      	cmp	r3, #4
 80081b6:	d104      	bne.n	80081c2 <HAL_TIM_PWM_Start+0x92>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081c0:	e00b      	b.n	80081da <HAL_TIM_PWM_Start+0xaa>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	d104      	bne.n	80081d2 <HAL_TIM_PWM_Start+0xa2>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2202      	movs	r2, #2
 80081cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081d0:	e003      	b.n	80081da <HAL_TIM_PWM_Start+0xaa>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2202      	movs	r2, #2
 80081d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2201      	movs	r2, #1
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fc84 	bl	8008af0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a23      	ldr	r2, [pc, #140]	; (800827c <HAL_TIM_PWM_Start+0x14c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d107      	bne.n	8008202 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008200:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a1d      	ldr	r2, [pc, #116]	; (800827c <HAL_TIM_PWM_Start+0x14c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d018      	beq.n	800823e <HAL_TIM_PWM_Start+0x10e>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008214:	d013      	beq.n	800823e <HAL_TIM_PWM_Start+0x10e>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a19      	ldr	r2, [pc, #100]	; (8008280 <HAL_TIM_PWM_Start+0x150>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d00e      	beq.n	800823e <HAL_TIM_PWM_Start+0x10e>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a17      	ldr	r2, [pc, #92]	; (8008284 <HAL_TIM_PWM_Start+0x154>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d009      	beq.n	800823e <HAL_TIM_PWM_Start+0x10e>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a16      	ldr	r2, [pc, #88]	; (8008288 <HAL_TIM_PWM_Start+0x158>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d004      	beq.n	800823e <HAL_TIM_PWM_Start+0x10e>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a14      	ldr	r2, [pc, #80]	; (800828c <HAL_TIM_PWM_Start+0x15c>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d111      	bne.n	8008262 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f003 0307 	and.w	r3, r3, #7
 8008248:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b06      	cmp	r3, #6
 800824e:	d010      	beq.n	8008272 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0201 	orr.w	r2, r2, #1
 800825e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008260:	e007      	b.n	8008272 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f042 0201 	orr.w	r2, r2, #1
 8008270:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	40010000 	.word	0x40010000
 8008280:	40000400 	.word	0x40000400
 8008284:	40000800 	.word	0x40000800
 8008288:	40000c00 	.word	0x40000c00
 800828c:	40014000 	.word	0x40014000

08008290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d101      	bne.n	80082ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082aa:	2302      	movs	r3, #2
 80082ac:	e0ae      	b.n	800840c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b0c      	cmp	r3, #12
 80082ba:	f200 809f 	bhi.w	80083fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082f9 	.word	0x080082f9
 80082c8:	080083fd 	.word	0x080083fd
 80082cc:	080083fd 	.word	0x080083fd
 80082d0:	080083fd 	.word	0x080083fd
 80082d4:	08008339 	.word	0x08008339
 80082d8:	080083fd 	.word	0x080083fd
 80082dc:	080083fd 	.word	0x080083fd
 80082e0:	080083fd 	.word	0x080083fd
 80082e4:	0800837b 	.word	0x0800837b
 80082e8:	080083fd 	.word	0x080083fd
 80082ec:	080083fd 	.word	0x080083fd
 80082f0:	080083fd 	.word	0x080083fd
 80082f4:	080083bb 	.word	0x080083bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 f9d0 	bl	80086a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699a      	ldr	r2, [r3, #24]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0208 	orr.w	r2, r2, #8
 8008312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	699a      	ldr	r2, [r3, #24]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0204 	bic.w	r2, r2, #4
 8008322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6999      	ldr	r1, [r3, #24]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	619a      	str	r2, [r3, #24]
      break;
 8008336:	e064      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fa16 	bl	8008770 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699a      	ldr	r2, [r3, #24]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699a      	ldr	r2, [r3, #24]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6999      	ldr	r1, [r3, #24]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	021a      	lsls	r2, r3, #8
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	619a      	str	r2, [r3, #24]
      break;
 8008378:	e043      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68b9      	ldr	r1, [r7, #8]
 8008380:	4618      	mov	r0, r3
 8008382:	f000 fa61 	bl	8008848 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69da      	ldr	r2, [r3, #28]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 0208 	orr.w	r2, r2, #8
 8008394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	69da      	ldr	r2, [r3, #28]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0204 	bic.w	r2, r2, #4
 80083a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69d9      	ldr	r1, [r3, #28]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	691a      	ldr	r2, [r3, #16]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	61da      	str	r2, [r3, #28]
      break;
 80083b8:	e023      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68b9      	ldr	r1, [r7, #8]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 faab 	bl	800891c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69da      	ldr	r2, [r3, #28]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	69d9      	ldr	r1, [r3, #28]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	021a      	lsls	r2, r3, #8
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	61da      	str	r2, [r3, #28]
      break;
 80083fa:	e002      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800840a:	7dfb      	ldrb	r3, [r7, #23]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008428:	2b01      	cmp	r3, #1
 800842a:	d101      	bne.n	8008430 <HAL_TIM_ConfigClockSource+0x1c>
 800842c:	2302      	movs	r3, #2
 800842e:	e0b4      	b.n	800859a <HAL_TIM_ConfigClockSource+0x186>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800844e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008468:	d03e      	beq.n	80084e8 <HAL_TIM_ConfigClockSource+0xd4>
 800846a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800846e:	f200 8087 	bhi.w	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008476:	f000 8086 	beq.w	8008586 <HAL_TIM_ConfigClockSource+0x172>
 800847a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800847e:	d87f      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008480:	2b70      	cmp	r3, #112	; 0x70
 8008482:	d01a      	beq.n	80084ba <HAL_TIM_ConfigClockSource+0xa6>
 8008484:	2b70      	cmp	r3, #112	; 0x70
 8008486:	d87b      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008488:	2b60      	cmp	r3, #96	; 0x60
 800848a:	d050      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x11a>
 800848c:	2b60      	cmp	r3, #96	; 0x60
 800848e:	d877      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008490:	2b50      	cmp	r3, #80	; 0x50
 8008492:	d03c      	beq.n	800850e <HAL_TIM_ConfigClockSource+0xfa>
 8008494:	2b50      	cmp	r3, #80	; 0x50
 8008496:	d873      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008498:	2b40      	cmp	r3, #64	; 0x40
 800849a:	d058      	beq.n	800854e <HAL_TIM_ConfigClockSource+0x13a>
 800849c:	2b40      	cmp	r3, #64	; 0x40
 800849e:	d86f      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 80084a0:	2b30      	cmp	r3, #48	; 0x30
 80084a2:	d064      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x15a>
 80084a4:	2b30      	cmp	r3, #48	; 0x30
 80084a6:	d86b      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 80084a8:	2b20      	cmp	r3, #32
 80084aa:	d060      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x15a>
 80084ac:	2b20      	cmp	r3, #32
 80084ae:	d867      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d05c      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x15a>
 80084b4:	2b10      	cmp	r3, #16
 80084b6:	d05a      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x15a>
 80084b8:	e062      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6818      	ldr	r0, [r3, #0]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	6899      	ldr	r1, [r3, #8]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	f000 faf1 	bl	8008ab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	609a      	str	r2, [r3, #8]
      break;
 80084e6:	e04f      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6818      	ldr	r0, [r3, #0]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	6899      	ldr	r1, [r3, #8]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f000 fada 	bl	8008ab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800850a:	609a      	str	r2, [r3, #8]
      break;
 800850c:	e03c      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	6859      	ldr	r1, [r3, #4]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	461a      	mov	r2, r3
 800851c:	f000 fa4e 	bl	80089bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2150      	movs	r1, #80	; 0x50
 8008526:	4618      	mov	r0, r3
 8008528:	f000 faa7 	bl	8008a7a <TIM_ITRx_SetConfig>
      break;
 800852c:	e02c      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	6859      	ldr	r1, [r3, #4]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	461a      	mov	r2, r3
 800853c:	f000 fa6d 	bl	8008a1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2160      	movs	r1, #96	; 0x60
 8008546:	4618      	mov	r0, r3
 8008548:	f000 fa97 	bl	8008a7a <TIM_ITRx_SetConfig>
      break;
 800854c:	e01c      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	6859      	ldr	r1, [r3, #4]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	461a      	mov	r2, r3
 800855c:	f000 fa2e 	bl	80089bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2140      	movs	r1, #64	; 0x40
 8008566:	4618      	mov	r0, r3
 8008568:	f000 fa87 	bl	8008a7a <TIM_ITRx_SetConfig>
      break;
 800856c:	e00c      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4619      	mov	r1, r3
 8008578:	4610      	mov	r0, r2
 800857a:	f000 fa7e 	bl	8008a7a <TIM_ITRx_SetConfig>
      break;
 800857e:	e003      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	73fb      	strb	r3, [r7, #15]
      break;
 8008584:	e000      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008598:	7bfb      	ldrb	r3, [r7, #15]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a34      	ldr	r2, [pc, #208]	; (8008688 <TIM_Base_SetConfig+0xe4>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d00f      	beq.n	80085dc <TIM_Base_SetConfig+0x38>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c2:	d00b      	beq.n	80085dc <TIM_Base_SetConfig+0x38>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a31      	ldr	r2, [pc, #196]	; (800868c <TIM_Base_SetConfig+0xe8>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d007      	beq.n	80085dc <TIM_Base_SetConfig+0x38>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a30      	ldr	r2, [pc, #192]	; (8008690 <TIM_Base_SetConfig+0xec>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d003      	beq.n	80085dc <TIM_Base_SetConfig+0x38>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a2f      	ldr	r2, [pc, #188]	; (8008694 <TIM_Base_SetConfig+0xf0>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d108      	bne.n	80085ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a25      	ldr	r2, [pc, #148]	; (8008688 <TIM_Base_SetConfig+0xe4>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d01b      	beq.n	800862e <TIM_Base_SetConfig+0x8a>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085fc:	d017      	beq.n	800862e <TIM_Base_SetConfig+0x8a>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a22      	ldr	r2, [pc, #136]	; (800868c <TIM_Base_SetConfig+0xe8>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d013      	beq.n	800862e <TIM_Base_SetConfig+0x8a>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a21      	ldr	r2, [pc, #132]	; (8008690 <TIM_Base_SetConfig+0xec>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00f      	beq.n	800862e <TIM_Base_SetConfig+0x8a>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a20      	ldr	r2, [pc, #128]	; (8008694 <TIM_Base_SetConfig+0xf0>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d00b      	beq.n	800862e <TIM_Base_SetConfig+0x8a>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a1f      	ldr	r2, [pc, #124]	; (8008698 <TIM_Base_SetConfig+0xf4>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d007      	beq.n	800862e <TIM_Base_SetConfig+0x8a>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a1e      	ldr	r2, [pc, #120]	; (800869c <TIM_Base_SetConfig+0xf8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d003      	beq.n	800862e <TIM_Base_SetConfig+0x8a>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a1d      	ldr	r2, [pc, #116]	; (80086a0 <TIM_Base_SetConfig+0xfc>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d108      	bne.n	8008640 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	4313      	orrs	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	4313      	orrs	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	689a      	ldr	r2, [r3, #8]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a08      	ldr	r2, [pc, #32]	; (8008688 <TIM_Base_SetConfig+0xe4>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d103      	bne.n	8008674 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	691a      	ldr	r2, [r3, #16]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	615a      	str	r2, [r3, #20]
}
 800867a:	bf00      	nop
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	40010000 	.word	0x40010000
 800868c:	40000400 	.word	0x40000400
 8008690:	40000800 	.word	0x40000800
 8008694:	40000c00 	.word	0x40000c00
 8008698:	40014000 	.word	0x40014000
 800869c:	40014400 	.word	0x40014400
 80086a0:	40014800 	.word	0x40014800

080086a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	f023 0201 	bic.w	r2, r3, #1
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f023 0303 	bic.w	r3, r3, #3
 80086da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f023 0302 	bic.w	r3, r3, #2
 80086ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a1c      	ldr	r2, [pc, #112]	; (800876c <TIM_OC1_SetConfig+0xc8>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d10c      	bne.n	800871a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f023 0308 	bic.w	r3, r3, #8
 8008706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	4313      	orrs	r3, r2
 8008710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f023 0304 	bic.w	r3, r3, #4
 8008718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a13      	ldr	r2, [pc, #76]	; (800876c <TIM_OC1_SetConfig+0xc8>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d111      	bne.n	8008746 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	4313      	orrs	r3, r2
 800873a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	4313      	orrs	r3, r2
 8008744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	621a      	str	r2, [r3, #32]
}
 8008760:	bf00      	nop
 8008762:	371c      	adds	r7, #28
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	40010000 	.word	0x40010000

08008770 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	f023 0210 	bic.w	r2, r3, #16
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800879e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	021b      	lsls	r3, r3, #8
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f023 0320 	bic.w	r3, r3, #32
 80087ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	011b      	lsls	r3, r3, #4
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a1e      	ldr	r2, [pc, #120]	; (8008844 <TIM_OC2_SetConfig+0xd4>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d10d      	bne.n	80087ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	011b      	lsls	r3, r3, #4
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a15      	ldr	r2, [pc, #84]	; (8008844 <TIM_OC2_SetConfig+0xd4>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d113      	bne.n	800881c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	4313      	orrs	r3, r2
 800880e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	4313      	orrs	r3, r2
 800881a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	621a      	str	r2, [r3, #32]
}
 8008836:	bf00      	nop
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	40010000 	.word	0x40010000

08008848 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008848:	b480      	push	{r7}
 800884a:	b087      	sub	sp, #28
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f023 0303 	bic.w	r3, r3, #3
 800887e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	4313      	orrs	r3, r2
 8008888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	021b      	lsls	r3, r3, #8
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	4313      	orrs	r3, r2
 800889c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a1d      	ldr	r2, [pc, #116]	; (8008918 <TIM_OC3_SetConfig+0xd0>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d10d      	bne.n	80088c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	021b      	lsls	r3, r3, #8
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a14      	ldr	r2, [pc, #80]	; (8008918 <TIM_OC3_SetConfig+0xd0>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d113      	bne.n	80088f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	011b      	lsls	r3, r3, #4
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	011b      	lsls	r3, r3, #4
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	621a      	str	r2, [r3, #32]
}
 800890c:	bf00      	nop
 800890e:	371c      	adds	r7, #28
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	40010000 	.word	0x40010000

0800891c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800894a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	021b      	lsls	r3, r3, #8
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	4313      	orrs	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	031b      	lsls	r3, r3, #12
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	4313      	orrs	r3, r2
 8008972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a10      	ldr	r2, [pc, #64]	; (80089b8 <TIM_OC4_SetConfig+0x9c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d109      	bne.n	8008990 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008982:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	019b      	lsls	r3, r3, #6
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	4313      	orrs	r3, r2
 800898e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	621a      	str	r2, [r3, #32]
}
 80089aa:	bf00      	nop
 80089ac:	371c      	adds	r7, #28
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	40010000 	.word	0x40010000

080089bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	f023 0201 	bic.w	r2, r3, #1
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	011b      	lsls	r3, r3, #4
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f023 030a 	bic.w	r3, r3, #10
 80089f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	621a      	str	r2, [r3, #32]
}
 8008a0e:	bf00      	nop
 8008a10:	371c      	adds	r7, #28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b087      	sub	sp, #28
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	60b9      	str	r1, [r7, #8]
 8008a24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	f023 0210 	bic.w	r2, r3, #16
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6a1b      	ldr	r3, [r3, #32]
 8008a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	031b      	lsls	r3, r3, #12
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	011b      	lsls	r3, r3, #4
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	621a      	str	r2, [r3, #32]
}
 8008a6e:	bf00      	nop
 8008a70:	371c      	adds	r7, #28
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	f043 0307 	orr.w	r3, r3, #7
 8008a9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	609a      	str	r2, [r3, #8]
}
 8008aa4:	bf00      	nop
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	021a      	lsls	r2, r3, #8
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	609a      	str	r2, [r3, #8]
}
 8008ae4:	bf00      	nop
 8008ae6:	371c      	adds	r7, #28
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	f003 031f 	and.w	r3, r3, #31
 8008b02:	2201      	movs	r2, #1
 8008b04:	fa02 f303 	lsl.w	r3, r2, r3
 8008b08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6a1a      	ldr	r2, [r3, #32]
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	43db      	mvns	r3, r3
 8008b12:	401a      	ands	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6a1a      	ldr	r2, [r3, #32]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f003 031f 	and.w	r3, r3, #31
 8008b22:	6879      	ldr	r1, [r7, #4]
 8008b24:	fa01 f303 	lsl.w	r3, r1, r3
 8008b28:	431a      	orrs	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	621a      	str	r2, [r3, #32]
}
 8008b2e:	bf00      	nop
 8008b30:	371c      	adds	r7, #28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
	...

08008b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d101      	bne.n	8008b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b50:	2302      	movs	r3, #2
 8008b52:	e050      	b.n	8008bf6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a1c      	ldr	r2, [pc, #112]	; (8008c04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d018      	beq.n	8008bca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ba0:	d013      	beq.n	8008bca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a18      	ldr	r2, [pc, #96]	; (8008c08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d00e      	beq.n	8008bca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a16      	ldr	r2, [pc, #88]	; (8008c0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d009      	beq.n	8008bca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a15      	ldr	r2, [pc, #84]	; (8008c10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d004      	beq.n	8008bca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a13      	ldr	r2, [pc, #76]	; (8008c14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d10c      	bne.n	8008be4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	40010000 	.word	0x40010000
 8008c08:	40000400 	.word	0x40000400
 8008c0c:	40000800 	.word	0x40000800
 8008c10:	40000c00 	.word	0x40000c00
 8008c14:	40014000 	.word	0x40014000

08008c18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e03f      	b.n	8008caa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d106      	bne.n	8008c44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7f7 ff96 	bl	8000b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2224      	movs	r2, #36	; 0x24
 8008c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68da      	ldr	r2, [r3, #12]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f929 	bl	8008eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	691a      	ldr	r2, [r3, #16]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	695a      	ldr	r2, [r3, #20]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68da      	ldr	r2, [r3, #12]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b08a      	sub	sp, #40	; 0x28
 8008cb6:	af02      	add	r7, sp, #8
 8008cb8:	60f8      	str	r0, [r7, #12]
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	603b      	str	r3, [r7, #0]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b20      	cmp	r3, #32
 8008cd0:	d17c      	bne.n	8008dcc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <HAL_UART_Transmit+0x2c>
 8008cd8:	88fb      	ldrh	r3, [r7, #6]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e075      	b.n	8008dce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d101      	bne.n	8008cf0 <HAL_UART_Transmit+0x3e>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e06e      	b.n	8008dce <HAL_UART_Transmit+0x11c>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2221      	movs	r2, #33	; 0x21
 8008d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d06:	f7fd faad 	bl	8006264 <HAL_GetTick>
 8008d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	88fa      	ldrh	r2, [r7, #6]
 8008d10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	88fa      	ldrh	r2, [r7, #6]
 8008d16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d20:	d108      	bne.n	8008d34 <HAL_UART_Transmit+0x82>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d104      	bne.n	8008d34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	61bb      	str	r3, [r7, #24]
 8008d32:	e003      	b.n	8008d3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008d44:	e02a      	b.n	8008d9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2180      	movs	r1, #128	; 0x80
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 f840 	bl	8008dd6 <UART_WaitOnFlagUntilTimeout>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	e036      	b.n	8008dce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d10b      	bne.n	8008d7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	881b      	ldrh	r3, [r3, #0]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	3302      	adds	r3, #2
 8008d7a:	61bb      	str	r3, [r7, #24]
 8008d7c:	e007      	b.n	8008d8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	781a      	ldrb	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	3b01      	subs	r3, #1
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1cf      	bne.n	8008d46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2200      	movs	r2, #0
 8008dae:	2140      	movs	r1, #64	; 0x40
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f000 f810 	bl	8008dd6 <UART_WaitOnFlagUntilTimeout>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e006      	b.n	8008dce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	e000      	b.n	8008dce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008dcc:	2302      	movs	r3, #2
  }
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3720      	adds	r7, #32
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b090      	sub	sp, #64	; 0x40
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	60f8      	str	r0, [r7, #12]
 8008dde:	60b9      	str	r1, [r7, #8]
 8008de0:	603b      	str	r3, [r7, #0]
 8008de2:	4613      	mov	r3, r2
 8008de4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008de6:	e050      	b.n	8008e8a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dee:	d04c      	beq.n	8008e8a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d007      	beq.n	8008e06 <UART_WaitOnFlagUntilTimeout+0x30>
 8008df6:	f7fd fa35 	bl	8006264 <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d241      	bcs.n	8008e8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	330c      	adds	r3, #12
 8008e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e10:	e853 3f00 	ldrex	r3, [r3]
 8008e14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	330c      	adds	r3, #12
 8008e24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e26:	637a      	str	r2, [r7, #52]	; 0x34
 8008e28:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e2e:	e841 2300 	strex	r3, r2, [r1]
 8008e32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1e5      	bne.n	8008e06 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3314      	adds	r3, #20
 8008e40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	e853 3f00 	ldrex	r3, [r3]
 8008e48:	613b      	str	r3, [r7, #16]
   return(result);
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f023 0301 	bic.w	r3, r3, #1
 8008e50:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3314      	adds	r3, #20
 8008e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e5a:	623a      	str	r2, [r7, #32]
 8008e5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5e:	69f9      	ldr	r1, [r7, #28]
 8008e60:	6a3a      	ldr	r2, [r7, #32]
 8008e62:	e841 2300 	strex	r3, r2, [r1]
 8008e66:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1e5      	bne.n	8008e3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2220      	movs	r2, #32
 8008e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2220      	movs	r2, #32
 8008e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e00f      	b.n	8008eaa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	4013      	ands	r3, r2
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	bf0c      	ite	eq
 8008e9a:	2301      	moveq	r3, #1
 8008e9c:	2300      	movne	r3, #0
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	79fb      	ldrb	r3, [r7, #7]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d09f      	beq.n	8008de8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3740      	adds	r7, #64	; 0x40
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
	...

08008eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	b09f      	sub	sp, #124	; 0x7c
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eca:	68d9      	ldr	r1, [r3, #12]
 8008ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	ea40 0301 	orr.w	r3, r0, r1
 8008ed4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed8:	689a      	ldr	r2, [r3, #8]
 8008eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	431a      	orrs	r2, r3
 8008ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	431a      	orrs	r2, r3
 8008ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ef8:	f021 010c 	bic.w	r1, r1, #12
 8008efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f02:	430b      	orrs	r3, r1
 8008f04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	695b      	ldr	r3, [r3, #20]
 8008f0c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f12:	6999      	ldr	r1, [r3, #24]
 8008f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	ea40 0301 	orr.w	r3, r0, r1
 8008f1c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	4bc5      	ldr	r3, [pc, #788]	; (8009238 <UART_SetConfig+0x384>)
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d004      	beq.n	8008f32 <UART_SetConfig+0x7e>
 8008f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	4bc3      	ldr	r3, [pc, #780]	; (800923c <UART_SetConfig+0x388>)
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d103      	bne.n	8008f3a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f32:	f7ff f841 	bl	8007fb8 <HAL_RCC_GetPCLK2Freq>
 8008f36:	6778      	str	r0, [r7, #116]	; 0x74
 8008f38:	e002      	b.n	8008f40 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f3a:	f7ff f829 	bl	8007f90 <HAL_RCC_GetPCLK1Freq>
 8008f3e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f42:	69db      	ldr	r3, [r3, #28]
 8008f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f48:	f040 80b6 	bne.w	80090b8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f4e:	461c      	mov	r4, r3
 8008f50:	f04f 0500 	mov.w	r5, #0
 8008f54:	4622      	mov	r2, r4
 8008f56:	462b      	mov	r3, r5
 8008f58:	1891      	adds	r1, r2, r2
 8008f5a:	6439      	str	r1, [r7, #64]	; 0x40
 8008f5c:	415b      	adcs	r3, r3
 8008f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8008f60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f64:	1912      	adds	r2, r2, r4
 8008f66:	eb45 0303 	adc.w	r3, r5, r3
 8008f6a:	f04f 0000 	mov.w	r0, #0
 8008f6e:	f04f 0100 	mov.w	r1, #0
 8008f72:	00d9      	lsls	r1, r3, #3
 8008f74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f78:	00d0      	lsls	r0, r2, #3
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	1911      	adds	r1, r2, r4
 8008f80:	6639      	str	r1, [r7, #96]	; 0x60
 8008f82:	416b      	adcs	r3, r5
 8008f84:	667b      	str	r3, [r7, #100]	; 0x64
 8008f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	f04f 0300 	mov.w	r3, #0
 8008f90:	1891      	adds	r1, r2, r2
 8008f92:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f94:	415b      	adcs	r3, r3
 8008f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f9c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008fa0:	f7f7 f976 	bl	8000290 <__aeabi_uldivmod>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4ba5      	ldr	r3, [pc, #660]	; (8009240 <UART_SetConfig+0x38c>)
 8008faa:	fba3 2302 	umull	r2, r3, r3, r2
 8008fae:	095b      	lsrs	r3, r3, #5
 8008fb0:	011e      	lsls	r6, r3, #4
 8008fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fb4:	461c      	mov	r4, r3
 8008fb6:	f04f 0500 	mov.w	r5, #0
 8008fba:	4622      	mov	r2, r4
 8008fbc:	462b      	mov	r3, r5
 8008fbe:	1891      	adds	r1, r2, r2
 8008fc0:	6339      	str	r1, [r7, #48]	; 0x30
 8008fc2:	415b      	adcs	r3, r3
 8008fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8008fc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008fca:	1912      	adds	r2, r2, r4
 8008fcc:	eb45 0303 	adc.w	r3, r5, r3
 8008fd0:	f04f 0000 	mov.w	r0, #0
 8008fd4:	f04f 0100 	mov.w	r1, #0
 8008fd8:	00d9      	lsls	r1, r3, #3
 8008fda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008fde:	00d0      	lsls	r0, r2, #3
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	1911      	adds	r1, r2, r4
 8008fe6:	65b9      	str	r1, [r7, #88]	; 0x58
 8008fe8:	416b      	adcs	r3, r5
 8008fea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	f04f 0300 	mov.w	r3, #0
 8008ff6:	1891      	adds	r1, r2, r2
 8008ff8:	62b9      	str	r1, [r7, #40]	; 0x28
 8008ffa:	415b      	adcs	r3, r3
 8008ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ffe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009002:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009006:	f7f7 f943 	bl	8000290 <__aeabi_uldivmod>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	4b8c      	ldr	r3, [pc, #560]	; (8009240 <UART_SetConfig+0x38c>)
 8009010:	fba3 1302 	umull	r1, r3, r3, r2
 8009014:	095b      	lsrs	r3, r3, #5
 8009016:	2164      	movs	r1, #100	; 0x64
 8009018:	fb01 f303 	mul.w	r3, r1, r3
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	00db      	lsls	r3, r3, #3
 8009020:	3332      	adds	r3, #50	; 0x32
 8009022:	4a87      	ldr	r2, [pc, #540]	; (8009240 <UART_SetConfig+0x38c>)
 8009024:	fba2 2303 	umull	r2, r3, r2, r3
 8009028:	095b      	lsrs	r3, r3, #5
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009030:	441e      	add	r6, r3
 8009032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009034:	4618      	mov	r0, r3
 8009036:	f04f 0100 	mov.w	r1, #0
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	1894      	adds	r4, r2, r2
 8009040:	623c      	str	r4, [r7, #32]
 8009042:	415b      	adcs	r3, r3
 8009044:	627b      	str	r3, [r7, #36]	; 0x24
 8009046:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800904a:	1812      	adds	r2, r2, r0
 800904c:	eb41 0303 	adc.w	r3, r1, r3
 8009050:	f04f 0400 	mov.w	r4, #0
 8009054:	f04f 0500 	mov.w	r5, #0
 8009058:	00dd      	lsls	r5, r3, #3
 800905a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800905e:	00d4      	lsls	r4, r2, #3
 8009060:	4622      	mov	r2, r4
 8009062:	462b      	mov	r3, r5
 8009064:	1814      	adds	r4, r2, r0
 8009066:	653c      	str	r4, [r7, #80]	; 0x50
 8009068:	414b      	adcs	r3, r1
 800906a:	657b      	str	r3, [r7, #84]	; 0x54
 800906c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	461a      	mov	r2, r3
 8009072:	f04f 0300 	mov.w	r3, #0
 8009076:	1891      	adds	r1, r2, r2
 8009078:	61b9      	str	r1, [r7, #24]
 800907a:	415b      	adcs	r3, r3
 800907c:	61fb      	str	r3, [r7, #28]
 800907e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009082:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009086:	f7f7 f903 	bl	8000290 <__aeabi_uldivmod>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	4b6c      	ldr	r3, [pc, #432]	; (8009240 <UART_SetConfig+0x38c>)
 8009090:	fba3 1302 	umull	r1, r3, r3, r2
 8009094:	095b      	lsrs	r3, r3, #5
 8009096:	2164      	movs	r1, #100	; 0x64
 8009098:	fb01 f303 	mul.w	r3, r1, r3
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	00db      	lsls	r3, r3, #3
 80090a0:	3332      	adds	r3, #50	; 0x32
 80090a2:	4a67      	ldr	r2, [pc, #412]	; (8009240 <UART_SetConfig+0x38c>)
 80090a4:	fba2 2303 	umull	r2, r3, r2, r3
 80090a8:	095b      	lsrs	r3, r3, #5
 80090aa:	f003 0207 	and.w	r2, r3, #7
 80090ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4432      	add	r2, r6
 80090b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090b6:	e0b9      	b.n	800922c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090ba:	461c      	mov	r4, r3
 80090bc:	f04f 0500 	mov.w	r5, #0
 80090c0:	4622      	mov	r2, r4
 80090c2:	462b      	mov	r3, r5
 80090c4:	1891      	adds	r1, r2, r2
 80090c6:	6139      	str	r1, [r7, #16]
 80090c8:	415b      	adcs	r3, r3
 80090ca:	617b      	str	r3, [r7, #20]
 80090cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80090d0:	1912      	adds	r2, r2, r4
 80090d2:	eb45 0303 	adc.w	r3, r5, r3
 80090d6:	f04f 0000 	mov.w	r0, #0
 80090da:	f04f 0100 	mov.w	r1, #0
 80090de:	00d9      	lsls	r1, r3, #3
 80090e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090e4:	00d0      	lsls	r0, r2, #3
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	eb12 0804 	adds.w	r8, r2, r4
 80090ee:	eb43 0905 	adc.w	r9, r3, r5
 80090f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f04f 0100 	mov.w	r1, #0
 80090fc:	f04f 0200 	mov.w	r2, #0
 8009100:	f04f 0300 	mov.w	r3, #0
 8009104:	008b      	lsls	r3, r1, #2
 8009106:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800910a:	0082      	lsls	r2, r0, #2
 800910c:	4640      	mov	r0, r8
 800910e:	4649      	mov	r1, r9
 8009110:	f7f7 f8be 	bl	8000290 <__aeabi_uldivmod>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4b49      	ldr	r3, [pc, #292]	; (8009240 <UART_SetConfig+0x38c>)
 800911a:	fba3 2302 	umull	r2, r3, r3, r2
 800911e:	095b      	lsrs	r3, r3, #5
 8009120:	011e      	lsls	r6, r3, #4
 8009122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009124:	4618      	mov	r0, r3
 8009126:	f04f 0100 	mov.w	r1, #0
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	1894      	adds	r4, r2, r2
 8009130:	60bc      	str	r4, [r7, #8]
 8009132:	415b      	adcs	r3, r3
 8009134:	60fb      	str	r3, [r7, #12]
 8009136:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800913a:	1812      	adds	r2, r2, r0
 800913c:	eb41 0303 	adc.w	r3, r1, r3
 8009140:	f04f 0400 	mov.w	r4, #0
 8009144:	f04f 0500 	mov.w	r5, #0
 8009148:	00dd      	lsls	r5, r3, #3
 800914a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800914e:	00d4      	lsls	r4, r2, #3
 8009150:	4622      	mov	r2, r4
 8009152:	462b      	mov	r3, r5
 8009154:	1814      	adds	r4, r2, r0
 8009156:	64bc      	str	r4, [r7, #72]	; 0x48
 8009158:	414b      	adcs	r3, r1
 800915a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800915c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	4618      	mov	r0, r3
 8009162:	f04f 0100 	mov.w	r1, #0
 8009166:	f04f 0200 	mov.w	r2, #0
 800916a:	f04f 0300 	mov.w	r3, #0
 800916e:	008b      	lsls	r3, r1, #2
 8009170:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009174:	0082      	lsls	r2, r0, #2
 8009176:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800917a:	f7f7 f889 	bl	8000290 <__aeabi_uldivmod>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	4b2f      	ldr	r3, [pc, #188]	; (8009240 <UART_SetConfig+0x38c>)
 8009184:	fba3 1302 	umull	r1, r3, r3, r2
 8009188:	095b      	lsrs	r3, r3, #5
 800918a:	2164      	movs	r1, #100	; 0x64
 800918c:	fb01 f303 	mul.w	r3, r1, r3
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	011b      	lsls	r3, r3, #4
 8009194:	3332      	adds	r3, #50	; 0x32
 8009196:	4a2a      	ldr	r2, [pc, #168]	; (8009240 <UART_SetConfig+0x38c>)
 8009198:	fba2 2303 	umull	r2, r3, r2, r3
 800919c:	095b      	lsrs	r3, r3, #5
 800919e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091a2:	441e      	add	r6, r3
 80091a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091a6:	4618      	mov	r0, r3
 80091a8:	f04f 0100 	mov.w	r1, #0
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	1894      	adds	r4, r2, r2
 80091b2:	603c      	str	r4, [r7, #0]
 80091b4:	415b      	adcs	r3, r3
 80091b6:	607b      	str	r3, [r7, #4]
 80091b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091bc:	1812      	adds	r2, r2, r0
 80091be:	eb41 0303 	adc.w	r3, r1, r3
 80091c2:	f04f 0400 	mov.w	r4, #0
 80091c6:	f04f 0500 	mov.w	r5, #0
 80091ca:	00dd      	lsls	r5, r3, #3
 80091cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80091d0:	00d4      	lsls	r4, r2, #3
 80091d2:	4622      	mov	r2, r4
 80091d4:	462b      	mov	r3, r5
 80091d6:	eb12 0a00 	adds.w	sl, r2, r0
 80091da:	eb43 0b01 	adc.w	fp, r3, r1
 80091de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f04f 0100 	mov.w	r1, #0
 80091e8:	f04f 0200 	mov.w	r2, #0
 80091ec:	f04f 0300 	mov.w	r3, #0
 80091f0:	008b      	lsls	r3, r1, #2
 80091f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80091f6:	0082      	lsls	r2, r0, #2
 80091f8:	4650      	mov	r0, sl
 80091fa:	4659      	mov	r1, fp
 80091fc:	f7f7 f848 	bl	8000290 <__aeabi_uldivmod>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	4b0e      	ldr	r3, [pc, #56]	; (8009240 <UART_SetConfig+0x38c>)
 8009206:	fba3 1302 	umull	r1, r3, r3, r2
 800920a:	095b      	lsrs	r3, r3, #5
 800920c:	2164      	movs	r1, #100	; 0x64
 800920e:	fb01 f303 	mul.w	r3, r1, r3
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	011b      	lsls	r3, r3, #4
 8009216:	3332      	adds	r3, #50	; 0x32
 8009218:	4a09      	ldr	r2, [pc, #36]	; (8009240 <UART_SetConfig+0x38c>)
 800921a:	fba2 2303 	umull	r2, r3, r2, r3
 800921e:	095b      	lsrs	r3, r3, #5
 8009220:	f003 020f 	and.w	r2, r3, #15
 8009224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4432      	add	r2, r6
 800922a:	609a      	str	r2, [r3, #8]
}
 800922c:	bf00      	nop
 800922e:	377c      	adds	r7, #124	; 0x7c
 8009230:	46bd      	mov	sp, r7
 8009232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009236:	bf00      	nop
 8009238:	40011000 	.word	0x40011000
 800923c:	40011400 	.word	0x40011400
 8009240:	51eb851f 	.word	0x51eb851f

08009244 <__errno>:
 8009244:	4b01      	ldr	r3, [pc, #4]	; (800924c <__errno+0x8>)
 8009246:	6818      	ldr	r0, [r3, #0]
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	20000458 	.word	0x20000458

08009250 <__libc_init_array>:
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	4d0d      	ldr	r5, [pc, #52]	; (8009288 <__libc_init_array+0x38>)
 8009254:	4c0d      	ldr	r4, [pc, #52]	; (800928c <__libc_init_array+0x3c>)
 8009256:	1b64      	subs	r4, r4, r5
 8009258:	10a4      	asrs	r4, r4, #2
 800925a:	2600      	movs	r6, #0
 800925c:	42a6      	cmp	r6, r4
 800925e:	d109      	bne.n	8009274 <__libc_init_array+0x24>
 8009260:	4d0b      	ldr	r5, [pc, #44]	; (8009290 <__libc_init_array+0x40>)
 8009262:	4c0c      	ldr	r4, [pc, #48]	; (8009294 <__libc_init_array+0x44>)
 8009264:	f000 fc56 	bl	8009b14 <_init>
 8009268:	1b64      	subs	r4, r4, r5
 800926a:	10a4      	asrs	r4, r4, #2
 800926c:	2600      	movs	r6, #0
 800926e:	42a6      	cmp	r6, r4
 8009270:	d105      	bne.n	800927e <__libc_init_array+0x2e>
 8009272:	bd70      	pop	{r4, r5, r6, pc}
 8009274:	f855 3b04 	ldr.w	r3, [r5], #4
 8009278:	4798      	blx	r3
 800927a:	3601      	adds	r6, #1
 800927c:	e7ee      	b.n	800925c <__libc_init_array+0xc>
 800927e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009282:	4798      	blx	r3
 8009284:	3601      	adds	r6, #1
 8009286:	e7f2      	b.n	800926e <__libc_init_array+0x1e>
 8009288:	08009ba4 	.word	0x08009ba4
 800928c:	08009ba4 	.word	0x08009ba4
 8009290:	08009ba4 	.word	0x08009ba4
 8009294:	08009ba8 	.word	0x08009ba8

08009298 <memcpy>:
 8009298:	440a      	add	r2, r1
 800929a:	4291      	cmp	r1, r2
 800929c:	f100 33ff 	add.w	r3, r0, #4294967295
 80092a0:	d100      	bne.n	80092a4 <memcpy+0xc>
 80092a2:	4770      	bx	lr
 80092a4:	b510      	push	{r4, lr}
 80092a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092ae:	4291      	cmp	r1, r2
 80092b0:	d1f9      	bne.n	80092a6 <memcpy+0xe>
 80092b2:	bd10      	pop	{r4, pc}

080092b4 <memset>:
 80092b4:	4402      	add	r2, r0
 80092b6:	4603      	mov	r3, r0
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d100      	bne.n	80092be <memset+0xa>
 80092bc:	4770      	bx	lr
 80092be:	f803 1b01 	strb.w	r1, [r3], #1
 80092c2:	e7f9      	b.n	80092b8 <memset+0x4>

080092c4 <siprintf>:
 80092c4:	b40e      	push	{r1, r2, r3}
 80092c6:	b500      	push	{lr}
 80092c8:	b09c      	sub	sp, #112	; 0x70
 80092ca:	ab1d      	add	r3, sp, #116	; 0x74
 80092cc:	9002      	str	r0, [sp, #8]
 80092ce:	9006      	str	r0, [sp, #24]
 80092d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092d4:	4809      	ldr	r0, [pc, #36]	; (80092fc <siprintf+0x38>)
 80092d6:	9107      	str	r1, [sp, #28]
 80092d8:	9104      	str	r1, [sp, #16]
 80092da:	4909      	ldr	r1, [pc, #36]	; (8009300 <siprintf+0x3c>)
 80092dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e0:	9105      	str	r1, [sp, #20]
 80092e2:	6800      	ldr	r0, [r0, #0]
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	a902      	add	r1, sp, #8
 80092e8:	f000 f870 	bl	80093cc <_svfiprintf_r>
 80092ec:	9b02      	ldr	r3, [sp, #8]
 80092ee:	2200      	movs	r2, #0
 80092f0:	701a      	strb	r2, [r3, #0]
 80092f2:	b01c      	add	sp, #112	; 0x70
 80092f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092f8:	b003      	add	sp, #12
 80092fa:	4770      	bx	lr
 80092fc:	20000458 	.word	0x20000458
 8009300:	ffff0208 	.word	0xffff0208

08009304 <strcpy>:
 8009304:	4603      	mov	r3, r0
 8009306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800930a:	f803 2b01 	strb.w	r2, [r3], #1
 800930e:	2a00      	cmp	r2, #0
 8009310:	d1f9      	bne.n	8009306 <strcpy+0x2>
 8009312:	4770      	bx	lr

08009314 <__ssputs_r>:
 8009314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009318:	688e      	ldr	r6, [r1, #8]
 800931a:	429e      	cmp	r6, r3
 800931c:	4682      	mov	sl, r0
 800931e:	460c      	mov	r4, r1
 8009320:	4690      	mov	r8, r2
 8009322:	461f      	mov	r7, r3
 8009324:	d838      	bhi.n	8009398 <__ssputs_r+0x84>
 8009326:	898a      	ldrh	r2, [r1, #12]
 8009328:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800932c:	d032      	beq.n	8009394 <__ssputs_r+0x80>
 800932e:	6825      	ldr	r5, [r4, #0]
 8009330:	6909      	ldr	r1, [r1, #16]
 8009332:	eba5 0901 	sub.w	r9, r5, r1
 8009336:	6965      	ldr	r5, [r4, #20]
 8009338:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800933c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009340:	3301      	adds	r3, #1
 8009342:	444b      	add	r3, r9
 8009344:	106d      	asrs	r5, r5, #1
 8009346:	429d      	cmp	r5, r3
 8009348:	bf38      	it	cc
 800934a:	461d      	movcc	r5, r3
 800934c:	0553      	lsls	r3, r2, #21
 800934e:	d531      	bpl.n	80093b4 <__ssputs_r+0xa0>
 8009350:	4629      	mov	r1, r5
 8009352:	f000 fb39 	bl	80099c8 <_malloc_r>
 8009356:	4606      	mov	r6, r0
 8009358:	b950      	cbnz	r0, 8009370 <__ssputs_r+0x5c>
 800935a:	230c      	movs	r3, #12
 800935c:	f8ca 3000 	str.w	r3, [sl]
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009366:	81a3      	strh	r3, [r4, #12]
 8009368:	f04f 30ff 	mov.w	r0, #4294967295
 800936c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009370:	6921      	ldr	r1, [r4, #16]
 8009372:	464a      	mov	r2, r9
 8009374:	f7ff ff90 	bl	8009298 <memcpy>
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800937e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009382:	81a3      	strh	r3, [r4, #12]
 8009384:	6126      	str	r6, [r4, #16]
 8009386:	6165      	str	r5, [r4, #20]
 8009388:	444e      	add	r6, r9
 800938a:	eba5 0509 	sub.w	r5, r5, r9
 800938e:	6026      	str	r6, [r4, #0]
 8009390:	60a5      	str	r5, [r4, #8]
 8009392:	463e      	mov	r6, r7
 8009394:	42be      	cmp	r6, r7
 8009396:	d900      	bls.n	800939a <__ssputs_r+0x86>
 8009398:	463e      	mov	r6, r7
 800939a:	4632      	mov	r2, r6
 800939c:	6820      	ldr	r0, [r4, #0]
 800939e:	4641      	mov	r1, r8
 80093a0:	f000 faa8 	bl	80098f4 <memmove>
 80093a4:	68a3      	ldr	r3, [r4, #8]
 80093a6:	6822      	ldr	r2, [r4, #0]
 80093a8:	1b9b      	subs	r3, r3, r6
 80093aa:	4432      	add	r2, r6
 80093ac:	60a3      	str	r3, [r4, #8]
 80093ae:	6022      	str	r2, [r4, #0]
 80093b0:	2000      	movs	r0, #0
 80093b2:	e7db      	b.n	800936c <__ssputs_r+0x58>
 80093b4:	462a      	mov	r2, r5
 80093b6:	f000 fb61 	bl	8009a7c <_realloc_r>
 80093ba:	4606      	mov	r6, r0
 80093bc:	2800      	cmp	r0, #0
 80093be:	d1e1      	bne.n	8009384 <__ssputs_r+0x70>
 80093c0:	6921      	ldr	r1, [r4, #16]
 80093c2:	4650      	mov	r0, sl
 80093c4:	f000 fab0 	bl	8009928 <_free_r>
 80093c8:	e7c7      	b.n	800935a <__ssputs_r+0x46>
	...

080093cc <_svfiprintf_r>:
 80093cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d0:	4698      	mov	r8, r3
 80093d2:	898b      	ldrh	r3, [r1, #12]
 80093d4:	061b      	lsls	r3, r3, #24
 80093d6:	b09d      	sub	sp, #116	; 0x74
 80093d8:	4607      	mov	r7, r0
 80093da:	460d      	mov	r5, r1
 80093dc:	4614      	mov	r4, r2
 80093de:	d50e      	bpl.n	80093fe <_svfiprintf_r+0x32>
 80093e0:	690b      	ldr	r3, [r1, #16]
 80093e2:	b963      	cbnz	r3, 80093fe <_svfiprintf_r+0x32>
 80093e4:	2140      	movs	r1, #64	; 0x40
 80093e6:	f000 faef 	bl	80099c8 <_malloc_r>
 80093ea:	6028      	str	r0, [r5, #0]
 80093ec:	6128      	str	r0, [r5, #16]
 80093ee:	b920      	cbnz	r0, 80093fa <_svfiprintf_r+0x2e>
 80093f0:	230c      	movs	r3, #12
 80093f2:	603b      	str	r3, [r7, #0]
 80093f4:	f04f 30ff 	mov.w	r0, #4294967295
 80093f8:	e0d1      	b.n	800959e <_svfiprintf_r+0x1d2>
 80093fa:	2340      	movs	r3, #64	; 0x40
 80093fc:	616b      	str	r3, [r5, #20]
 80093fe:	2300      	movs	r3, #0
 8009400:	9309      	str	r3, [sp, #36]	; 0x24
 8009402:	2320      	movs	r3, #32
 8009404:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009408:	f8cd 800c 	str.w	r8, [sp, #12]
 800940c:	2330      	movs	r3, #48	; 0x30
 800940e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80095b8 <_svfiprintf_r+0x1ec>
 8009412:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009416:	f04f 0901 	mov.w	r9, #1
 800941a:	4623      	mov	r3, r4
 800941c:	469a      	mov	sl, r3
 800941e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009422:	b10a      	cbz	r2, 8009428 <_svfiprintf_r+0x5c>
 8009424:	2a25      	cmp	r2, #37	; 0x25
 8009426:	d1f9      	bne.n	800941c <_svfiprintf_r+0x50>
 8009428:	ebba 0b04 	subs.w	fp, sl, r4
 800942c:	d00b      	beq.n	8009446 <_svfiprintf_r+0x7a>
 800942e:	465b      	mov	r3, fp
 8009430:	4622      	mov	r2, r4
 8009432:	4629      	mov	r1, r5
 8009434:	4638      	mov	r0, r7
 8009436:	f7ff ff6d 	bl	8009314 <__ssputs_r>
 800943a:	3001      	adds	r0, #1
 800943c:	f000 80aa 	beq.w	8009594 <_svfiprintf_r+0x1c8>
 8009440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009442:	445a      	add	r2, fp
 8009444:	9209      	str	r2, [sp, #36]	; 0x24
 8009446:	f89a 3000 	ldrb.w	r3, [sl]
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 80a2 	beq.w	8009594 <_svfiprintf_r+0x1c8>
 8009450:	2300      	movs	r3, #0
 8009452:	f04f 32ff 	mov.w	r2, #4294967295
 8009456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800945a:	f10a 0a01 	add.w	sl, sl, #1
 800945e:	9304      	str	r3, [sp, #16]
 8009460:	9307      	str	r3, [sp, #28]
 8009462:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009466:	931a      	str	r3, [sp, #104]	; 0x68
 8009468:	4654      	mov	r4, sl
 800946a:	2205      	movs	r2, #5
 800946c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009470:	4851      	ldr	r0, [pc, #324]	; (80095b8 <_svfiprintf_r+0x1ec>)
 8009472:	f7f6 febd 	bl	80001f0 <memchr>
 8009476:	9a04      	ldr	r2, [sp, #16]
 8009478:	b9d8      	cbnz	r0, 80094b2 <_svfiprintf_r+0xe6>
 800947a:	06d0      	lsls	r0, r2, #27
 800947c:	bf44      	itt	mi
 800947e:	2320      	movmi	r3, #32
 8009480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009484:	0711      	lsls	r1, r2, #28
 8009486:	bf44      	itt	mi
 8009488:	232b      	movmi	r3, #43	; 0x2b
 800948a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800948e:	f89a 3000 	ldrb.w	r3, [sl]
 8009492:	2b2a      	cmp	r3, #42	; 0x2a
 8009494:	d015      	beq.n	80094c2 <_svfiprintf_r+0xf6>
 8009496:	9a07      	ldr	r2, [sp, #28]
 8009498:	4654      	mov	r4, sl
 800949a:	2000      	movs	r0, #0
 800949c:	f04f 0c0a 	mov.w	ip, #10
 80094a0:	4621      	mov	r1, r4
 80094a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094a6:	3b30      	subs	r3, #48	; 0x30
 80094a8:	2b09      	cmp	r3, #9
 80094aa:	d94e      	bls.n	800954a <_svfiprintf_r+0x17e>
 80094ac:	b1b0      	cbz	r0, 80094dc <_svfiprintf_r+0x110>
 80094ae:	9207      	str	r2, [sp, #28]
 80094b0:	e014      	b.n	80094dc <_svfiprintf_r+0x110>
 80094b2:	eba0 0308 	sub.w	r3, r0, r8
 80094b6:	fa09 f303 	lsl.w	r3, r9, r3
 80094ba:	4313      	orrs	r3, r2
 80094bc:	9304      	str	r3, [sp, #16]
 80094be:	46a2      	mov	sl, r4
 80094c0:	e7d2      	b.n	8009468 <_svfiprintf_r+0x9c>
 80094c2:	9b03      	ldr	r3, [sp, #12]
 80094c4:	1d19      	adds	r1, r3, #4
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	9103      	str	r1, [sp, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	bfbb      	ittet	lt
 80094ce:	425b      	neglt	r3, r3
 80094d0:	f042 0202 	orrlt.w	r2, r2, #2
 80094d4:	9307      	strge	r3, [sp, #28]
 80094d6:	9307      	strlt	r3, [sp, #28]
 80094d8:	bfb8      	it	lt
 80094da:	9204      	strlt	r2, [sp, #16]
 80094dc:	7823      	ldrb	r3, [r4, #0]
 80094de:	2b2e      	cmp	r3, #46	; 0x2e
 80094e0:	d10c      	bne.n	80094fc <_svfiprintf_r+0x130>
 80094e2:	7863      	ldrb	r3, [r4, #1]
 80094e4:	2b2a      	cmp	r3, #42	; 0x2a
 80094e6:	d135      	bne.n	8009554 <_svfiprintf_r+0x188>
 80094e8:	9b03      	ldr	r3, [sp, #12]
 80094ea:	1d1a      	adds	r2, r3, #4
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	9203      	str	r2, [sp, #12]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	bfb8      	it	lt
 80094f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80094f8:	3402      	adds	r4, #2
 80094fa:	9305      	str	r3, [sp, #20]
 80094fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80095c8 <_svfiprintf_r+0x1fc>
 8009500:	7821      	ldrb	r1, [r4, #0]
 8009502:	2203      	movs	r2, #3
 8009504:	4650      	mov	r0, sl
 8009506:	f7f6 fe73 	bl	80001f0 <memchr>
 800950a:	b140      	cbz	r0, 800951e <_svfiprintf_r+0x152>
 800950c:	2340      	movs	r3, #64	; 0x40
 800950e:	eba0 000a 	sub.w	r0, r0, sl
 8009512:	fa03 f000 	lsl.w	r0, r3, r0
 8009516:	9b04      	ldr	r3, [sp, #16]
 8009518:	4303      	orrs	r3, r0
 800951a:	3401      	adds	r4, #1
 800951c:	9304      	str	r3, [sp, #16]
 800951e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009522:	4826      	ldr	r0, [pc, #152]	; (80095bc <_svfiprintf_r+0x1f0>)
 8009524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009528:	2206      	movs	r2, #6
 800952a:	f7f6 fe61 	bl	80001f0 <memchr>
 800952e:	2800      	cmp	r0, #0
 8009530:	d038      	beq.n	80095a4 <_svfiprintf_r+0x1d8>
 8009532:	4b23      	ldr	r3, [pc, #140]	; (80095c0 <_svfiprintf_r+0x1f4>)
 8009534:	bb1b      	cbnz	r3, 800957e <_svfiprintf_r+0x1b2>
 8009536:	9b03      	ldr	r3, [sp, #12]
 8009538:	3307      	adds	r3, #7
 800953a:	f023 0307 	bic.w	r3, r3, #7
 800953e:	3308      	adds	r3, #8
 8009540:	9303      	str	r3, [sp, #12]
 8009542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009544:	4433      	add	r3, r6
 8009546:	9309      	str	r3, [sp, #36]	; 0x24
 8009548:	e767      	b.n	800941a <_svfiprintf_r+0x4e>
 800954a:	fb0c 3202 	mla	r2, ip, r2, r3
 800954e:	460c      	mov	r4, r1
 8009550:	2001      	movs	r0, #1
 8009552:	e7a5      	b.n	80094a0 <_svfiprintf_r+0xd4>
 8009554:	2300      	movs	r3, #0
 8009556:	3401      	adds	r4, #1
 8009558:	9305      	str	r3, [sp, #20]
 800955a:	4619      	mov	r1, r3
 800955c:	f04f 0c0a 	mov.w	ip, #10
 8009560:	4620      	mov	r0, r4
 8009562:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009566:	3a30      	subs	r2, #48	; 0x30
 8009568:	2a09      	cmp	r2, #9
 800956a:	d903      	bls.n	8009574 <_svfiprintf_r+0x1a8>
 800956c:	2b00      	cmp	r3, #0
 800956e:	d0c5      	beq.n	80094fc <_svfiprintf_r+0x130>
 8009570:	9105      	str	r1, [sp, #20]
 8009572:	e7c3      	b.n	80094fc <_svfiprintf_r+0x130>
 8009574:	fb0c 2101 	mla	r1, ip, r1, r2
 8009578:	4604      	mov	r4, r0
 800957a:	2301      	movs	r3, #1
 800957c:	e7f0      	b.n	8009560 <_svfiprintf_r+0x194>
 800957e:	ab03      	add	r3, sp, #12
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	462a      	mov	r2, r5
 8009584:	4b0f      	ldr	r3, [pc, #60]	; (80095c4 <_svfiprintf_r+0x1f8>)
 8009586:	a904      	add	r1, sp, #16
 8009588:	4638      	mov	r0, r7
 800958a:	f3af 8000 	nop.w
 800958e:	1c42      	adds	r2, r0, #1
 8009590:	4606      	mov	r6, r0
 8009592:	d1d6      	bne.n	8009542 <_svfiprintf_r+0x176>
 8009594:	89ab      	ldrh	r3, [r5, #12]
 8009596:	065b      	lsls	r3, r3, #25
 8009598:	f53f af2c 	bmi.w	80093f4 <_svfiprintf_r+0x28>
 800959c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800959e:	b01d      	add	sp, #116	; 0x74
 80095a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a4:	ab03      	add	r3, sp, #12
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	462a      	mov	r2, r5
 80095aa:	4b06      	ldr	r3, [pc, #24]	; (80095c4 <_svfiprintf_r+0x1f8>)
 80095ac:	a904      	add	r1, sp, #16
 80095ae:	4638      	mov	r0, r7
 80095b0:	f000 f87a 	bl	80096a8 <_printf_i>
 80095b4:	e7eb      	b.n	800958e <_svfiprintf_r+0x1c2>
 80095b6:	bf00      	nop
 80095b8:	08009b68 	.word	0x08009b68
 80095bc:	08009b72 	.word	0x08009b72
 80095c0:	00000000 	.word	0x00000000
 80095c4:	08009315 	.word	0x08009315
 80095c8:	08009b6e 	.word	0x08009b6e

080095cc <_printf_common>:
 80095cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d0:	4616      	mov	r6, r2
 80095d2:	4699      	mov	r9, r3
 80095d4:	688a      	ldr	r2, [r1, #8]
 80095d6:	690b      	ldr	r3, [r1, #16]
 80095d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095dc:	4293      	cmp	r3, r2
 80095de:	bfb8      	it	lt
 80095e0:	4613      	movlt	r3, r2
 80095e2:	6033      	str	r3, [r6, #0]
 80095e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095e8:	4607      	mov	r7, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	b10a      	cbz	r2, 80095f2 <_printf_common+0x26>
 80095ee:	3301      	adds	r3, #1
 80095f0:	6033      	str	r3, [r6, #0]
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	0699      	lsls	r1, r3, #26
 80095f6:	bf42      	ittt	mi
 80095f8:	6833      	ldrmi	r3, [r6, #0]
 80095fa:	3302      	addmi	r3, #2
 80095fc:	6033      	strmi	r3, [r6, #0]
 80095fe:	6825      	ldr	r5, [r4, #0]
 8009600:	f015 0506 	ands.w	r5, r5, #6
 8009604:	d106      	bne.n	8009614 <_printf_common+0x48>
 8009606:	f104 0a19 	add.w	sl, r4, #25
 800960a:	68e3      	ldr	r3, [r4, #12]
 800960c:	6832      	ldr	r2, [r6, #0]
 800960e:	1a9b      	subs	r3, r3, r2
 8009610:	42ab      	cmp	r3, r5
 8009612:	dc26      	bgt.n	8009662 <_printf_common+0x96>
 8009614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009618:	1e13      	subs	r3, r2, #0
 800961a:	6822      	ldr	r2, [r4, #0]
 800961c:	bf18      	it	ne
 800961e:	2301      	movne	r3, #1
 8009620:	0692      	lsls	r2, r2, #26
 8009622:	d42b      	bmi.n	800967c <_printf_common+0xb0>
 8009624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009628:	4649      	mov	r1, r9
 800962a:	4638      	mov	r0, r7
 800962c:	47c0      	blx	r8
 800962e:	3001      	adds	r0, #1
 8009630:	d01e      	beq.n	8009670 <_printf_common+0xa4>
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	68e5      	ldr	r5, [r4, #12]
 8009636:	6832      	ldr	r2, [r6, #0]
 8009638:	f003 0306 	and.w	r3, r3, #6
 800963c:	2b04      	cmp	r3, #4
 800963e:	bf08      	it	eq
 8009640:	1aad      	subeq	r5, r5, r2
 8009642:	68a3      	ldr	r3, [r4, #8]
 8009644:	6922      	ldr	r2, [r4, #16]
 8009646:	bf0c      	ite	eq
 8009648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800964c:	2500      	movne	r5, #0
 800964e:	4293      	cmp	r3, r2
 8009650:	bfc4      	itt	gt
 8009652:	1a9b      	subgt	r3, r3, r2
 8009654:	18ed      	addgt	r5, r5, r3
 8009656:	2600      	movs	r6, #0
 8009658:	341a      	adds	r4, #26
 800965a:	42b5      	cmp	r5, r6
 800965c:	d11a      	bne.n	8009694 <_printf_common+0xc8>
 800965e:	2000      	movs	r0, #0
 8009660:	e008      	b.n	8009674 <_printf_common+0xa8>
 8009662:	2301      	movs	r3, #1
 8009664:	4652      	mov	r2, sl
 8009666:	4649      	mov	r1, r9
 8009668:	4638      	mov	r0, r7
 800966a:	47c0      	blx	r8
 800966c:	3001      	adds	r0, #1
 800966e:	d103      	bne.n	8009678 <_printf_common+0xac>
 8009670:	f04f 30ff 	mov.w	r0, #4294967295
 8009674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009678:	3501      	adds	r5, #1
 800967a:	e7c6      	b.n	800960a <_printf_common+0x3e>
 800967c:	18e1      	adds	r1, r4, r3
 800967e:	1c5a      	adds	r2, r3, #1
 8009680:	2030      	movs	r0, #48	; 0x30
 8009682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009686:	4422      	add	r2, r4
 8009688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800968c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009690:	3302      	adds	r3, #2
 8009692:	e7c7      	b.n	8009624 <_printf_common+0x58>
 8009694:	2301      	movs	r3, #1
 8009696:	4622      	mov	r2, r4
 8009698:	4649      	mov	r1, r9
 800969a:	4638      	mov	r0, r7
 800969c:	47c0      	blx	r8
 800969e:	3001      	adds	r0, #1
 80096a0:	d0e6      	beq.n	8009670 <_printf_common+0xa4>
 80096a2:	3601      	adds	r6, #1
 80096a4:	e7d9      	b.n	800965a <_printf_common+0x8e>
	...

080096a8 <_printf_i>:
 80096a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096ac:	460c      	mov	r4, r1
 80096ae:	4691      	mov	r9, r2
 80096b0:	7e27      	ldrb	r7, [r4, #24]
 80096b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80096b4:	2f78      	cmp	r7, #120	; 0x78
 80096b6:	4680      	mov	r8, r0
 80096b8:	469a      	mov	sl, r3
 80096ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096be:	d807      	bhi.n	80096d0 <_printf_i+0x28>
 80096c0:	2f62      	cmp	r7, #98	; 0x62
 80096c2:	d80a      	bhi.n	80096da <_printf_i+0x32>
 80096c4:	2f00      	cmp	r7, #0
 80096c6:	f000 80d8 	beq.w	800987a <_printf_i+0x1d2>
 80096ca:	2f58      	cmp	r7, #88	; 0x58
 80096cc:	f000 80a3 	beq.w	8009816 <_printf_i+0x16e>
 80096d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80096d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096d8:	e03a      	b.n	8009750 <_printf_i+0xa8>
 80096da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096de:	2b15      	cmp	r3, #21
 80096e0:	d8f6      	bhi.n	80096d0 <_printf_i+0x28>
 80096e2:	a001      	add	r0, pc, #4	; (adr r0, 80096e8 <_printf_i+0x40>)
 80096e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80096e8:	08009741 	.word	0x08009741
 80096ec:	08009755 	.word	0x08009755
 80096f0:	080096d1 	.word	0x080096d1
 80096f4:	080096d1 	.word	0x080096d1
 80096f8:	080096d1 	.word	0x080096d1
 80096fc:	080096d1 	.word	0x080096d1
 8009700:	08009755 	.word	0x08009755
 8009704:	080096d1 	.word	0x080096d1
 8009708:	080096d1 	.word	0x080096d1
 800970c:	080096d1 	.word	0x080096d1
 8009710:	080096d1 	.word	0x080096d1
 8009714:	08009861 	.word	0x08009861
 8009718:	08009785 	.word	0x08009785
 800971c:	08009843 	.word	0x08009843
 8009720:	080096d1 	.word	0x080096d1
 8009724:	080096d1 	.word	0x080096d1
 8009728:	08009883 	.word	0x08009883
 800972c:	080096d1 	.word	0x080096d1
 8009730:	08009785 	.word	0x08009785
 8009734:	080096d1 	.word	0x080096d1
 8009738:	080096d1 	.word	0x080096d1
 800973c:	0800984b 	.word	0x0800984b
 8009740:	680b      	ldr	r3, [r1, #0]
 8009742:	1d1a      	adds	r2, r3, #4
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	600a      	str	r2, [r1, #0]
 8009748:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800974c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009750:	2301      	movs	r3, #1
 8009752:	e0a3      	b.n	800989c <_printf_i+0x1f4>
 8009754:	6825      	ldr	r5, [r4, #0]
 8009756:	6808      	ldr	r0, [r1, #0]
 8009758:	062e      	lsls	r6, r5, #24
 800975a:	f100 0304 	add.w	r3, r0, #4
 800975e:	d50a      	bpl.n	8009776 <_printf_i+0xce>
 8009760:	6805      	ldr	r5, [r0, #0]
 8009762:	600b      	str	r3, [r1, #0]
 8009764:	2d00      	cmp	r5, #0
 8009766:	da03      	bge.n	8009770 <_printf_i+0xc8>
 8009768:	232d      	movs	r3, #45	; 0x2d
 800976a:	426d      	negs	r5, r5
 800976c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009770:	485e      	ldr	r0, [pc, #376]	; (80098ec <_printf_i+0x244>)
 8009772:	230a      	movs	r3, #10
 8009774:	e019      	b.n	80097aa <_printf_i+0x102>
 8009776:	f015 0f40 	tst.w	r5, #64	; 0x40
 800977a:	6805      	ldr	r5, [r0, #0]
 800977c:	600b      	str	r3, [r1, #0]
 800977e:	bf18      	it	ne
 8009780:	b22d      	sxthne	r5, r5
 8009782:	e7ef      	b.n	8009764 <_printf_i+0xbc>
 8009784:	680b      	ldr	r3, [r1, #0]
 8009786:	6825      	ldr	r5, [r4, #0]
 8009788:	1d18      	adds	r0, r3, #4
 800978a:	6008      	str	r0, [r1, #0]
 800978c:	0628      	lsls	r0, r5, #24
 800978e:	d501      	bpl.n	8009794 <_printf_i+0xec>
 8009790:	681d      	ldr	r5, [r3, #0]
 8009792:	e002      	b.n	800979a <_printf_i+0xf2>
 8009794:	0669      	lsls	r1, r5, #25
 8009796:	d5fb      	bpl.n	8009790 <_printf_i+0xe8>
 8009798:	881d      	ldrh	r5, [r3, #0]
 800979a:	4854      	ldr	r0, [pc, #336]	; (80098ec <_printf_i+0x244>)
 800979c:	2f6f      	cmp	r7, #111	; 0x6f
 800979e:	bf0c      	ite	eq
 80097a0:	2308      	moveq	r3, #8
 80097a2:	230a      	movne	r3, #10
 80097a4:	2100      	movs	r1, #0
 80097a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097aa:	6866      	ldr	r6, [r4, #4]
 80097ac:	60a6      	str	r6, [r4, #8]
 80097ae:	2e00      	cmp	r6, #0
 80097b0:	bfa2      	ittt	ge
 80097b2:	6821      	ldrge	r1, [r4, #0]
 80097b4:	f021 0104 	bicge.w	r1, r1, #4
 80097b8:	6021      	strge	r1, [r4, #0]
 80097ba:	b90d      	cbnz	r5, 80097c0 <_printf_i+0x118>
 80097bc:	2e00      	cmp	r6, #0
 80097be:	d04d      	beq.n	800985c <_printf_i+0x1b4>
 80097c0:	4616      	mov	r6, r2
 80097c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80097c6:	fb03 5711 	mls	r7, r3, r1, r5
 80097ca:	5dc7      	ldrb	r7, [r0, r7]
 80097cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097d0:	462f      	mov	r7, r5
 80097d2:	42bb      	cmp	r3, r7
 80097d4:	460d      	mov	r5, r1
 80097d6:	d9f4      	bls.n	80097c2 <_printf_i+0x11a>
 80097d8:	2b08      	cmp	r3, #8
 80097da:	d10b      	bne.n	80097f4 <_printf_i+0x14c>
 80097dc:	6823      	ldr	r3, [r4, #0]
 80097de:	07df      	lsls	r7, r3, #31
 80097e0:	d508      	bpl.n	80097f4 <_printf_i+0x14c>
 80097e2:	6923      	ldr	r3, [r4, #16]
 80097e4:	6861      	ldr	r1, [r4, #4]
 80097e6:	4299      	cmp	r1, r3
 80097e8:	bfde      	ittt	le
 80097ea:	2330      	movle	r3, #48	; 0x30
 80097ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097f4:	1b92      	subs	r2, r2, r6
 80097f6:	6122      	str	r2, [r4, #16]
 80097f8:	f8cd a000 	str.w	sl, [sp]
 80097fc:	464b      	mov	r3, r9
 80097fe:	aa03      	add	r2, sp, #12
 8009800:	4621      	mov	r1, r4
 8009802:	4640      	mov	r0, r8
 8009804:	f7ff fee2 	bl	80095cc <_printf_common>
 8009808:	3001      	adds	r0, #1
 800980a:	d14c      	bne.n	80098a6 <_printf_i+0x1fe>
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	b004      	add	sp, #16
 8009812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009816:	4835      	ldr	r0, [pc, #212]	; (80098ec <_printf_i+0x244>)
 8009818:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	680e      	ldr	r6, [r1, #0]
 8009820:	061f      	lsls	r7, r3, #24
 8009822:	f856 5b04 	ldr.w	r5, [r6], #4
 8009826:	600e      	str	r6, [r1, #0]
 8009828:	d514      	bpl.n	8009854 <_printf_i+0x1ac>
 800982a:	07d9      	lsls	r1, r3, #31
 800982c:	bf44      	itt	mi
 800982e:	f043 0320 	orrmi.w	r3, r3, #32
 8009832:	6023      	strmi	r3, [r4, #0]
 8009834:	b91d      	cbnz	r5, 800983e <_printf_i+0x196>
 8009836:	6823      	ldr	r3, [r4, #0]
 8009838:	f023 0320 	bic.w	r3, r3, #32
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	2310      	movs	r3, #16
 8009840:	e7b0      	b.n	80097a4 <_printf_i+0xfc>
 8009842:	6823      	ldr	r3, [r4, #0]
 8009844:	f043 0320 	orr.w	r3, r3, #32
 8009848:	6023      	str	r3, [r4, #0]
 800984a:	2378      	movs	r3, #120	; 0x78
 800984c:	4828      	ldr	r0, [pc, #160]	; (80098f0 <_printf_i+0x248>)
 800984e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009852:	e7e3      	b.n	800981c <_printf_i+0x174>
 8009854:	065e      	lsls	r6, r3, #25
 8009856:	bf48      	it	mi
 8009858:	b2ad      	uxthmi	r5, r5
 800985a:	e7e6      	b.n	800982a <_printf_i+0x182>
 800985c:	4616      	mov	r6, r2
 800985e:	e7bb      	b.n	80097d8 <_printf_i+0x130>
 8009860:	680b      	ldr	r3, [r1, #0]
 8009862:	6826      	ldr	r6, [r4, #0]
 8009864:	6960      	ldr	r0, [r4, #20]
 8009866:	1d1d      	adds	r5, r3, #4
 8009868:	600d      	str	r5, [r1, #0]
 800986a:	0635      	lsls	r5, r6, #24
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	d501      	bpl.n	8009874 <_printf_i+0x1cc>
 8009870:	6018      	str	r0, [r3, #0]
 8009872:	e002      	b.n	800987a <_printf_i+0x1d2>
 8009874:	0671      	lsls	r1, r6, #25
 8009876:	d5fb      	bpl.n	8009870 <_printf_i+0x1c8>
 8009878:	8018      	strh	r0, [r3, #0]
 800987a:	2300      	movs	r3, #0
 800987c:	6123      	str	r3, [r4, #16]
 800987e:	4616      	mov	r6, r2
 8009880:	e7ba      	b.n	80097f8 <_printf_i+0x150>
 8009882:	680b      	ldr	r3, [r1, #0]
 8009884:	1d1a      	adds	r2, r3, #4
 8009886:	600a      	str	r2, [r1, #0]
 8009888:	681e      	ldr	r6, [r3, #0]
 800988a:	6862      	ldr	r2, [r4, #4]
 800988c:	2100      	movs	r1, #0
 800988e:	4630      	mov	r0, r6
 8009890:	f7f6 fcae 	bl	80001f0 <memchr>
 8009894:	b108      	cbz	r0, 800989a <_printf_i+0x1f2>
 8009896:	1b80      	subs	r0, r0, r6
 8009898:	6060      	str	r0, [r4, #4]
 800989a:	6863      	ldr	r3, [r4, #4]
 800989c:	6123      	str	r3, [r4, #16]
 800989e:	2300      	movs	r3, #0
 80098a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098a4:	e7a8      	b.n	80097f8 <_printf_i+0x150>
 80098a6:	6923      	ldr	r3, [r4, #16]
 80098a8:	4632      	mov	r2, r6
 80098aa:	4649      	mov	r1, r9
 80098ac:	4640      	mov	r0, r8
 80098ae:	47d0      	blx	sl
 80098b0:	3001      	adds	r0, #1
 80098b2:	d0ab      	beq.n	800980c <_printf_i+0x164>
 80098b4:	6823      	ldr	r3, [r4, #0]
 80098b6:	079b      	lsls	r3, r3, #30
 80098b8:	d413      	bmi.n	80098e2 <_printf_i+0x23a>
 80098ba:	68e0      	ldr	r0, [r4, #12]
 80098bc:	9b03      	ldr	r3, [sp, #12]
 80098be:	4298      	cmp	r0, r3
 80098c0:	bfb8      	it	lt
 80098c2:	4618      	movlt	r0, r3
 80098c4:	e7a4      	b.n	8009810 <_printf_i+0x168>
 80098c6:	2301      	movs	r3, #1
 80098c8:	4632      	mov	r2, r6
 80098ca:	4649      	mov	r1, r9
 80098cc:	4640      	mov	r0, r8
 80098ce:	47d0      	blx	sl
 80098d0:	3001      	adds	r0, #1
 80098d2:	d09b      	beq.n	800980c <_printf_i+0x164>
 80098d4:	3501      	adds	r5, #1
 80098d6:	68e3      	ldr	r3, [r4, #12]
 80098d8:	9903      	ldr	r1, [sp, #12]
 80098da:	1a5b      	subs	r3, r3, r1
 80098dc:	42ab      	cmp	r3, r5
 80098de:	dcf2      	bgt.n	80098c6 <_printf_i+0x21e>
 80098e0:	e7eb      	b.n	80098ba <_printf_i+0x212>
 80098e2:	2500      	movs	r5, #0
 80098e4:	f104 0619 	add.w	r6, r4, #25
 80098e8:	e7f5      	b.n	80098d6 <_printf_i+0x22e>
 80098ea:	bf00      	nop
 80098ec:	08009b79 	.word	0x08009b79
 80098f0:	08009b8a 	.word	0x08009b8a

080098f4 <memmove>:
 80098f4:	4288      	cmp	r0, r1
 80098f6:	b510      	push	{r4, lr}
 80098f8:	eb01 0402 	add.w	r4, r1, r2
 80098fc:	d902      	bls.n	8009904 <memmove+0x10>
 80098fe:	4284      	cmp	r4, r0
 8009900:	4623      	mov	r3, r4
 8009902:	d807      	bhi.n	8009914 <memmove+0x20>
 8009904:	1e43      	subs	r3, r0, #1
 8009906:	42a1      	cmp	r1, r4
 8009908:	d008      	beq.n	800991c <memmove+0x28>
 800990a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800990e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009912:	e7f8      	b.n	8009906 <memmove+0x12>
 8009914:	4402      	add	r2, r0
 8009916:	4601      	mov	r1, r0
 8009918:	428a      	cmp	r2, r1
 800991a:	d100      	bne.n	800991e <memmove+0x2a>
 800991c:	bd10      	pop	{r4, pc}
 800991e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009926:	e7f7      	b.n	8009918 <memmove+0x24>

08009928 <_free_r>:
 8009928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800992a:	2900      	cmp	r1, #0
 800992c:	d048      	beq.n	80099c0 <_free_r+0x98>
 800992e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009932:	9001      	str	r0, [sp, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	f1a1 0404 	sub.w	r4, r1, #4
 800993a:	bfb8      	it	lt
 800993c:	18e4      	addlt	r4, r4, r3
 800993e:	f000 f8d3 	bl	8009ae8 <__malloc_lock>
 8009942:	4a20      	ldr	r2, [pc, #128]	; (80099c4 <_free_r+0x9c>)
 8009944:	9801      	ldr	r0, [sp, #4]
 8009946:	6813      	ldr	r3, [r2, #0]
 8009948:	4615      	mov	r5, r2
 800994a:	b933      	cbnz	r3, 800995a <_free_r+0x32>
 800994c:	6063      	str	r3, [r4, #4]
 800994e:	6014      	str	r4, [r2, #0]
 8009950:	b003      	add	sp, #12
 8009952:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009956:	f000 b8cd 	b.w	8009af4 <__malloc_unlock>
 800995a:	42a3      	cmp	r3, r4
 800995c:	d90b      	bls.n	8009976 <_free_r+0x4e>
 800995e:	6821      	ldr	r1, [r4, #0]
 8009960:	1862      	adds	r2, r4, r1
 8009962:	4293      	cmp	r3, r2
 8009964:	bf04      	itt	eq
 8009966:	681a      	ldreq	r2, [r3, #0]
 8009968:	685b      	ldreq	r3, [r3, #4]
 800996a:	6063      	str	r3, [r4, #4]
 800996c:	bf04      	itt	eq
 800996e:	1852      	addeq	r2, r2, r1
 8009970:	6022      	streq	r2, [r4, #0]
 8009972:	602c      	str	r4, [r5, #0]
 8009974:	e7ec      	b.n	8009950 <_free_r+0x28>
 8009976:	461a      	mov	r2, r3
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	b10b      	cbz	r3, 8009980 <_free_r+0x58>
 800997c:	42a3      	cmp	r3, r4
 800997e:	d9fa      	bls.n	8009976 <_free_r+0x4e>
 8009980:	6811      	ldr	r1, [r2, #0]
 8009982:	1855      	adds	r5, r2, r1
 8009984:	42a5      	cmp	r5, r4
 8009986:	d10b      	bne.n	80099a0 <_free_r+0x78>
 8009988:	6824      	ldr	r4, [r4, #0]
 800998a:	4421      	add	r1, r4
 800998c:	1854      	adds	r4, r2, r1
 800998e:	42a3      	cmp	r3, r4
 8009990:	6011      	str	r1, [r2, #0]
 8009992:	d1dd      	bne.n	8009950 <_free_r+0x28>
 8009994:	681c      	ldr	r4, [r3, #0]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	6053      	str	r3, [r2, #4]
 800999a:	4421      	add	r1, r4
 800999c:	6011      	str	r1, [r2, #0]
 800999e:	e7d7      	b.n	8009950 <_free_r+0x28>
 80099a0:	d902      	bls.n	80099a8 <_free_r+0x80>
 80099a2:	230c      	movs	r3, #12
 80099a4:	6003      	str	r3, [r0, #0]
 80099a6:	e7d3      	b.n	8009950 <_free_r+0x28>
 80099a8:	6825      	ldr	r5, [r4, #0]
 80099aa:	1961      	adds	r1, r4, r5
 80099ac:	428b      	cmp	r3, r1
 80099ae:	bf04      	itt	eq
 80099b0:	6819      	ldreq	r1, [r3, #0]
 80099b2:	685b      	ldreq	r3, [r3, #4]
 80099b4:	6063      	str	r3, [r4, #4]
 80099b6:	bf04      	itt	eq
 80099b8:	1949      	addeq	r1, r1, r5
 80099ba:	6021      	streq	r1, [r4, #0]
 80099bc:	6054      	str	r4, [r2, #4]
 80099be:	e7c7      	b.n	8009950 <_free_r+0x28>
 80099c0:	b003      	add	sp, #12
 80099c2:	bd30      	pop	{r4, r5, pc}
 80099c4:	200004ec 	.word	0x200004ec

080099c8 <_malloc_r>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	1ccd      	adds	r5, r1, #3
 80099cc:	f025 0503 	bic.w	r5, r5, #3
 80099d0:	3508      	adds	r5, #8
 80099d2:	2d0c      	cmp	r5, #12
 80099d4:	bf38      	it	cc
 80099d6:	250c      	movcc	r5, #12
 80099d8:	2d00      	cmp	r5, #0
 80099da:	4606      	mov	r6, r0
 80099dc:	db01      	blt.n	80099e2 <_malloc_r+0x1a>
 80099de:	42a9      	cmp	r1, r5
 80099e0:	d903      	bls.n	80099ea <_malloc_r+0x22>
 80099e2:	230c      	movs	r3, #12
 80099e4:	6033      	str	r3, [r6, #0]
 80099e6:	2000      	movs	r0, #0
 80099e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099ea:	f000 f87d 	bl	8009ae8 <__malloc_lock>
 80099ee:	4921      	ldr	r1, [pc, #132]	; (8009a74 <_malloc_r+0xac>)
 80099f0:	680a      	ldr	r2, [r1, #0]
 80099f2:	4614      	mov	r4, r2
 80099f4:	b99c      	cbnz	r4, 8009a1e <_malloc_r+0x56>
 80099f6:	4f20      	ldr	r7, [pc, #128]	; (8009a78 <_malloc_r+0xb0>)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	b923      	cbnz	r3, 8009a06 <_malloc_r+0x3e>
 80099fc:	4621      	mov	r1, r4
 80099fe:	4630      	mov	r0, r6
 8009a00:	f000 f862 	bl	8009ac8 <_sbrk_r>
 8009a04:	6038      	str	r0, [r7, #0]
 8009a06:	4629      	mov	r1, r5
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f000 f85d 	bl	8009ac8 <_sbrk_r>
 8009a0e:	1c43      	adds	r3, r0, #1
 8009a10:	d123      	bne.n	8009a5a <_malloc_r+0x92>
 8009a12:	230c      	movs	r3, #12
 8009a14:	6033      	str	r3, [r6, #0]
 8009a16:	4630      	mov	r0, r6
 8009a18:	f000 f86c 	bl	8009af4 <__malloc_unlock>
 8009a1c:	e7e3      	b.n	80099e6 <_malloc_r+0x1e>
 8009a1e:	6823      	ldr	r3, [r4, #0]
 8009a20:	1b5b      	subs	r3, r3, r5
 8009a22:	d417      	bmi.n	8009a54 <_malloc_r+0x8c>
 8009a24:	2b0b      	cmp	r3, #11
 8009a26:	d903      	bls.n	8009a30 <_malloc_r+0x68>
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	441c      	add	r4, r3
 8009a2c:	6025      	str	r5, [r4, #0]
 8009a2e:	e004      	b.n	8009a3a <_malloc_r+0x72>
 8009a30:	6863      	ldr	r3, [r4, #4]
 8009a32:	42a2      	cmp	r2, r4
 8009a34:	bf0c      	ite	eq
 8009a36:	600b      	streq	r3, [r1, #0]
 8009a38:	6053      	strne	r3, [r2, #4]
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f000 f85a 	bl	8009af4 <__malloc_unlock>
 8009a40:	f104 000b 	add.w	r0, r4, #11
 8009a44:	1d23      	adds	r3, r4, #4
 8009a46:	f020 0007 	bic.w	r0, r0, #7
 8009a4a:	1ac2      	subs	r2, r0, r3
 8009a4c:	d0cc      	beq.n	80099e8 <_malloc_r+0x20>
 8009a4e:	1a1b      	subs	r3, r3, r0
 8009a50:	50a3      	str	r3, [r4, r2]
 8009a52:	e7c9      	b.n	80099e8 <_malloc_r+0x20>
 8009a54:	4622      	mov	r2, r4
 8009a56:	6864      	ldr	r4, [r4, #4]
 8009a58:	e7cc      	b.n	80099f4 <_malloc_r+0x2c>
 8009a5a:	1cc4      	adds	r4, r0, #3
 8009a5c:	f024 0403 	bic.w	r4, r4, #3
 8009a60:	42a0      	cmp	r0, r4
 8009a62:	d0e3      	beq.n	8009a2c <_malloc_r+0x64>
 8009a64:	1a21      	subs	r1, r4, r0
 8009a66:	4630      	mov	r0, r6
 8009a68:	f000 f82e 	bl	8009ac8 <_sbrk_r>
 8009a6c:	3001      	adds	r0, #1
 8009a6e:	d1dd      	bne.n	8009a2c <_malloc_r+0x64>
 8009a70:	e7cf      	b.n	8009a12 <_malloc_r+0x4a>
 8009a72:	bf00      	nop
 8009a74:	200004ec 	.word	0x200004ec
 8009a78:	200004f0 	.word	0x200004f0

08009a7c <_realloc_r>:
 8009a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7e:	4607      	mov	r7, r0
 8009a80:	4614      	mov	r4, r2
 8009a82:	460e      	mov	r6, r1
 8009a84:	b921      	cbnz	r1, 8009a90 <_realloc_r+0x14>
 8009a86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	f7ff bf9c 	b.w	80099c8 <_malloc_r>
 8009a90:	b922      	cbnz	r2, 8009a9c <_realloc_r+0x20>
 8009a92:	f7ff ff49 	bl	8009928 <_free_r>
 8009a96:	4625      	mov	r5, r4
 8009a98:	4628      	mov	r0, r5
 8009a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a9c:	f000 f830 	bl	8009b00 <_malloc_usable_size_r>
 8009aa0:	42a0      	cmp	r0, r4
 8009aa2:	d20f      	bcs.n	8009ac4 <_realloc_r+0x48>
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	4638      	mov	r0, r7
 8009aa8:	f7ff ff8e 	bl	80099c8 <_malloc_r>
 8009aac:	4605      	mov	r5, r0
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	d0f2      	beq.n	8009a98 <_realloc_r+0x1c>
 8009ab2:	4631      	mov	r1, r6
 8009ab4:	4622      	mov	r2, r4
 8009ab6:	f7ff fbef 	bl	8009298 <memcpy>
 8009aba:	4631      	mov	r1, r6
 8009abc:	4638      	mov	r0, r7
 8009abe:	f7ff ff33 	bl	8009928 <_free_r>
 8009ac2:	e7e9      	b.n	8009a98 <_realloc_r+0x1c>
 8009ac4:	4635      	mov	r5, r6
 8009ac6:	e7e7      	b.n	8009a98 <_realloc_r+0x1c>

08009ac8 <_sbrk_r>:
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	4d06      	ldr	r5, [pc, #24]	; (8009ae4 <_sbrk_r+0x1c>)
 8009acc:	2300      	movs	r3, #0
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	602b      	str	r3, [r5, #0]
 8009ad4:	f7f7 f8be 	bl	8000c54 <_sbrk>
 8009ad8:	1c43      	adds	r3, r0, #1
 8009ada:	d102      	bne.n	8009ae2 <_sbrk_r+0x1a>
 8009adc:	682b      	ldr	r3, [r5, #0]
 8009ade:	b103      	cbz	r3, 8009ae2 <_sbrk_r+0x1a>
 8009ae0:	6023      	str	r3, [r4, #0]
 8009ae2:	bd38      	pop	{r3, r4, r5, pc}
 8009ae4:	20000690 	.word	0x20000690

08009ae8 <__malloc_lock>:
 8009ae8:	4801      	ldr	r0, [pc, #4]	; (8009af0 <__malloc_lock+0x8>)
 8009aea:	f000 b811 	b.w	8009b10 <__retarget_lock_acquire_recursive>
 8009aee:	bf00      	nop
 8009af0:	20000698 	.word	0x20000698

08009af4 <__malloc_unlock>:
 8009af4:	4801      	ldr	r0, [pc, #4]	; (8009afc <__malloc_unlock+0x8>)
 8009af6:	f000 b80c 	b.w	8009b12 <__retarget_lock_release_recursive>
 8009afa:	bf00      	nop
 8009afc:	20000698 	.word	0x20000698

08009b00 <_malloc_usable_size_r>:
 8009b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b04:	1f18      	subs	r0, r3, #4
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	bfbc      	itt	lt
 8009b0a:	580b      	ldrlt	r3, [r1, r0]
 8009b0c:	18c0      	addlt	r0, r0, r3
 8009b0e:	4770      	bx	lr

08009b10 <__retarget_lock_acquire_recursive>:
 8009b10:	4770      	bx	lr

08009b12 <__retarget_lock_release_recursive>:
 8009b12:	4770      	bx	lr

08009b14 <_init>:
 8009b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b16:	bf00      	nop
 8009b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b1a:	bc08      	pop	{r3}
 8009b1c:	469e      	mov	lr, r3
 8009b1e:	4770      	bx	lr

08009b20 <_fini>:
 8009b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b22:	bf00      	nop
 8009b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b26:	bc08      	pop	{r3}
 8009b28:	469e      	mov	lr, r3
 8009b2a:	4770      	bx	lr
